// @ts-nocheck
// Auto-generated by type-generator script at 2025-07-27T19:47:25.900Z

export interface PlatformTypes {
  ActionStoreAPI: PlatformTypesReduxStore;
  AdManagers: PlatformTypesAdManagers;
  AudioOutputDevicesAPI: PlatformTypesAudioOutputDevicesAPI;
  AudiobookCappingAPI: PlatformTypesAudiobookCappingAPI;
  AuthorizationAPI: PlatformTypesRegistryMapValueInstance7;
  BuddyFeedAPI: PlatformTypesBuddyFeedAPI;
  ClipboardAPI: PlatformTypesClipboardAPI;
  CollectionPlatformAPI: PlatformTypesCollectionPlatformAPI;
  ConnectAPI: PlatformTypesConnectAPI;
  ConnectDeviceManagementAPI: PlatformTypesConnectDeviceManagementAPI;
  ConnectDevicesAPI: PlatformTypesConnectDevicesAPI;
  ConnectDiscoveryAPI: PlatformTypesConnectDiscoveryAPI;
  ConnectRestrictionStateAPI: PlatformTypesConnectRestrictionsAPI;
  ConnectRestrictionsAPI: PlatformTypesConnectRestrictionsAPI;
  ConnectTransferAPI: PlatformTypesConnectTransferAPI;
  ContextualShuffleAPI: PlatformTypesContextualShuffleAPI;
  ControlMessageAPI: PlatformTypesControlMessageAPI;
  CurationAPI: PlatformTypesCurationAPI;
  DesktopLogsAPI: PlatformTypesDesktopLogsAPI;
  EqualizerAPI: PlatformTypesEqualizerAPI;
  EventSender: PlatformTypesRegistryMapValueInstance8;
  ExternalAccessoryAPI: PlatformTypesExternalAccessoryAPI;
  FeatureFlags: PlatformTypesFeatureFlags;
  FeedbackAPI: PlatformTypesFeedbackAPI;
  FollowAPI: PlatformTypesFollowAPI;
  GraphQLLoader: PlatformTypesGraphQLLoader;
  History: PlatformTypesHistory;
  IndexedDbAPI: PlatformTypesContextualShuffleAPIIndexedDbAPI;
  JamDevicesAPI: PlatformTypesJamDevicesAPI;
  LibraryAPI: PlatformTypesLibraryAPI;
  LifecycleAPI: PlatformTypesLifecycleAPI;
  LocalFilesAPI: PlatformTypesLocalFilesAPI;
  LocalStorageAPI: PlatformTypesEqualizerAPILocalStorageAPI;
  NativeAPI: PlatformTypesNativeAPI;
  OfflineAPI: PlatformTypesOfflineAPI;
  PlatformData: PlatformTypesPlatformData;
  PlayHistoryAPI: PlatformTypesPlayHistoryAPI;
  PlaybackAPI: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPI;
  PlaybackFiltersAPI: PlatformTypesPlaybackFiltersAPI;
  PlayerAPI: PlatformTypesPlayerAPI;
  PlaylistAPI: PlatformTypesPlaylistAPI;
  PlaylistPermissionsAPI: PlatformTypesPlaylistPermissionsAPI;
  PlaylistResyncAPI: PlatformTypesPlaylistResyncAPI;
  PrivateSessionAPI: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPI;
  ProductStateAPI: PlatformTypesRegistryMapValueInstance5;
  PubSubAPI: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  RecentlyPlayedAPI: PlatformTypesRecentlyPlayedAPI;
  ReduxStore: PlatformTypesReduxStore;
  Registry: PlatformTypesRegistry;
  RemoteConfigDebugAPI: PlatformTypesRemoteConfigDebugAPI;
  RemoteConfiguration: PlatformTypesRemoteConfiguration;
  RemoteConfigurationWithLocalOverrides: PlatformTypesRemoteConfigurationWithLocalOverrides;
  ReportAPI: PlatformTypesReportAPI;
  RequestBuilder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  RootlistAPI: PlatformTypesRootlistAPI;
  SEOExperiments: PlatformTypesSEOExperiments;
  SegmentsAPI: PlatformTypesSegmentsAPI;
  ServiceWorkerMessenger: Promise<unknown>;
  Session: PlatformTypesSession;
  SettingsAPI: PlatformTypesSettingsAPI;
  ShowAPI: PlatformTypesShowAPI;
  ShuffleAPI: PlatformTypesShuffleAPI;
  SingAlongAPI: PlatformTypesSingAlongAPI;
  SmartShuffleEligibilityAPI: PlatformTypesPlayerAPISmartShuffleEligibility;
  SocialConnectAPI: PlatformTypesSocialConnectAPI;
  StandalonePlayerCoordinatorAPI: PlatformTypesStandalonePlayerCoordinatorAPI;
  Translations: PlatformTypesTranslations;
  Transport: PlatformTypesRegistryMapValueInstanceTransport;
  UBILogger: PlatformTypesUBILogger;
  UpdateAPI: PlatformTypesUpdateAPI;
  UrlDispenserServiceClient: PlatformTypesUrlDispenserServiceClient;
  UserAPI: PlatformTypesRegistryMapValueInstance4;
  UserCommentsAPI: PlatformTypesUserCommentsAPI;
  VideoAPI: PlatformTypesVideoAPI;
  ZoomAPI: PlatformTypesSettingsAPIViewportZoomZoomApi;
  container: string;
  enableCastConnect: boolean;
  initialProductState: PlatformTypesInitialProductState;
  initialUser: PlatformTypesInitialUser;
  isDeveloperMode: boolean;
  operatingSystem: string;
  username: string;
  version: string;
}

export interface PlatformTypesAdManagers {
  adStateReporter: PlatformTypesAdManagersAdStateReporter;
  audio: PlatformTypesAdManagersAudio;
  billboard: PlatformTypesAdManagersBillboard;
  config: PlatformTypesAdManagersConfig;
  embeddedAd: PlatformTypesAdManagersEmbeddedAd;
  home: PlatformTypesAdManagersHome;
  hpto: PlatformTypesAdManagersHpto;
  inStreamApi: PlatformTypesAdManagersAudioInStreamApi;
  leaderboard: PlatformTypesAdManagersLeaderboard;
  sponsoredPlaylist: PlatformTypesAdManagersSponsoredPlaylist;
  survey: PlatformTypesAdManagersSurvey;
  vto: PlatformTypesAdManagersVto;
}

export interface PlatformTypesAdManagersAdStateReporter {
  focusState: PlatformTypesAdManagersAdStateReporterFocusState;
  history: PlatformTypesHistory;
  onFocusChanged: PlatformTypesAdManagersAdStateReporterOnFocusChanged;
  setAdStateKey: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPutState;
}

export interface PlatformTypesAdManagersAdStateReporterFocusState {
  addFocusListener: PlatformTypesAdManagersVtoManagerFocusStateAddFocusListener;
  hasFocus: PlatformTypesAdManagersVtoManagerFocusStateHasFocus;
  listeners: Array<PlatformTypesAdManagersAdStateReporter>;
  removeAllFocusListeners: PlatformTypesAdManagersVtoManagerFocusStateRemoveAllFocusListeners;
  removeFocusListener: PlatformTypesAdManagersVtoManagerFocusStateRemoveFocusListener;
}

export type PlatformTypesAdManagersAdStateReporterOnFocusChanged = (arg0: any) => unknown;

export interface PlatformTypesAdManagersAudio {
  audioApi: PlatformTypesAdManagersAudioAudioApi;
  disable: PlatformTypesAdManagersAudioDisable;
  enable: PlatformTypesAdManagersAudioEnable;
  enabled: boolean;
  getContextAdInfo: PlatformTypesAdManagersAudioGetContextAdInfo;
  getEnabled: PlatformTypesAdManagersAudioGetEnabled;
  inStreamApi: PlatformTypesAdManagersAudioInStreamApi;
  logClick: PlatformTypesAdManagersAudioLogClick;
  onAdMessage: PlatformTypesAdManagersAudioOnAdMessage;
  onInfoCallback: PlatformTypesAdManagersAudioOnInfoCallback;
  subscription: PlatformTypesAdManagersAudioSubscription;
}

export interface PlatformTypesAdManagersAudioAudioApi {
  postEvent: PlatformTypesAdManagersAudioAudioApiPostEvent;
}

export type PlatformTypesAdManagersAudioAudioApiPostEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersAudioDisable = () => unknown;

export type PlatformTypesAdManagersAudioEnable = (arg0: any) => unknown;

export type PlatformTypesAdManagersAudioGetContextAdInfo = () => unknown;

export type PlatformTypesAdManagersAudioGetEnabled = () => unknown;

export interface PlatformTypesAdManagersAudioInStreamApi {
  adsCoreConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  disable: PlatformTypesAdManagersAudioInStreamApiDisable;
  enable: PlatformTypesAdManagersAudioInStreamApiEnable;
  enabled: boolean;
  getInStreamAd: PlatformTypesAdManagersAudioInStreamApiGetInStreamAd;
  inStreamAd: null;
  inStreamAdsSubscription: PlatformTypesAdManagersAudioSubscription;
  onAdMessageCallbacks: Array<
    | PlatformTypesAdManagersAudioInStreamApiOnAdMessageCallbacksItem
    | PlatformTypesAdManagersAudioOnAdMessage
  >;
  processMessage: PlatformTypesAdManagersAudioInStreamApiProcessMessage;
  skipToNext: PlatformTypesAdManagersAudioInStreamApiSkipToNext;
  subscribeToInStreamAds: PlatformTypesAdManagersAudioInStreamApiSubscribeToInStreamAds;
}

export interface PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector {
  clearSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorClearSlot;
  createSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorCreateSlot;
  enableSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorEnableSlot;
  fetchSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorFetchSlot;
  getAdState: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetAdState;
  getAds: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetAds;
  getPreviewAd: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetPreviewAd;
  getSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetSlot;
  getSlotSettings: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetSlotSettings;
  increaseStreamTime: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorIncreaseStreamTime;
  insertAd: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorInsertAd;
  logAudioVolume: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorLogAudioVolume;
  overrideCountry: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorOverrideCountry;
  overridePodcastMetadata: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorOverridePodcastMetadata;
  prepareNextContextSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPrepareNextContextSlot;
  putState: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPutState;
  putTargeting: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPutTargeting;
  removeRequestHeader: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorRemoveRequestHeader;
  setRequestHeader: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSetRequestHeader;
  skipToNextWithOverride: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSkipToNextWithOverride;
  subscribeToAdFormat: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToAdFormat;
  subscribeToInStreamAds: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToInStreamAds;
  subscribeToProductState: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToProductState;
  subscribeToSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToSlot;
  subscribeToState: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToState;
  triggerSlot: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorTriggerSlot;
  updateAdServerEndpoint: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorUpdateAdServerEndpoint;
  updateAdStateEndpoint: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorUpdateAdStateEndpoint;
}

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorClearSlot = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorCreateSlot = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorEnableSlot = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorFetchSlot = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetAds = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetAdState = () => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetPreviewAd = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetSlot = (arg0: any) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorGetSlotSettings = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorIncreaseStreamTime = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorInsertAd = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorLogAudioVolume = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorOverrideCountry = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorOverridePodcastMetadata = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPrepareNextContextSlot = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPutState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorPutTargeting = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorRemoveRequestHeader = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSetRequestHeader = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSkipToNextWithOverride =
  () => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToAdFormat = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToInStreamAds = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToProductState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToSlot = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorSubscribeToState = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorTriggerSlot = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorUpdateAdServerEndpoint = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiAdsCoreConnectorUpdateAdStateEndpoint = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiDisable = () => unknown;

export type PlatformTypesAdManagersAudioInStreamApiEnable = (arg0: any) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiGetInStreamAd = () => unknown;

export type PlatformTypesAdManagersAudioInStreamApiOnAdMessageCallbacksItem = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiProcessMessage = (arg0: any) => unknown;

export type PlatformTypesAdManagersAudioInStreamApiSkipToNext = () => unknown;

export type PlatformTypesAdManagersAudioInStreamApiSubscribeToInStreamAds = () => unknown;

export type PlatformTypesAdManagersAudioLogClick = (arg0: any, arg1: any) => unknown;

export type PlatformTypesAdManagersAudioOnAdMessage = (arg0: any) => unknown;

export type PlatformTypesAdManagersAudioOnInfoCallback = (arg0: any) => unknown;

export interface PlatformTypesAdManagersAudioSubscription {
  cancel: PlatformTypesAdManagersAudioSubscriptionCancel;
}

export type PlatformTypesAdManagersAudioSubscriptionCancel = () => unknown;

export interface PlatformTypesAdManagersBillboard {
  activating: boolean;
  activitySubscription: PlatformTypesAdManagersBillboardActivitySubscription;
  adClick: PlatformTypesAdManagersBillboardAdClick;
  billboardApi: PlatformTypesAdManagersBillboardBillboardApi;
  clearSlot: PlatformTypesAdManagersBillboardClearSlot;
  disable: PlatformTypesAdManagersBillboardDisable;
  disableWindow: PlatformTypesAdManagersBillboardDisableWindow;
  displayBillboard: PlatformTypesAdManagersBillboardDisplayBillboard;
  enable: PlatformTypesAdManagersBillboardEnable;
  enabled: boolean;
  finish: PlatformTypesAdManagersBillboardFinish;
  focusMinimize: PlatformTypesAdManagersBillboardFocusMinimize;
  focusState: PlatformTypesAdManagersBillboardFocusState;
  getFocusTimeoutMs: PlatformTypesAdManagersBillboardGetFocusTimeoutMs;
  handleApplicationGainedFocus: PlatformTypesAdManagersBillboardHandleApplicationGainedFocus;
  handleApplicationLostFocus: PlatformTypesAdManagersBillboardHandleApplicationLostFocus;
  handleDiscard: PlatformTypesAdManagersBillboardHandleDiscard;
  handlePreview: PlatformTypesAdManagersBillboardHandlePreview;
  isPreviewServiceAd: PlatformTypesAdManagersBillboardIsPreviewServiceAd;
  listener: PlatformTypesAdManagersBillboardListener;
  logEvent: PlatformTypesAdManagersBillboardLogEvent;
  mapBillboardData: PlatformTypesAdManagersBillboardMapBillboardData;
  minimize: PlatformTypesAdManagersBillboardMinimize;
  onActivity: PlatformTypesAdManagersBillboardOnActivity;
  onAdMessage: PlatformTypesAdManagersBillboardOnAdMessage;
  onError: PlatformTypesAdManagersBillboardOnError;
  onFinish: PlatformTypesAdManagersBillboardOnFinish;
  onFocusChanged: PlatformTypesAdManagersBillboardOnFocusChanged;
  onRender: PlatformTypesAdManagersBillboardOnRender;
  resetState: PlatformTypesAdManagersBillboardResetState;
  subscription: PlatformTypesAdManagersBillboardSubscription;
  triggerAutoMinimizeIfPossible: PlatformTypesAdManagersBillboardTriggerAutoMinimizeIfPossible;
  viewedTimestamp: number;
}

export type PlatformTypesAdManagersBillboardActivitySubscription = () => unknown;

export type PlatformTypesAdManagersBillboardAdClick = () => unknown;

export interface PlatformTypesAdManagersBillboardBillboardApi {
  adsCoreConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  createSlot: PlatformTypesAdManagersBillboardBillboardApiCreateSlot;
  getSlotConfiguration: PlatformTypesAdManagersBillboardBillboardApiGetSlotConfiguration;
  patchTargeting: PlatformTypesAdManagersBillboardBillboardApiPatchTargeting;
  postEvent: PlatformTypesAdManagersBillboardBillboardApiPostEvent;
  postToSlot: PlatformTypesAdManagersBillboardBillboardApiPostToSlot;
  subscribeToSlotType: PlatformTypesAdManagersBillboardBillboardApiSubscribeToSlotType;
  triggerSlotClearAll: PlatformTypesAdManagersBillboardBillboardApiTriggerSlotClearAll;
}

export type PlatformTypesAdManagersBillboardBillboardApiCreateSlot = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersBillboardBillboardApiGetSlotConfiguration = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersBillboardBillboardApiPatchTargeting = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersBillboardBillboardApiPostEvent = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesAdManagersBillboardBillboardApiPostToSlot = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersBillboardBillboardApiSubscribeToSlotType = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersBillboardBillboardApiTriggerSlotClearAll = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersBillboardClearSlot = () => unknown;

export type PlatformTypesAdManagersBillboardDisable = () => unknown;

export type PlatformTypesAdManagersBillboardDisableWindow = () => unknown;

export type PlatformTypesAdManagersBillboardDisplayBillboard = () => unknown;

export type PlatformTypesAdManagersBillboardEnable = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardFinish = () => unknown;

export type PlatformTypesAdManagersBillboardFocusMinimize = () => unknown;

export interface PlatformTypesAdManagersBillboardFocusState {
  addFocusListener: PlatformTypesAdManagersVtoManagerFocusStateAddFocusListener;
  hasFocus: PlatformTypesAdManagersVtoManagerFocusStateHasFocus;
  listeners: Array<PlatformTypesAdManagersBillboard>;
  removeAllFocusListeners: PlatformTypesAdManagersVtoManagerFocusStateRemoveAllFocusListeners;
  removeFocusListener: PlatformTypesAdManagersVtoManagerFocusStateRemoveFocusListener;
}

export type PlatformTypesAdManagersBillboardGetFocusTimeoutMs = () => unknown;

export type PlatformTypesAdManagersBillboardHandleApplicationGainedFocus = () => unknown;

export type PlatformTypesAdManagersBillboardHandleApplicationLostFocus = () => unknown;

export type PlatformTypesAdManagersBillboardHandleDiscard = () => unknown;

export type PlatformTypesAdManagersBillboardHandlePreview = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardIsPreviewServiceAd = (arg0: any) => unknown;

export interface PlatformTypesAdManagersBillboardListener {
  canShow: PlatformTypesAdManagersBillboardListenerCanShow;
  create: PlatformTypesAdManagersBillboardListenerCreate;
  destroy: PlatformTypesAdManagersBillboardListenerDestroy;
  isActive: PlatformTypesAdManagersBillboardListenerIsActive;
  minimize: PlatformTypesAdManagersBillboardListenerMinimize;
}

export type PlatformTypesAdManagersBillboardListenerCanShow = () => unknown;

export type PlatformTypesAdManagersBillboardListenerCreate = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardListenerDestroy = () => unknown;

export type PlatformTypesAdManagersBillboardListenerIsActive = () => unknown;

export type PlatformTypesAdManagersBillboardListenerMinimize = () => unknown;

export type PlatformTypesAdManagersBillboardLogEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardMapBillboardData = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardMinimize = () => unknown;

export type PlatformTypesAdManagersBillboardOnActivity = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardOnAdMessage = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardOnError = () => unknown;

export type PlatformTypesAdManagersBillboardOnFinish = () => unknown;

export type PlatformTypesAdManagersBillboardOnFocusChanged = (arg0: any) => unknown;

export type PlatformTypesAdManagersBillboardOnRender = () => unknown;

export type PlatformTypesAdManagersBillboardResetState = () => unknown;

export interface PlatformTypesAdManagersBillboardSubscription {
  cancel: PlatformTypesAdManagersBillboardSubscriptionCancel;
}

export type PlatformTypesAdManagersBillboardSubscriptionCancel = () => unknown;

export type PlatformTypesAdManagersBillboardTriggerAutoMinimizeIfPossible = () => unknown;

export interface PlatformTypesAdManagersConfig {
  getAdsSlotConfig: PlatformTypesAdManagersConfigGetAdsSlotConfig;
}

export type PlatformTypesAdManagersConfigGetAdsSlotConfig = () => unknown;

export interface PlatformTypesAdManagersEmbeddedAd {
  adEventLogger: PlatformTypesAdManagersEmbeddedAdAdEventLogger;
  embeddedAdErrorLogger: PlatformTypesAdManagersEmbeddedAdEmbeddedAdErrorLogger;
  embeddedAdManager: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManager;
  embeddedNPVAdEventLogger: PlatformTypesAdManagersEmbeddedAdEmbeddedNPVAdEventLogger;
}

export interface PlatformTypesAdManagersEmbeddedAdAdEventLogger {
  appStartupId: string;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  fireTrackingEvent: PlatformTypesAdManagersEmbeddedAdAdEventLoggerFireTrackingEvent;
  log: PlatformTypesAdManagersEmbeddedAdAdEventLoggerLog;
}

export type PlatformTypesAdManagersEmbeddedAdAdEventLoggerFireTrackingEvent = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersEmbeddedAdAdEventLoggerLog = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesAdManagersEmbeddedAdEmbeddedAdErrorLogger {
  eventSender: PlatformTypesRegistryMapValueInstance8;
  log: PlatformTypesAdManagersEmbeddedAdEmbeddedAdErrorLoggerLog;
}

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdErrorLoggerLog = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesAdManagersEmbeddedAdEmbeddedAdManager {
  disable: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerDisable;
  embeddedAdsApi: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApi;
  enable: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEnable;
  fetchSlot: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerFetchSlot;
  subscription: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerSubscription;
  triggerSlot: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerTriggerSlot;
}

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerDisable = () => unknown;

export interface PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApi {
  adsCoreConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  createSlot: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiCreateSlot;
  fetchSlot: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiFetchSlot;
  getSlotSettings: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiGetSlotSettings;
  overrideSlotServerEndpoint: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiOverrideSlotServerEndpoint;
  subscribeToSlot: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiSubscribeToSlot;
  triggerSlot: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiTriggerSlot;
}

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiCreateSlot =
  () => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiFetchSlot =
  () => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiGetSlotSettings =
  () => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiOverrideSlotServerEndpoint =
  (arg0: any) => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiSubscribeToSlot = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEmbeddedAdsApiTriggerSlot =
  () => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerEnable = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerFetchSlot = () => unknown;

export interface PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerSubscription {
  cancel: PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerSubscriptionCancel;
}

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerSubscriptionCancel = () => unknown;

export type PlatformTypesAdManagersEmbeddedAdEmbeddedAdManagerTriggerSlot = () => unknown;

export interface PlatformTypesAdManagersEmbeddedAdEmbeddedNPVAdEventLogger {
  eventSender: PlatformTypesRegistryMapValueInstance8;
  log: PlatformTypesAdManagersEmbeddedAdEmbeddedNPVAdEventLoggerLog;
}

export type PlatformTypesAdManagersEmbeddedAdEmbeddedNPVAdEventLoggerLog = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesAdManagersHome {
  enableLegacyHptoContainerLoader: boolean;
  fetchHomeAd: PlatformTypesAdManagersHomeFetchHomeAd;
  logger: PlatformTypesAdManagersHomeLogger;
}

export type PlatformTypesAdManagersHomeFetchHomeAd = () => unknown;

export interface PlatformTypesAdManagersHomeLogger {
  appStartupId: string;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  fireTrackingEvent: PlatformTypesAdManagersHomeLoggerFireTrackingEvent;
  log: PlatformTypesAdManagersHomeLoggerLog;
}

export type PlatformTypesAdManagersHomeLoggerFireTrackingEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersHomeLoggerLog = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesAdManagersHpto {
  appStartupId: string;
  createTrackingList: PlatformTypesAdManagersHptoCreateTrackingList;
  createTrackingPixelImage: PlatformTypesAdManagersHptoCreateTrackingPixelImage;
  fetchCreative: PlatformTypesAdManagersHptoFetchCreative;
  fetchTemplate: PlatformTypesAdManagersHptoFetchTemplate;
  focusState: PlatformTypesAdManagersHptoFocusState;
  getNativeData: PlatformTypesAdManagersHptoGetNativeData;
  handleTrackingUrl: PlatformTypesAdManagersHptoHandleTrackingUrl;
  hptoApi: PlatformTypesAdManagersHptoHptoApi;
  log: PlatformTypesAdManagersHptoLog;
  logAdEventError: PlatformTypesAdManagersHptoLogAdEventError;
  logErrorEvent: PlatformTypesAdManagersHptoLogErrorEvent;
  logEvent: PlatformTypesAdManagersHptoLogEvent;
  logViewed: PlatformTypesAdManagersHptoLogViewed;
  mapData: PlatformTypesAdManagersHptoMapData;
  maybeModifyUrl: PlatformTypesAdManagersHptoMaybeModifyUrl;
  maybeTriggerRefresh: PlatformTypesAdManagersHptoMaybeTriggerRefresh;
  offlineObserver: PlatformTypesAdManagersHptoOfflineObserver;
  onFocusChanged: PlatformTypesAdManagersHptoOnFocusChanged;
  onRefresh: PlatformTypesAdManagersHptoOnRefresh;
  onVisibilityChanged: PlatformTypesAdManagersHptoOnVisibilityChanged;
  parseHptoMessageType: PlatformTypesAdManagersHptoParseHptoMessageType;
  refreshCallback: PlatformTypesAdManagersHptoRefreshCallback;
  subscribeToPreview: PlatformTypesAdManagersHptoSubscribeToPreview;
  timeOfLastViewUpdate: number;
  trackPixelClicked: PlatformTypesAdManagersHptoTrackPixelClicked;
  trackPixelViewed: PlatformTypesAdManagersHptoTrackPixelViewed;
  trackingPixelDiv: HTMLElement;
  viewDestroyed: PlatformTypesAdManagersHptoViewDestroyed;
  viewRendered: PlatformTypesAdManagersHptoViewRendered;
  visibilityObserver: PlatformTypesAdManagersHptoVisibilityObserver;
  visibilityState: string;
}

export type PlatformTypesAdManagersHptoCreateTrackingList = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoCreateTrackingPixelImage = (arg0: any, arg1: any) => unknown;

export type PlatformTypesAdManagersHptoFetchCreative = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoFetchTemplate = () => unknown;

export interface PlatformTypesAdManagersHptoFocusState {
  addFocusListener: PlatformTypesAdManagersVtoManagerFocusStateAddFocusListener;
  hasFocus: PlatformTypesAdManagersVtoManagerFocusStateHasFocus;
  listeners: Array<unknown>;
  removeAllFocusListeners: PlatformTypesAdManagersVtoManagerFocusStateRemoveAllFocusListeners;
  removeFocusListener: PlatformTypesAdManagersVtoManagerFocusStateRemoveFocusListener;
}

export type PlatformTypesAdManagersHptoGetNativeData = (arg0: any, arg1: any) => unknown;

export type PlatformTypesAdManagersHptoHandleTrackingUrl = (arg0: any) => unknown;

export interface PlatformTypesAdManagersHptoHptoApi {
  adsCoreConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  esperantoPreviewParser: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParser;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  getAlbum: PlatformTypesAdManagersHptoHptoApiGetAlbum;
  getAlgoPlaylistInfo: PlatformTypesAdManagersHptoHptoApiGetAlgoPlaylistInfo;
  getArtist: PlatformTypesAdManagersHptoHptoApiGetArtist;
  getEpisode: PlatformTypesAdManagersHptoHptoApiGetEpisode;
  getPlaylist: PlatformTypesAdManagersHptoHptoApiGetPlaylist;
  getShow: PlatformTypesAdManagersHptoHptoApiGetShow;
  getSlot: PlatformTypesAdManagersHptoHptoApiGetSlot;
  getTrack: PlatformTypesAdManagersHptoHptoApiGetTrack;
  logEvent: PlatformTypesAdManagersHptoHptoApiLogEvent;
  nativeHptoApi: PlatformTypesAdManagersHptoHptoApiNativeHptoApi;
  subscribeToPreview: PlatformTypesAdManagersHptoHptoApiSubscribeToPreview;
}

export interface PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParser {
  createInteractiveIframe: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserCreateInteractiveIframe;
  getKeyByValue: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserGetKeyByValue;
  handleNativeEl: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserHandleNativeEl;
  isPreviewServiceAd: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserIsPreviewServiceAd;
  parsePreview: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserParsePreview;
  renameImageBannerField: PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserRenameImageBannerField;
}

export type PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserCreateInteractiveIframe = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserGetKeyByValue = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserHandleNativeEl = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserIsPreviewServiceAd = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserParsePreview = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiEsperantoPreviewParserRenameImageBannerField = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetAlbum = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetAlgoPlaylistInfo = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetArtist = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetEpisode = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetPlaylist = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetShow = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetSlot = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiGetTrack = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiLogEvent = (arg0: any) => unknown;

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApi {
  endpoints: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpoints;
  getAlbum: PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetAlbum;
  getArtist: PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetArtist;
  getEpisode: PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetEpisode;
  getPlaylist: PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetPlaylist;
  getShow: PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetShow;
  getTrack: PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetTrack;
  imageSelection: PlatformTypesAdManagersHptoHptoApiNativeHptoApiImageSelection;
  mapDefaultData: PlatformTypesAdManagersHptoHptoApiNativeHptoApiMapDefaultData;
  mapEpisode: PlatformTypesAdManagersHptoHptoApiNativeHptoApiMapEpisode;
  mapTrack: PlatformTypesAdManagersHptoHptoApiNativeHptoApiMapTrack;
  spotifyTransport: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
}

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpoints {
  Album: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsAlbum;
  Artist: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsArtist;
  Playlist: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsPlaylist;
  Show: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShow;
  Track: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsTrack;
}

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsAlbum {
  __esModule: boolean;
  getAlbum: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsAlbumGetAlbum;
}

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsAlbumGetAlbum = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsArtist {
  __esModule: boolean;
  getArtist: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsArtistGetArtist;
}

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsArtistGetArtist = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsPlaylist {
  __esModule: boolean;
  getOnDemandPlaylists: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsPlaylistGetOnDemandPlaylists;
  getPlaylist: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsPlaylistGetPlaylist;
}

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsPlaylistGetOnDemandPlaylists = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsPlaylistGetPlaylist = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShow {
  __esModule: boolean;
  createCheckoutSession: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShowCreateCheckoutSession;
  getEpisode: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShowGetEpisode;
  getShow: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShowGetShow;
}

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShowCreateCheckoutSession = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShowGetEpisode = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsShowGetShow = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsTrack {
  __esModule: boolean;
  getTrack: PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsTrackGetTrack;
}

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiEndpointsTrackGetTrack = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetAlbum = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetArtist = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetEpisode = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetPlaylist = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetShow = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiGetTrack = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiImageSelection = () => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiMapDefaultData = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiMapEpisode = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiMapTrack = (arg0: any) => unknown;

export interface PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport {
  _RequestImplementation: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransportRequestImplementation;
  _accessToken: string;
  _globalRequestHeaders: Array<Array<string>>;
  _locale: string;
  _market: string;
  accessToken: string;
  build: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransportBuild;
  globalRequestHeaders: Array<Array<string>>;
  locale: string;
  market: string;
  pendingRequests: Set<string>;
  resetPendingRequests: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransportResetPendingRequests;
}

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransportBuild = () => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransportRequestImplementation = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransportResetPendingRequests =
  () => unknown;

export type PlatformTypesAdManagersHptoHptoApiSubscribeToPreview = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoLog = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoLogAdEventError = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoLogErrorEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoLogEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoLogViewed = () => unknown;

export type PlatformTypesAdManagersHptoMapData = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoMaybeModifyUrl = (arg0: any, arg1: any) => unknown;

export type PlatformTypesAdManagersHptoMaybeTriggerRefresh = () => unknown;

export interface PlatformTypesAdManagersHptoOfflineObserver {
  getOnlineStatus: PlatformTypesAdManagersHptoOfflineObserverGetOnlineStatus;
  isOnline: boolean;
}

export type PlatformTypesAdManagersHptoOfflineObserverGetOnlineStatus = () => unknown;

export type PlatformTypesAdManagersHptoOnFocusChanged = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoOnRefresh = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoOnVisibilityChanged = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoParseHptoMessageType = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoRefreshCallback = () => unknown;

export type PlatformTypesAdManagersHptoSubscribeToPreview = (arg0: any) => unknown;

export type PlatformTypesAdManagersHptoTrackPixelClicked = () => unknown;

export type PlatformTypesAdManagersHptoTrackPixelViewed = () => unknown;

export type PlatformTypesAdManagersHptoViewDestroyed = () => unknown;

export type PlatformTypesAdManagersHptoViewRendered = (arg0: any) => unknown;

export interface PlatformTypesAdManagersHptoVisibilityObserver {
  currentState: string;
  disconnect: PlatformTypesAdManagersHptoVisibilityObserverDisconnect;
  intersectionObserver: PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserver;
  observe: PlatformTypesAdManagersHptoVisibilityObserverObserve;
  onObservation: PlatformTypesAdManagersHptoVisibilityObserverOnObservation;
}

export type PlatformTypesAdManagersHptoVisibilityObserverDisconnect = () => unknown;

export interface PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserver {
  delay: number;
  disconnect: PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverDisconnect;
  observe: PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverObserve;
  root: null;
  rootMargin: string;
  scrollMargin: string;
  takeRecords: PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverTakeRecords;
  thresholds: Array<number>;
  trackVisibility: boolean;
  unobserve: PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverUnobserve;
}

export type PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverDisconnect =
  () => unknown;

export type PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverObserve = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverTakeRecords =
  () => unknown;

export type PlatformTypesAdManagersHptoVisibilityObserverIntersectionObserverUnobserve = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersHptoVisibilityObserverObserve = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersHptoVisibilityObserverOnObservation = (arg0: any) => unknown;

export interface PlatformTypesAdManagersLeaderboard {
  adPlaybackId: string;
  adToLeaderboard: PlatformTypesAdManagersLeaderboardAdToLeaderboard;
  appStartupId: string;
  cachedConfig: PlatformTypesAdManagersLeaderboardCachedConfig;
  clearCurrentAd: PlatformTypesAdManagersLeaderboardClearCurrentAd;
  currentAd: PlatformTypesAdManagersLeaderboardCurrentAd;
  disableLeaderboard: PlatformTypesAdManagersLeaderboardDisableLeaderboard;
  disableLeaderboardMessageHandler: PlatformTypesAdManagersLeaderboardDisableLeaderboardMessageHandler;
  domTarget: HTMLElement;
  enableLeaderboard: PlatformTypesAdManagersLeaderboardEnableLeaderboard;
  enableLeaderboardMessageHandler: PlatformTypesAdManagersLeaderboardEnableLeaderboardMessageHandler;
  enabled: boolean;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  fetchAndDisplayLeaderboard: PlatformTypesAdManagersLeaderboardFetchAndDisplayLeaderboard;
  fetching: boolean;
  focusState: PlatformTypesAdManagersLeaderboardFocusState;
  frameSrc: string;
  getCurrentAd: PlatformTypesAdManagersLeaderboardGetCurrentAd;
  handleBadLeaderboard: PlatformTypesAdManagersLeaderboardHandleBadLeaderboard;
  handleLeaderboardMessage: PlatformTypesAdManagersLeaderboardHandleLeaderboardMessage;
  history: PlatformTypesHistory;
  isCurrentAdSax: PlatformTypesAdManagersLeaderboardIsCurrentAdSax;
  isPreviewServiceAd: PlatformTypesAdManagersLeaderboardIsPreviewServiceAd;
  leaderboardApi: PlatformTypesAdManagersLeaderboardLeaderboardApi;
  leaderboardWrapper: HTMLElement;
  logLeaderboardEvent: PlatformTypesAdManagersLeaderboardLogLeaderboardEvent;
  offlineObserver: PlatformTypesAdManagersLeaderboardOfflineObserver;
  onAdSlotEvent: PlatformTypesAdManagersLeaderboardOnAdSlotEvent;
  onFocusChanged: PlatformTypesAdManagersLeaderboardOnFocusChanged;
  onNavigationChanged: PlatformTypesAdManagersLeaderboardOnNavigationChanged;
  refreshDecisioner: PlatformTypesAdManagersLeaderboardFocusStateListenersItem;
  refreshLeaderboard: PlatformTypesAdManagersLeaderboardRefreshLeaderboard;
  renderLeaderboard: PlatformTypesAdManagersLeaderboardRenderLeaderboard;
  requestConfig: PlatformTypesAdManagersLeaderboardRequestConfig;
  requestSlot: PlatformTypesAdManagersLeaderboardRequestSlot;
  setCurrentAd: PlatformTypesAdManagersLeaderboardSetCurrentAd;
  setLeaderboardElement: PlatformTypesAdManagersLeaderboardSetLeaderboardElement;
  subscription: PlatformTypesAdManagersLeaderboardSubscription;
  teardownCurrentAd: PlatformTypesAdManagersLeaderboardTeardownCurrentAd;
}

export type PlatformTypesAdManagersLeaderboardAdToLeaderboard = (arg0: any) => unknown;

export interface PlatformTypesAdManagersLeaderboardCachedConfig {
  displayTimeIntervalMs: number;
  timeInViewThresholdMs: number;
}

export type PlatformTypesAdManagersLeaderboardClearCurrentAd = () => unknown;

export interface PlatformTypesAdManagersLeaderboardCurrentAd {
  ad: PlatformTypesAdManagersLeaderboardCurrentAdAd;
  creativeId: null;
  lineItemId: null;
}

export interface PlatformTypesAdManagersLeaderboardCurrentAdAd {
  adId: string;
  audio: Array<unknown>;
  clickthroughUrl: string;
  companions: Array<unknown>;
  coverArt: Array<unknown>;
  display: Array<PlatformTypesAdManagersLeaderboardCurrentAdAdDisplayItem>;
  format: number;
  isDsaEligible: boolean;
  isDummy: boolean;
  metadata: PlatformTypesAdManagersLeaderboardCurrentAdAdMetadata;
  requestId: string;
  slot: string;
  trackingEvents: PlatformTypesAdManagersLeaderboardCurrentAdAdTrackingEvents;
  video: Array<unknown>;
}

export interface PlatformTypesAdManagersLeaderboardCurrentAdAdDisplayItem {
  audioFileId: undefined;
  bitrate: number;
  duration: bigint;
  height: number;
  imageFileId: undefined;
  mimeType: string;
  text: string;
  url: undefined;
  videoManifestId: undefined;
  width: number;
}

export interface PlatformTypesAdManagersLeaderboardCurrentAdAdMetadata {
  ad_system: string;
  cleanup_timeout_ms: string;
}

export type PlatformTypesAdManagersLeaderboardCurrentAdAdTrackingEvents = Record<string, unknown>;

export type PlatformTypesAdManagersLeaderboardDisableLeaderboard = () => unknown;

export type PlatformTypesAdManagersLeaderboardDisableLeaderboardMessageHandler = () => unknown;

export type PlatformTypesAdManagersLeaderboardEnableLeaderboard = () => unknown;

export type PlatformTypesAdManagersLeaderboardEnableLeaderboardMessageHandler = () => unknown;

export type PlatformTypesAdManagersLeaderboardFetchAndDisplayLeaderboard = () => unknown;

export interface PlatformTypesAdManagersLeaderboardFocusState {
  addFocusListener: PlatformTypesAdManagersVtoManagerFocusStateAddFocusListener;
  hasFocus: PlatformTypesAdManagersVtoManagerFocusStateHasFocus;
  listeners: Array<
    PlatformTypesAdManagersLeaderboard | PlatformTypesAdManagersLeaderboardFocusStateListenersItem
  >;
  removeAllFocusListeners: PlatformTypesAdManagersVtoManagerFocusStateRemoveAllFocusListeners;
  removeFocusListener: PlatformTypesAdManagersVtoManagerFocusStateRemoveFocusListener;
}

export interface PlatformTypesAdManagersLeaderboardFocusStateListenersItem {
  delegate: PlatformTypesAdManagersLeaderboard;
  focusState: PlatformTypesAdManagersLeaderboardFocusState;
  isPastViewThreshold: PlatformTypesAdManagersLeaderboardFocusStateListenersItemIsPastViewThreshold;
  lastOnlineStatus: boolean;
  notifyRefreshIfPossible: PlatformTypesAdManagersLeaderboardFocusStateListenersItemNotifyRefreshIfPossible;
  onFocusChanged: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnFocusChanged;
  onLeaderboardDisabled: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnLeaderboardDisabled;
  onLeaderboardEnabled: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnLeaderboardEnabled;
  onNavigationChanged: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnNavigationChanged;
  onViewLoaded: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnViewLoaded;
  onViewUnloaded: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnViewUnloaded;
  onlineStateChanged: PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnlineStateChanged;
  refreshTimeout: number;
  setRefreshDelegate: PlatformTypesAdManagersLeaderboardFocusStateListenersItemSetRefreshDelegate;
  startRefreshTimer: PlatformTypesAdManagersLeaderboardFocusStateListenersItemStartRefreshTimer;
  timeOfLastViewUpdate: number;
  triggerRefresh: PlatformTypesAdManagersLeaderboardFocusStateListenersItemTriggerRefresh;
  updateViewTimer: PlatformTypesAdManagersLeaderboardFocusStateListenersItemUpdateViewTimer;
  viewTimer: number;
}

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemIsPastViewThreshold =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemNotifyRefreshIfPossible =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnFocusChanged = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnLeaderboardDisabled =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnLeaderboardEnabled =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnlineStateChanged = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnNavigationChanged =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnViewLoaded = () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemOnViewUnloaded = () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemSetRefreshDelegate = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemStartRefreshTimer =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemTriggerRefresh = () => unknown;

export type PlatformTypesAdManagersLeaderboardFocusStateListenersItemUpdateViewTimer =
  () => unknown;

export type PlatformTypesAdManagersLeaderboardGetCurrentAd = () => unknown;

export type PlatformTypesAdManagersLeaderboardHandleBadLeaderboard = () => unknown;

export type PlatformTypesAdManagersLeaderboardHandleLeaderboardMessage = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardIsCurrentAdSax = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardIsPreviewServiceAd = (arg0: any) => unknown;

export interface PlatformTypesAdManagersLeaderboardLeaderboardApi {
  adsCoreConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  coerceDisplayTimeIntervalMs: PlatformTypesAdManagersLeaderboardLeaderboardApiCoerceDisplayTimeIntervalMs;
  createAndEnableSlot: PlatformTypesAdManagersLeaderboardLeaderboardApiCreateAndEnableSlot;
  getConfig: PlatformTypesAdManagersLeaderboardLeaderboardApiGetConfig;
  getSlot: PlatformTypesAdManagersLeaderboardLeaderboardApiGetSlot;
  logEvent: PlatformTypesAdManagersLeaderboardLeaderboardApiLogEvent;
  normalizeConfig: PlatformTypesAdManagersLeaderboardLeaderboardApiNormalizeConfig;
  subscribeToSlotType: PlatformTypesAdManagersLeaderboardLeaderboardApiSubscribeToSlotType;
}

export type PlatformTypesAdManagersLeaderboardLeaderboardApiCoerceDisplayTimeIntervalMs = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardLeaderboardApiCreateAndEnableSlot = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardLeaderboardApiGetConfig = () => unknown;

export type PlatformTypesAdManagersLeaderboardLeaderboardApiGetSlot = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardLeaderboardApiLogEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardLeaderboardApiNormalizeConfig = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardLeaderboardApiSubscribeToSlotType = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardLogLeaderboardEvent = (arg0: any) => unknown;

export interface PlatformTypesAdManagersLeaderboardOfflineObserver {
  getOnlineStatus: PlatformTypesAdManagersHptoOfflineObserverGetOnlineStatus;
  isOnline: boolean;
}

export type PlatformTypesAdManagersLeaderboardOnAdSlotEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardOnFocusChanged = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardOnNavigationChanged = () => unknown;

export type PlatformTypesAdManagersLeaderboardRefreshLeaderboard = () => unknown;

export type PlatformTypesAdManagersLeaderboardRenderLeaderboard = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesAdManagersLeaderboardRequestConfig = () => unknown;

export type PlatformTypesAdManagersLeaderboardRequestSlot = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardSetCurrentAd = (arg0: any) => unknown;

export type PlatformTypesAdManagersLeaderboardSetLeaderboardElement = (arg0: any) => unknown;

export interface PlatformTypesAdManagersLeaderboardSubscription {
  cancel: PlatformTypesAdManagersLeaderboardSubscriptionCancel;
}

export type PlatformTypesAdManagersLeaderboardSubscriptionCancel = () => unknown;

export type PlatformTypesAdManagersLeaderboardTeardownCurrentAd = () => unknown;

export interface PlatformTypesAdManagersSponsoredPlaylist {
  disable: PlatformTypesAdManagersSponsoredPlaylistDisable;
  enable: PlatformTypesAdManagersSponsoredPlaylistEnable;
  enabled: boolean;
  logEvent: PlatformTypesAdManagersSponsoredPlaylistLogEvent;
  requestSponsoredPlaylistAd: PlatformTypesAdManagersSponsoredPlaylistRequestSponsoredPlaylistAd;
  requestSponsoredPlaylists: PlatformTypesAdManagersSponsoredPlaylistRequestSponsoredPlaylists;
  sponsoredPlaylistApi: PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApi;
  subscription: PlatformTypesAdManagersSponsoredPlaylistSubscription;
}

export type PlatformTypesAdManagersSponsoredPlaylistDisable = () => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistEnable = (arg0: any) => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistLogEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistRequestSponsoredPlaylistAd = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistRequestSponsoredPlaylists = () => unknown;

export interface PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApi {
  adsCoreConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  getSponsoredUris: PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiGetSponsoredUris;
  getSponsorshipAd: PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiGetSponsorshipAd;
  logEvent: PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiLogEvent;
  subscribeToPreview: PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiSubscribeToPreview;
}

export type PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiGetSponsoredUris =
  () => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiGetSponsorshipAd = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiLogEvent = (
  arg0: any,
) => unknown;

export type PlatformTypesAdManagersSponsoredPlaylistSponsoredPlaylistApiSubscribeToPreview = (
  arg0: any,
) => unknown;

export interface PlatformTypesAdManagersSponsoredPlaylistSubscription {
  cancel: PlatformTypesAdManagersSponsoredPlaylistSubscriptionCancel;
}

export type PlatformTypesAdManagersSponsoredPlaylistSubscriptionCancel = () => unknown;

export interface PlatformTypesAdManagersSurvey {
  logger: PlatformTypesAdManagersSurveyLogger;
}

export interface PlatformTypesAdManagersSurveyLogger {
  eventSender: PlatformTypesRegistryMapValueInstance8;
  getAdData: PlatformTypesAdManagersSurveyLoggerGetAdData;
  inStreamApi: PlatformTypesAdManagersAudioInStreamApi;
  logAdError: PlatformTypesAdManagersSurveyLoggerLogAdError;
  logAdEvent: PlatformTypesAdManagersSurveyLoggerLogAdEvent;
  logSurveyAdEventWithAd: PlatformTypesAdManagersSurveyLoggerLogSurveyAdEventWithAd;
  logSurveyAdEventWithoutAd: PlatformTypesAdManagersSurveyLoggerLogSurveyAdEventWithoutAd;
}

export type PlatformTypesAdManagersSurveyLoggerGetAdData = () => unknown;

export type PlatformTypesAdManagersSurveyLoggerLogAdError = (arg0: any) => unknown;

export type PlatformTypesAdManagersSurveyLoggerLogAdEvent = (arg0: any) => unknown;

export type PlatformTypesAdManagersSurveyLoggerLogSurveyAdEventWithAd = (arg0: any) => unknown;

export type PlatformTypesAdManagersSurveyLoggerLogSurveyAdEventWithoutAd = (arg0: any) => unknown;

export interface PlatformTypesAdManagersVto {
  factories: Array<PlatformTypesAdManagersVtoFactoriesItem>;
  manager: PlatformTypesAdManagersVtoManager;
}

export type PlatformTypesAdManagersVtoFactoriesItem = (arg0: any) => unknown;

export interface PlatformTypesAdManagersVtoManager {
  active: boolean;
  disable: PlatformTypesAdManagersVtoManagerDisable;
  enable: PlatformTypesAdManagersVtoManagerEnable;
  enabled: boolean;
  fireImpressionOnStart: boolean;
  focusState: PlatformTypesAdManagersVtoManagerFocusState;
  getEnabled: PlatformTypesAdManagersVtoManagerGetEnabled;
  handleApplicationGainedFocus: PlatformTypesAdManagersVtoManagerHandleApplicationGainedFocus;
  handleApplicationLostFocus: PlatformTypesAdManagersVtoManagerHandleApplicationLostFocus;
  inStreamApi: PlatformTypesAdManagersAudioInStreamApi;
  listener: PlatformTypesAdManagersVtoManagerListener;
  log: PlatformTypesAdManagersVtoManagerLog;
  logEvent: PlatformTypesAdManagersVtoManagerLogEvent;
  onAdMessage: PlatformTypesAdManagersAudioInStreamApiOnAdMessageCallbacksItem;
  onCreated: PlatformTypesAdManagersVtoManagerOnCreated;
  onEnded: PlatformTypesAdManagersVtoManagerOnEnded;
  onFocusChanged: PlatformTypesAdManagersVtoManagerOnFocusChanged;
  onReady: PlatformTypesAdManagersVtoManagerOnReady;
  onRender: PlatformTypesAdManagersVtoManagerOnRender;
  onStarted: PlatformTypesAdManagersVtoManagerOnStarted;
  onStateUpdate: PlatformTypesAdManagersVtoManagerOnStateUpdate;
  parseInfo: PlatformTypesAdManagersVtoManagerParseInfo;
  resetState: PlatformTypesAdManagersVtoManagerResetState;
  subscription: PlatformTypesAdManagersAudioSubscription;
  videoTakeoverApi: PlatformTypesAdManagersVtoManagerVideoTakeoverApi;
}

export type PlatformTypesAdManagersVtoManagerDisable = () => unknown;

export type PlatformTypesAdManagersVtoManagerEnable = (arg0: any) => unknown;

export interface PlatformTypesAdManagersVtoManagerFocusState {
  addFocusListener: PlatformTypesAdManagersVtoManagerFocusStateAddFocusListener;
  hasFocus: PlatformTypesAdManagersVtoManagerFocusStateHasFocus;
  listeners: Array<PlatformTypesAdManagersVtoManager>;
  removeAllFocusListeners: PlatformTypesAdManagersVtoManagerFocusStateRemoveAllFocusListeners;
  removeFocusListener: PlatformTypesAdManagersVtoManagerFocusStateRemoveFocusListener;
}

export type PlatformTypesAdManagersVtoManagerFocusStateAddFocusListener = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerFocusStateHasFocus = () => unknown;

export type PlatformTypesAdManagersVtoManagerFocusStateRemoveAllFocusListeners = () => unknown;

export type PlatformTypesAdManagersVtoManagerFocusStateRemoveFocusListener = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerGetEnabled = () => unknown;

export type PlatformTypesAdManagersVtoManagerHandleApplicationGainedFocus = () => unknown;

export type PlatformTypesAdManagersVtoManagerHandleApplicationLostFocus = () => unknown;

export interface PlatformTypesAdManagersVtoManagerListener {
  onCreated: PlatformTypesAdManagersVtoManagerListenerOnCreated;
  onEnded: PlatformTypesAdManagersVtoManagerListenerOnEnded;
  onFirstReady: PlatformTypesAdManagersVtoManagerListenerOnFirstReady;
  onInfo: PlatformTypesAdManagersVtoManagerListenerOnInfo;
  onStarted: PlatformTypesAdManagersVtoManagerListenerOnStarted;
}

export type PlatformTypesAdManagersVtoManagerListenerOnCreated = () => unknown;

export type PlatformTypesAdManagersVtoManagerListenerOnEnded = () => unknown;

export type PlatformTypesAdManagersVtoManagerListenerOnFirstReady = () => unknown;

export type PlatformTypesAdManagersVtoManagerListenerOnInfo = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerListenerOnStarted = () => unknown;

export type PlatformTypesAdManagersVtoManagerLog = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesAdManagersVtoManagerLogEvent = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesAdManagersVtoManagerOnCreated = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerOnEnded = (arg0: any, arg1: any) => unknown;

export type PlatformTypesAdManagersVtoManagerOnFocusChanged = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerOnReady = () => unknown;

export type PlatformTypesAdManagersVtoManagerOnRender = () => unknown;

export type PlatformTypesAdManagersVtoManagerOnStarted = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerOnStateUpdate = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerParseInfo = (arg0: any) => unknown;

export type PlatformTypesAdManagersVtoManagerResetState = () => unknown;

export interface PlatformTypesAdManagersVtoManagerVideoTakeoverApi {
  esperantoConnector: PlatformTypesAdManagersAudioInStreamApiAdsCoreConnector;
  patchTargeting: PlatformTypesAdManagersVtoManagerVideoTakeoverApiPatchTargeting;
  postEvent: PlatformTypesAdManagersVtoManagerVideoTakeoverApiPostEvent;
}

export type PlatformTypesAdManagersVtoManagerVideoTakeoverApiPatchTargeting = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAdManagersVtoManagerVideoTakeoverApiPostEvent = (arg0: any) => unknown;

export interface PlatformTypesAudiobookCappingAPI {
  _events: PlatformTypesAudiobookCappingAPIEvents;
  _fetcher: PlatformTypesAudiobookCappingAPIFetcher;
  _status: null;
  getCappingStatus: PlatformTypesAudiobookCappingAPIGetCappingStatus;
  getEvents: PlatformTypesAudiobookCappingAPIGetEvents;
  onUpdateCapping: PlatformTypesAudiobookCappingAPIOnUpdateCapping;
}

export interface PlatformTypesAudiobookCappingAPIEvents {
  _emitter: PlatformTypesAudiobookCappingAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesAudiobookCappingAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesAudiobookCappingAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesAudiobookCappingAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesAudiobookCappingAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesAudiobookCappingAPIEventsEmitterMetaListeners {
  add: PlatformTypesAudiobookCappingAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesAudiobookCappingAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesAudiobookCappingAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesAudiobookCappingAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export interface PlatformTypesAudiobookCappingAPIFetcher {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _inFlightPromise: null;
  fetch: PlatformTypesAudiobookCappingAPIFetcherFetch;
}

export type PlatformTypesAudiobookCappingAPIFetcherFetch = () => unknown;

export type PlatformTypesAudiobookCappingAPIGetCappingStatus = () => unknown;

export type PlatformTypesAudiobookCappingAPIGetEvents = () => unknown;

export type PlatformTypesAudiobookCappingAPIOnUpdateCapping = (arg0: any) => unknown;

export interface PlatformTypesAudioOutputDevicesAPI {
  _audioObserver: PlatformTypesAudioOutputDevicesAPIAudioObserver;
  _events: PlatformTypesAudioOutputDevicesAPIEvents;
  devices: Array<PlatformTypesAudioOutputDevicesAPIDevicesItem>;
  getDefaultDevice: PlatformTypesAudioOutputDevicesAPIGetDefaultDevice;
  getDevices: PlatformTypesAudioOutputDevicesAPIGetDevices;
  getEvents: PlatformTypesAudioOutputDevicesAPIGetEvents;
}

export interface PlatformTypesAudioOutputDevicesAPIAudioObserver {
  getAudioOutputDevices: PlatformTypesAudioOutputDevicesAPIAudioObserverGetAudioOutputDevices;
  options: PlatformTypesAudioOutputDevicesAPIAudioObserverOptions;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesAudioOutputDevicesAPIAudioObserverGetAudioOutputDevices = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesAudioOutputDevicesAPIAudioObserverOptions = Record<string, unknown>;

export interface PlatformTypesAudioOutputDevicesAPIDevicesItem {
  fullName: string;
  id: string;
  isDefaultDevice: boolean;
  name: string;
  terminalType: string;
  transportType: string;
}

export interface PlatformTypesAudioOutputDevicesAPIEvents {
  _emitter: PlatformTypesAudioOutputDevicesAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesAudioOutputDevicesAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesAudioOutputDevicesAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesAudioOutputDevicesAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesAudioOutputDevicesAPIEventsEmitterListeners {
  deviceConnected: Array<
    | PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItem
    | PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItem2
  >;
}

export interface PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItem {
  listener: PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemListener;
  options: PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemOptions;
}

export interface PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItem2 {
  listener: PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemListener2;
  options: PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemOptions2;
}

export type PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemOptions =
  Record<string, unknown>;

export type PlatformTypesAudioOutputDevicesAPIEventsEmitterListenersDeviceConnectedItemOptions2 =
  Record<string, unknown>;

export interface PlatformTypesAudioOutputDevicesAPIEventsEmitterMetaListeners {
  add: PlatformTypesAudioOutputDevicesAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesAudioOutputDevicesAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesAudioOutputDevicesAPIEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesAudioOutputDevicesAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesAudioOutputDevicesAPIGetDefaultDevice = () => unknown;

export type PlatformTypesAudioOutputDevicesAPIGetDevices = () => unknown;

export type PlatformTypesAudioOutputDevicesAPIGetEvents = () => unknown;

export interface PlatformTypesBuddyFeedAPI {
  batchAPI: PlatformTypesBuddyFeedAPIBatchAPI;
  fetchFriendActivity: PlatformTypesBuddyFeedAPIFetchFriendActivity;
  fetchFriendActivityByUsername: PlatformTypesBuddyFeedAPIFetchFriendActivityByUsername;
  fetchFriendActivityWithSubscriptions: PlatformTypesBuddyFeedAPIFetchFriendActivityWithSubscriptions;
  getCapabilities: PlatformTypesBuddyFeedAPIGetCapabilities;
  presence2: PlatformTypesBuddyFeedAPIPresence2;
  presenceView: PlatformTypesBuddyFeedAPIPresenceView;
  subscribeToBuddyActivity: PlatformTypesBuddyFeedAPISubscribeToBuddyActivity;
}

export interface PlatformTypesBuddyFeedAPIBatchAPI {
  presence2: PlatformTypesBuddyFeedAPIBatchAPIPresence2;
  presenceView: PlatformTypesBuddyFeedAPIBatchAPIPresenceView;
  pubsub: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  subscribe: PlatformTypesBuddyFeedAPIBatchAPISubscribe;
  subscription: Set<unknown>;
  unsubscribe: PlatformTypesBuddyFeedAPIBatchAPIUnsubscribe;
}

export interface PlatformTypesBuddyFeedAPIBatchAPIPresence2 {
  builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  pubsub: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  subscribeToBuddyActivity: PlatformTypesBuddyFeedAPIPresence2SubscribeToBuddyActivity;
  unsubscribeFromBuddiesActivity: PlatformTypesBuddyFeedAPIPresence2UnsubscribeFromBuddiesActivity;
}

export interface PlatformTypesBuddyFeedAPIBatchAPIPresenceView {
  builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  getBuddyActivity: PlatformTypesBuddyFeedAPIPresenceViewGetBuddyActivity;
  getBuddyFeed: PlatformTypesBuddyFeedAPIPresenceViewGetBuddyFeed;
  getBuddyFeedWithSubscribing: PlatformTypesBuddyFeedAPIPresenceViewGetBuddyFeedWithSubscribing;
}

export type PlatformTypesBuddyFeedAPIBatchAPISubscribe = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIBatchAPIUnsubscribe = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIFetchFriendActivity = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIFetchFriendActivityByUsername = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIFetchFriendActivityWithSubscriptions = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIGetCapabilities = () => unknown;

export interface PlatformTypesBuddyFeedAPIPresence2 {
  builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  pubsub: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  subscribeToBuddyActivity: PlatformTypesBuddyFeedAPIPresence2SubscribeToBuddyActivity;
  unsubscribeFromBuddiesActivity: PlatformTypesBuddyFeedAPIPresence2UnsubscribeFromBuddiesActivity;
}

export interface PlatformTypesBuddyFeedAPIPresence2Pubsub {
  _connectionId: Promise<unknown>;
  _events: PlatformTypesBuddyFeedAPIPresence2PubsubEvents;
  _isDeveloperMode: boolean;
  _messages: Array<unknown>;
  _subscribeToConnectionId: PlatformTypesBuddyFeedAPIPresence2PubsubSubscribeToConnectionId;
  _subscribeToMessages: PlatformTypesBuddyFeedAPIPresence2PubsubSubscribeToMessages;
  _subscriptions: Map<
    number,
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue2
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue3
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue4
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue5
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue6
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue7
    | PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue8
  >;
  cancelSubscription: PlatformTypesBuddyFeedAPIPresence2PubsubCancelSubscription;
  createSubscription: PlatformTypesBuddyFeedAPIPresence2PubsubCreateSubscription;
  getConnectionId: PlatformTypesBuddyFeedAPIPresence2PubsubGetConnectionId;
  getEvents: PlatformTypesBuddyFeedAPIPresence2PubsubGetEvents;
  getMessages: PlatformTypesBuddyFeedAPIPresence2PubsubGetMessages;
  getSubscriptions: PlatformTypesBuddyFeedAPIPresence2PubsubGetSubscriptions;
  onConnectionId: PlatformTypesBuddyFeedAPIPresence2PubsubOnConnectionId;
  refreshSubscription: PlatformTypesBuddyFeedAPIPresence2PubsubRefreshSubscription;
  subscribe: PlatformTypesBuddyFeedAPIPresence2PubsubSubscribe;
}

export type PlatformTypesBuddyFeedAPIPresence2PubsubCancelSubscription = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubCreateSubscription = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesBuddyFeedAPIPresence2PubsubEvents {
  _emitter: PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterListeners;
  _metaListeners: PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterListeners = Record<
  string,
  unknown
>;

export interface PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterMetaListeners {
  add: PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterMetaListenersAdd;
  remove: PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterMetaListenersRemove;
}

export type PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesBuddyFeedAPIPresence2PubsubEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesBuddyFeedAPIPresence2PubsubGetConnectionId = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubGetEvents = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubGetMessages = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubGetSubscriptions = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubOnConnectionId = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubRefreshSubscription = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscribe = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscribeToConnectionId = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscribeToMessages = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue {
  connectionId: string;
  ident: string;
  isPrefix: boolean;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue2 {
  connectionId: string;
  ident: string;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage2;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue3 {
  connectionId: string;
  ident: string;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage3;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue4 {
  connectionId: string;
  ident: string;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage4;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue5 {
  connectionId: string;
  ident: string;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage5;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue6 {
  connectionId: string;
  ident: string;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage6;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue7 {
  connectionId: string;
  ident: string;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage7;
}

export interface PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValue8 {
  connectionId: string;
  ident: string;
  isPrefix: boolean;
  onCancel: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnCancel;
  onMessage: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage8;
  onSubscribe: PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnSubscribe;
}

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnCancel = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage2 = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage3 = () => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage4 = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage5 = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage6 = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage7 = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnMessage8 = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2PubsubSubscriptionsValueOnSubscribe = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2SubscribeToBuddyActivity = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesBuddyFeedAPIPresence2UnsubscribeFromBuddiesActivity = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesBuddyFeedAPIPresenceView {
  builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  getBuddyActivity: PlatformTypesBuddyFeedAPIPresenceViewGetBuddyActivity;
  getBuddyFeed: PlatformTypesBuddyFeedAPIPresenceViewGetBuddyFeed;
  getBuddyFeedWithSubscribing: PlatformTypesBuddyFeedAPIPresenceViewGetBuddyFeedWithSubscribing;
}

export type PlatformTypesBuddyFeedAPIPresenceViewGetBuddyActivity = (arg0: any) => unknown;

export type PlatformTypesBuddyFeedAPIPresenceViewGetBuddyFeed = () => unknown;

export type PlatformTypesBuddyFeedAPIPresenceViewGetBuddyFeedWithSubscribing = (
  arg0: any,
) => unknown;

export type PlatformTypesBuddyFeedAPISubscribeToBuddyActivity = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesClipboardAPI {
  _cosmos: PlatformTypesRegistryMapValueInstance;
  copy: PlatformTypesClipboardAPICopy;
  paste: PlatformTypesClipboardAPIPaste;
}

export type PlatformTypesClipboardAPICopy = (arg0: any) => unknown;

export type PlatformTypesClipboardAPIPaste = () => unknown;

export interface PlatformTypesCollectionPlatformAPI {
  _service: PlatformTypesCollectionPlatformAPIService;
  add: PlatformTypesCollectionPlatformAPIAdd;
  cacheBySet: PlatformTypesCollectionPlatformAPICacheBySet;
  contains: PlatformTypesCollectionPlatformAPIContains;
  containsSync: PlatformTypesCollectionPlatformAPIContainsSync;
  events: PlatformTypesCollectionPlatformAPIEvents;
  get: PlatformTypesCollectionPlatformAPIGet;
  getEvents: PlatformTypesCollectionPlatformAPIGetEvents;
  remove: PlatformTypesCollectionPlatformAPIRemove;
  subscribe: PlatformTypesCollectionPlatformAPISubscribe;
  subscribeContains: PlatformTypesCollectionPlatformAPISubscribeContains;
}

export type PlatformTypesCollectionPlatformAPIAdd = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesCollectionPlatformAPICacheBySet {
  artist: PlatformTypesCollectionPlatformAPICacheBySetArtist;
  artistban: PlatformTypesCollectionPlatformAPICacheBySetArtistban;
  author: PlatformTypesCollectionPlatformAPICacheBySetAuthor;
  ban: PlatformTypesCollectionPlatformAPICacheBySetBan;
  collection: PlatformTypesCollectionPlatformAPICacheBySetCollection;
  enhanced: PlatformTypesCollectionPlatformAPICacheBySetEnhanced;
  ignoreinrecs: PlatformTypesCollectionPlatformAPICacheBySetIgnoreinrecs;
  listenlater: PlatformTypesCollectionPlatformAPICacheBySetListenlater;
  markedasfinished: PlatformTypesCollectionPlatformAPICacheBySetMarkedasfinished;
  notinterested: PlatformTypesCollectionPlatformAPICacheBySetNotinterested;
  prerelease: PlatformTypesCollectionPlatformAPICacheBySetPrerelease;
  show: PlatformTypesCollectionPlatformAPICacheBySetShow;
  tags: PlatformTypesCollectionPlatformAPICacheBySetTags;
  ylpin: PlatformTypesCollectionPlatformAPICacheBySetYlpin;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetArtist {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetArtistban {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetAuthor {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetBan {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetCollection {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetEnhanced {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetIgnoreinrecs {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetListenlater {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetMarkedasfinished {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetNotinterested {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetPrerelease {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetShow {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetTags {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesCollectionPlatformAPICacheBySetYlpin {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export type PlatformTypesCollectionPlatformAPIContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIContainsSync = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesCollectionPlatformAPIEvents {
  _aggregatorByCollection2Set: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2Set;
  _cacheBySet: PlatformTypesCollectionPlatformAPICacheBySet;
  _containsCancelFunctionByCollection2Set: PlatformTypesCollectionPlatformAPIEventsContainsCancelFunctionByCollection2Set;
  _emitter: PlatformTypesCollectionPlatformAPIEventsEmitter;
  _subscribeContains: PlatformTypesCollectionPlatformAPIEventsSubscribeContains;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateItems: PlatformTypesCollectionPlatformAPIEventsEmitUpdateItems;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onBatchChanged: PlatformTypesCollectionPlatformAPIEventsOnBatchChanged;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2Set {
  artist: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtist;
  artistban: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistban;
  author: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthor;
  ban: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBan;
  collection: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollection;
  enhanced: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhanced;
  ignoreinrecs: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecs;
  listenlater: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlater;
  markedasfinished: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinished;
  notinterested: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterested;
  prerelease: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrerelease;
  show: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShow;
  tags: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTags;
  ylpin: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpin;
}

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtist {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistban {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistbanOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch =
  () => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2 =
  () => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate =
  () => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthor {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetAuthorOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBan {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetBanOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollection {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetCollectionOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhanced {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetEnhancedOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecs {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnBatch =
  (arg0: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnRemove =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetIgnoreinrecsOnUpdate =
  (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlater {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnRemove =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetListenlaterOnUpdate =
  (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinished {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnAdd =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnBatch =
  (arg0: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnRemove =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetMarkedasfinishedOnUpdate =
  (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterested {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnBatch =
  (arg0: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnRemove =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetNotinterestedOnUpdate =
  (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrerelease {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetPrereleaseOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShow {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetShowOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTags {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetTagsOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpin {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnAdd;
  _onBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnBatch;
  _onRemove: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnRemove;
  _onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnAdd = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnBatch = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnRemove = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetYlpinOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsContainsCancelFunctionByCollection2Set = Record<
  string,
  unknown
>;

export interface PlatformTypesCollectionPlatformAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesCollectionPlatformAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesCollectionPlatformAPIEventsEmitterListeners {
  added: Array<PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItem>;
  removed: Array<PlatformTypesCollectionPlatformAPIEventsEmitterListenersRemovedItem>;
}

export interface PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItem {
  listener: PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItemListener;
  options: PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItemOptions;
}

export type PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesCollectionPlatformAPIEventsEmitterListenersRemovedItem {
  listener: PlatformTypesCollectionPlatformAPIEventsEmitterListenersAddedItemListener;
  options: PlatformTypesCollectionPlatformAPIEventsEmitterListenersRemovedItemOptions;
}

export type PlatformTypesCollectionPlatformAPIEventsEmitterListenersRemovedItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesCollectionPlatformAPIEventsEmitterMetaListeners {
  add: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAdd {
  update_item: Array<PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAddUpdateItemItem>;
}

export interface PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAddUpdateItemItem {
  listener: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAddUpdateItemItemListener;
  options: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAddUpdateItemItemOptions;
}

export type PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAddUpdateItemItemListener =
  (arg0: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersAddUpdateItemItemOptions =
  Record<string, unknown>;

export interface PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemove {
  update_item: Array<PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemoveUpdateItemItem>;
}

export interface PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemoveUpdateItemItem {
  listener: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemoveUpdateItemItemListener;
  options: PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemoveUpdateItemItemOptions;
}

export type PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemoveUpdateItemItemListener =
  (arg0: any) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsEmitterMetaListenersRemoveUpdateItemItemOptions =
  Record<string, unknown>;

export type PlatformTypesCollectionPlatformAPIEventsEmitUpdateItems = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsOnBatchChanged = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIEventsSubscribeContains = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIGet = (arg0: any) => unknown;

export type PlatformTypesCollectionPlatformAPIGetEvents = () => unknown;

export type PlatformTypesCollectionPlatformAPIRemove = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesCollectionPlatformAPIService {
  add: PlatformTypesCollectionPlatformAPIServiceAdd;
  contains: PlatformTypesCollectionPlatformAPIServiceContains;
  get: PlatformTypesCollectionPlatformAPIServiceGet;
  options: PlatformTypesCollectionPlatformAPIServiceOptions;
  remove: PlatformTypesCollectionPlatformAPIServiceRemove;
  streamContains: PlatformTypesCollectionPlatformAPIServiceStreamContains;
  streamGet: PlatformTypesCollectionPlatformAPIServiceStreamGet;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesCollectionPlatformAPIServiceAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIServiceContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIServiceGet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIServiceOptions = Record<string, unknown>;

export type PlatformTypesCollectionPlatformAPIServiceRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPIServiceStreamContains = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCollectionPlatformAPIServiceStreamGet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPISubscribe = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCollectionPlatformAPISubscribeContains = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesConnectAPI {
  checkDeviceId: PlatformTypesConnectAPICheckDeviceId;
  connectServiceClient: PlatformTypesConnectAPIConnectServiceClient;
  createLoggingParams: PlatformTypesConnectAPICreateLoggingParams;
  events: PlatformTypesConnectAPIEvents;
  getCapabilities: PlatformTypesConnectAPIGetCapabilities;
  getEvents: PlatformTypesConnectAPIGetEvents;
  getState: PlatformTypesConnectAPIGetState;
  initiateLocalDiscovery: PlatformTypesConnectAPIInitiateLocalDiscovery;
  logout: PlatformTypesConnectAPILogout;
  mapIncarnationToLoginType: PlatformTypesConnectAPIMapIncarnationToLoginType;
  pullToLocal: PlatformTypesConnectAPIPullToLocal;
  setPreferredIncarnation: PlatformTypesConnectAPISetPreferredIncarnation;
  state: PlatformTypesConnectAPIState;
  transferPlayback: PlatformTypesConnectAPITransferPlayback;
  transferToRemote: PlatformTypesConnectAPITransferToRemote;
  updateListOfDevices: PlatformTypesConnectAPIUpdateListOfDevices;
}

export type PlatformTypesConnectAPICheckDeviceId = (arg0: any) => unknown;

export interface PlatformTypesConnectAPIConnectServiceClient {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesConnectAPIConnectServiceClientOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesConnectAPIConnectServiceClientOptions = Record<string, unknown>;

export type PlatformTypesConnectAPICreateLoggingParams = (arg0: any) => unknown;

export interface PlatformTypesConnectAPIEvents {
  _emitter: PlatformTypesConnectAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  connectServiceClient: PlatformTypesConnectAPIConnectServiceClient;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesConnectAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesConnectAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesConnectAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesConnectAPIEventsEmitterListeners {
  update: Array<PlatformTypesConnectAPIEventsEmitterListenersUpdateItem>;
}

export interface PlatformTypesConnectAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesConnectAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesConnectAPIEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesConnectAPIEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesConnectAPIEventsEmitterMetaListeners {
  add: PlatformTypesConnectAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesConnectAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesConnectAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesConnectAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesConnectAPIGetCapabilities = () => unknown;

export type PlatformTypesConnectAPIGetEvents = () => unknown;

export type PlatformTypesConnectAPIGetState = () => unknown;

export type PlatformTypesConnectAPIInitiateLocalDiscovery = () => unknown;

export type PlatformTypesConnectAPILogout = (arg0: any) => unknown;

export type PlatformTypesConnectAPIMapIncarnationToLoginType = (arg0: any) => unknown;

export type PlatformTypesConnectAPIPullToLocal = (arg0: any) => unknown;

export type PlatformTypesConnectAPISetPreferredIncarnation = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesConnectAPIState {
  activeDevice: PlatformTypesConnectAPIStateActiveDevice;
  connectingDevice: null;
  connectionStatus: string;
  devices: Array<PlatformTypesConnectAPIStateActiveDevice>;
}

export interface PlatformTypesConnectAPIStateActiveDevice {
  brandDisplayName: string;
  connectStateId: string;
  currentState: string;
  disabledReason: undefined;
  id: string;
  incarnation: PlatformTypesConnectAPIStateActiveDeviceIncarnation;
  isActive: boolean;
  isConnecting: boolean;
  isDisabled: boolean;
  isGroup: boolean;
  isLocal: boolean;
  isLocalNetwork: boolean;
  isWebApp: boolean;
  isZeroconf: boolean;
  license: string;
  losslessSupport: PlatformTypesConnectAPIStateActiveDeviceLosslessSupport;
  modelDisplayName: string;
  name: string;
  supportedMediaTypes: Set<string>;
  supportsDJNarration: boolean;
  supportsLogout: boolean;
  supportsRemoteSleepTimer: boolean;
  type: string;
  volume: number;
}

export interface PlatformTypesConnectAPIStateActiveDeviceIncarnation {
  available: Array<unknown>;
  preferred: undefined;
}

export interface PlatformTypesConnectAPIStateActiveDeviceLosslessSupport {
  deviceSupported: boolean;
  fullySupported: boolean;
  userEligible: boolean;
}

export type PlatformTypesConnectAPITransferPlayback = (arg0: any, arg1: any) => unknown;

export type PlatformTypesConnectAPITransferToRemote = (arg0: any, arg1: any) => unknown;

export type PlatformTypesConnectAPIUpdateListOfDevices = () => unknown;

export interface PlatformTypesConnectDeviceManagementAPI {
  checkDeviceId: PlatformTypesConnectDeviceManagementAPICheckDeviceId;
  connectServiceClient: PlatformTypesConnectDeviceManagementAPIConnectServiceClient;
  logout: PlatformTypesConnectDeviceManagementAPILogout;
  mapIncarnationToLoginType: PlatformTypesConnectDeviceManagementAPIMapIncarnationToLoginType;
  setPreferredIncarnation: PlatformTypesConnectDeviceManagementAPISetPreferredIncarnation;
}

export type PlatformTypesConnectDeviceManagementAPICheckDeviceId = (arg0: any) => unknown;

export interface PlatformTypesConnectDeviceManagementAPIConnectServiceClient {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesConnectDeviceManagementAPIConnectServiceClientOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesConnectDeviceManagementAPIConnectServiceClientOptions = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDeviceManagementAPILogout = (arg0: any) => unknown;

export type PlatformTypesConnectDeviceManagementAPIMapIncarnationToLoginType = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDeviceManagementAPISetPreferredIncarnation = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesConnectDevicesAPI {
  connectRestrictor: PlatformTypesConnectDevicesAPIConnectRestrictor;
  events: PlatformTypesConnectDevicesAPIEvents;
  getActiveDevice: PlatformTypesConnectDevicesAPIGetActiveDevice;
  getConnectState: PlatformTypesConnectDevicesAPIGetConnectState;
  getDevices: PlatformTypesConnectDevicesAPIGetDevices;
  getEvents: PlatformTypesConnectDevicesAPIGetEvents;
  state: PlatformTypesConnectDevicesAPIState;
}

export interface PlatformTypesConnectDevicesAPIConnectRestrictor {
  connectRestrictions: PlatformTypesConnectRestrictionsAPI;
  updateRestrictedListOfDevices: PlatformTypesConnectDevicesAPIConnectRestrictorUpdateRestrictedListOfDevices;
}

export type PlatformTypesConnectDevicesAPIConnectRestrictorUpdateRestrictedListOfDevices = (
  arg0: any,
) => unknown;

export interface PlatformTypesConnectDevicesAPIEvents {
  _emitter: PlatformTypesConnectDevicesAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  connectServiceClient: PlatformTypesConnectDevicesAPIEventsConnectServiceClient;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesConnectDevicesAPIEventsConnectServiceClient {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesConnectDevicesAPIEventsConnectServiceClientOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesConnectDevicesAPIEventsConnectServiceClientOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesConnectDevicesAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesConnectDevicesAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesConnectDevicesAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListeners {
  update: Array<
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem10
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem2
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem3
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem4
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem5
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem6
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem7
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem8
    | PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem9
  >;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem10 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener10;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions10;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem2 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener2;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions2;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem3 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener3;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions3;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem4 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener4;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions4;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem5 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener5;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions5;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem6 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener6;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions6;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem7 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener7;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions7;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem8 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener8;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions8;
}

export interface PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItem9 {
  listener: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener9;
  options: PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions9;
}

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener10 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener3 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener4 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener5 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener6 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener7 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener8 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemListener9 = (
  arg0: any,
) => unknown;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions10 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions2 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions3 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions4 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions5 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions6 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions7 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions8 = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIEventsEmitterListenersUpdateItemOptions9 = Record<
  string,
  unknown
>;

export interface PlatformTypesConnectDevicesAPIEventsEmitterMetaListeners {
  add: PlatformTypesConnectDevicesAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesConnectDevicesAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesConnectDevicesAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesConnectDevicesAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesConnectDevicesAPIGetActiveDevice = () => unknown;

export type PlatformTypesConnectDevicesAPIGetConnectState = () => unknown;

export type PlatformTypesConnectDevicesAPIGetDevices = () => unknown;

export type PlatformTypesConnectDevicesAPIGetEvents = () => unknown;

export interface PlatformTypesConnectDevicesAPIState {
  activeDevice: PlatformTypesConnectDevicesAPIStateActiveDevice;
  connectingDevice: null;
  connectionStatus: string;
  devices: Array<PlatformTypesConnectDevicesAPIStateActiveDevice>;
}

export interface PlatformTypesConnectDevicesAPIStateActiveDevice {
  brandDisplayName: string;
  connectStateId: string;
  currentState: string;
  disabledReason: undefined;
  id: string;
  incarnation: PlatformTypesConnectDevicesAPIStateActiveDeviceIncarnation;
  isActive: boolean;
  isConnecting: boolean;
  isDisabled: boolean;
  isGroup: boolean;
  isLocal: boolean;
  isLocalNetwork: boolean;
  isWebApp: boolean;
  isZeroconf: boolean;
  license: string;
  losslessSupport: PlatformTypesConnectDevicesAPIStateActiveDeviceLosslessSupport;
  modelDisplayName: string;
  name: string;
  supportedMediaTypes: Set<string>;
  supportsDJNarration: boolean;
  supportsLogout: boolean;
  supportsRemoteSleepTimer: boolean;
  type: string;
  volume: number;
}

export interface PlatformTypesConnectDevicesAPIStateActiveDeviceIncarnation {
  available: Array<unknown>;
  preferred: undefined;
}

export interface PlatformTypesConnectDevicesAPIStateActiveDeviceLosslessSupport {
  deviceSupported: boolean;
  fullySupported: boolean;
  userEligible: boolean;
}

export interface PlatformTypesConnectDiscoveryAPI {
  connectServiceClient: PlatformTypesConnectDiscoveryAPIConnectServiceClient;
  startActiveDiscovery: PlatformTypesConnectDiscoveryAPIStartActiveDiscovery;
}

export interface PlatformTypesConnectDiscoveryAPIConnectServiceClient {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesConnectDiscoveryAPIConnectServiceClientOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesConnectDiscoveryAPIConnectServiceClientOptions = Record<string, unknown>;

export type PlatformTypesConnectDiscoveryAPIStartActiveDiscovery = () => unknown;

export interface PlatformTypesConnectRestrictionsAPI {
  getRestrictionState: PlatformTypesConnectRestrictionsAPIGetRestrictionState;
  localStorageAPI: PlatformTypesEqualizerAPILocalStorageAPI;
  restrict: PlatformTypesConnectRestrictionsAPIRestrict;
}

export type PlatformTypesConnectRestrictionsAPIGetRestrictionState = () => unknown;

export type PlatformTypesConnectRestrictionsAPIRestrict = (arg0: any) => unknown;

export interface PlatformTypesConnectTransferAPI {
  connectServiceClient: PlatformTypesConnectTransferAPIConnectServiceClient;
  createLoggingParams: PlatformTypesConnectTransferAPICreateLoggingParams;
  pullToLocalDevice: PlatformTypesConnectTransferAPIPullToLocalDevice;
  transferPlayback: PlatformTypesConnectTransferAPITransferPlayback;
  transferToRemote: PlatformTypesConnectTransferAPITransferToRemote;
}

export interface PlatformTypesConnectTransferAPIConnectServiceClient {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesConnectTransferAPIConnectServiceClientOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesConnectTransferAPIConnectServiceClientOptions = Record<string, unknown>;

export type PlatformTypesConnectTransferAPICreateLoggingParams = (arg0: any) => unknown;

export type PlatformTypesConnectTransferAPIPullToLocalDevice = (arg0: any) => unknown;

export type PlatformTypesConnectTransferAPITransferPlayback = (arg0: any, arg1: any) => unknown;

export type PlatformTypesConnectTransferAPITransferToRemote = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesContextualShuffleAPI {
  _events: PlatformTypesContextualShuffleAPIEvents;
  _indexedDbAPI: PlatformTypesContextualShuffleAPIIndexedDbAPI;
  getContextualShuffleMode: PlatformTypesContextualShuffleAPIGetContextualShuffleMode;
  getEvents: PlatformTypesContextualShuffleAPIGetEvents;
  getIsSmartShuffleSettingEnabled: PlatformTypesContextualShuffleAPIGetIsSmartShuffleSettingEnabled;
  setContextualShuffleMode: PlatformTypesContextualShuffleAPISetContextualShuffleMode;
}

export interface PlatformTypesContextualShuffleAPIEvents {
  _emitter: PlatformTypesContextualShuffleAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateContextualShuffleModeCompleteSync: PlatformTypesContextualShuffleAPIEventsEmitUpdateContextualShuffleModeCompleteSync;
  emitUpdateContextualShuffleModeErrorSync: PlatformTypesContextualShuffleAPIEventsEmitUpdateContextualShuffleModeErrorSync;
  emitUpdateContextualShuffleModeSync: PlatformTypesContextualShuffleAPIEventsEmitUpdateContextualShuffleModeSync;
  emitUpdateSetting: PlatformTypesContextualShuffleAPIEventsEmitUpdateSetting;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesContextualShuffleAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesContextualShuffleAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesContextualShuffleAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesContextualShuffleAPIEventsEmitterListeners {
  update_complete: Array<PlatformTypesContextualShuffleAPIEventsEmitterListenersUpdateCompleteItem>;
}

export interface PlatformTypesContextualShuffleAPIEventsEmitterListenersUpdateCompleteItem {
  listener: PlatformTypesContextualShuffleAPIEventsEmitterListenersUpdateCompleteItemListener;
  options: PlatformTypesContextualShuffleAPIEventsEmitterListenersUpdateCompleteItemOptions;
}

export type PlatformTypesContextualShuffleAPIEventsEmitterListenersUpdateCompleteItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIEventsEmitterListenersUpdateCompleteItemOptions =
  Record<string, unknown>;

export interface PlatformTypesContextualShuffleAPIEventsEmitterMetaListeners {
  add: PlatformTypesContextualShuffleAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesContextualShuffleAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesContextualShuffleAPIEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesContextualShuffleAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesContextualShuffleAPIEventsEmitUpdateContextualShuffleModeCompleteSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIEventsEmitUpdateContextualShuffleModeErrorSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIEventsEmitUpdateContextualShuffleModeSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIEventsEmitUpdateSetting = () => unknown;

export type PlatformTypesContextualShuffleAPIGetContextualShuffleMode = (arg0: any) => unknown;

export type PlatformTypesContextualShuffleAPIGetEvents = () => unknown;

export type PlatformTypesContextualShuffleAPIGetIsSmartShuffleSettingEnabled = () => unknown;

export interface PlatformTypesContextualShuffleAPIIndexedDbAPI {
  _channel: PlatformTypesContextualShuffleAPIIndexedDbAPIChannel;
  _events: PlatformTypesContextualShuffleAPIIndexedDbAPIEvents;
  deleteItem: PlatformTypesContextualShuffleAPIIndexedDbAPIDeleteItem;
  getEvents: PlatformTypesContextualShuffleAPIIndexedDbAPIGetEvents;
  getItem: PlatformTypesContextualShuffleAPIIndexedDbAPIGetItem;
  name: string;
  openDb: PlatformTypesContextualShuffleAPIIndexedDbAPIOpenDb;
  setItem: PlatformTypesContextualShuffleAPIIndexedDbAPISetItem;
  version: number;
}

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIChannel {
  addEventListener: PlatformTypesContextualShuffleAPIIndexedDbAPIChannelAddEventListener;
  close: PlatformTypesContextualShuffleAPIIndexedDbAPIChannelClose;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  name: string;
  onmessage: null;
  onmessageerror: null;
  postMessage: PlatformTypesContextualShuffleAPIIndexedDbAPIChannelPostMessage;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
}

export type PlatformTypesContextualShuffleAPIIndexedDbAPIChannelAddEventListener = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIChannelClose = () => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIChannelPostMessage = (
  arg0: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIDeleteItem = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIEvents {
  _emitter: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListeners {
  delete: Array<PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersDeleteItem>;
  update: Array<PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersUpdateItem>;
}

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersDeleteItem {
  listener: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersDeleteItemListener;
  options: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersDeleteItemOptions;
}

export type PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersDeleteItemListener =
  (arg0: any) => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersDeleteItemOptions =
  Record<string, unknown>;

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersUpdateItemListener =
  (arg0: any) => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterListenersUpdateItemOptions =
  Record<string, unknown>;

export interface PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterMetaListeners {
  add: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIGetEvents = () => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIGetItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPIOpenDb = () => unknown;

export type PlatformTypesContextualShuffleAPIIndexedDbAPISetItem = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesContextualShuffleAPISetContextualShuffleMode = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesControlMessageAPI {
  _cosmos: PlatformTypesRegistryMapValueInstance;
  _partnerApiClient: PlatformTypesControlMessageAPIPartnerApiClient;
  _updateUiClient: PlatformTypesControlMessageAPIUpdateUiClient;
  disableMenuItem: PlatformTypesControlMessageAPIDisableMenuItem;
  enableMenuItem: PlatformTypesControlMessageAPIEnableMenuItem;
  getEvents: PlatformTypesControlMessageAPIGetEvents;
  notifyReadyStateReached: PlatformTypesControlMessageAPINotifyReadyStateReached;
  notifyUsableStateReached: PlatformTypesControlMessageAPINotifyUsableStateReached;
  notifyViewLoaded: PlatformTypesControlMessageAPINotifyViewLoaded;
  setPLEPorts: PlatformTypesControlMessageAPISetPLEPorts;
  setTitlebarHeight: PlatformTypesControlMessageAPISetTitlebarHeight;
}

export type PlatformTypesControlMessageAPIDisableMenuItem = (arg0: any) => unknown;

export type PlatformTypesControlMessageAPIEnableMenuItem = (arg0: any) => unknown;

export type PlatformTypesControlMessageAPIGetEvents = () => unknown;

export type PlatformTypesControlMessageAPINotifyReadyStateReached = () => unknown;

export type PlatformTypesControlMessageAPINotifyUsableStateReached = (arg0: any) => unknown;

export type PlatformTypesControlMessageAPINotifyViewLoaded = (arg0: any) => unknown;

export interface PlatformTypesControlMessageAPIPartnerApiClient {
  enablePartnerApiEndpoint: PlatformTypesControlMessageAPIPartnerApiClientEnablePartnerApiEndpoint;
  options: PlatformTypesControlMessageAPIPartnerApiClientOptions;
  setPartnerApiTcpPorts: PlatformTypesControlMessageAPIPartnerApiClientSetPartnerApiTcpPorts;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesControlMessageAPIPartnerApiClientEnablePartnerApiEndpoint = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesControlMessageAPIPartnerApiClientOptions = Record<string, unknown>;

export type PlatformTypesControlMessageAPIPartnerApiClientSetPartnerApiTcpPorts = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesControlMessageAPISetPLEPorts = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesControlMessageAPISetTitlebarHeight = (arg0: any) => unknown;

export interface PlatformTypesControlMessageAPIUpdateUiClient {
  options: PlatformTypesControlMessageAPIUpdateUiClientOptions;
  setButtonsVisibility: PlatformTypesNativeAPIUpdateUiClientSetButtonsVisibility;
  transport: PlatformTypesRegistryMapValueInstance2;
  updateMenuState: PlatformTypesNativeAPIUpdateUiClientUpdateMenuState;
  updateTitlebarHeight: PlatformTypesNativeAPIUpdateUiClientUpdateTitlebarHeight;
}

export type PlatformTypesControlMessageAPIUpdateUiClientOptions = Record<string, unknown>;

export interface PlatformTypesCurationAPI {
  _libraryAPI: PlatformTypesLibraryAPI;
  _playlistAPI: PlatformTypesPlaylistAPI;
  _your_library: PlatformTypesCurationAPIYourLibrary;
  cache: PlatformTypesCurationAPICache;
  curateDefault: PlatformTypesCurationAPICurateDefault;
  curateItems: PlatformTypesCurationAPICurateItems;
  events: PlatformTypesCurationAPIEvents;
  getAvailableSortOrders: PlatformTypesCurationAPIGetAvailableSortOrders;
  getCapabilities: PlatformTypesCurationAPIGetCapabilities;
  getCurationContexts: PlatformTypesCurationAPIGetCurationContexts;
  getDefaultCurationContextUri: PlatformTypesCurationAPIGetDefaultCurationContextUri;
  getEvents: PlatformTypesCurationAPIGetEvents;
  isCurated: PlatformTypesCurationAPIIsCurated;
  isCuratedSync: PlatformTypesCurationAPIIsCuratedSync;
}

export interface PlatformTypesCurationAPICache {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export type PlatformTypesCurationAPICurateDefault = (arg0: any) => unknown;

export type PlatformTypesCurationAPICurateItems = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesCurationAPIEvents {
  _emitter: PlatformTypesCurationAPIEventsEmitter;
  _your_library: PlatformTypesCurationAPIYourLibrary;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  aggregator: PlatformTypesCurationAPIEventsAggregator;
  cache: PlatformTypesCurationAPICache;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitOperationComplete: PlatformTypesCurationAPIEventsEmitOperationComplete;
  emitOperationSync: PlatformTypesCurationAPIEventsEmitOperationSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateCuratedItems: PlatformTypesCurationAPIEventsEmitUpdateCuratedItems;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onCuratedBatchChanged: PlatformTypesCurationAPIEventsOnCuratedBatchChanged;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
  streamIsCuratedCancellable: null;
}

export interface PlatformTypesCurationAPIEventsAggregator {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesCurationAPIEventsAggregatorOnAdd;
  _onBatch: PlatformTypesCurationAPIEventsAggregatorOnBatch;
  _onRemove: PlatformTypesCurationAPIEventsAggregatorOnRemove;
  _onUpdate: PlatformTypesCurationAPIEventsAggregatorOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesCurationAPIEventsAggregatorOnAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCurationAPIEventsAggregatorOnBatch = (arg0: any) => unknown;

export type PlatformTypesCurationAPIEventsAggregatorOnRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesCurationAPIEventsAggregatorOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesCurationAPIEventsEmitOperationComplete = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesCurationAPIEventsEmitOperationSync = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export interface PlatformTypesCurationAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesCurationAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesCurationAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesCurationAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesCurationAPIEventsEmitterMetaListeners {
  add: PlatformTypesCurationAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesCurationAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesCurationAPIEventsEmitterMetaListenersAdd {
  update_curated_item: Array<PlatformTypesCurationAPIEventsEmitterMetaListenersAddUpdateCuratedItemItem>;
}

export interface PlatformTypesCurationAPIEventsEmitterMetaListenersAddUpdateCuratedItemItem {
  listener: PlatformTypesCurationAPIEventsEmitterMetaListenersAddUpdateCuratedItemItemListener;
  options: PlatformTypesCurationAPIEventsEmitterMetaListenersAddUpdateCuratedItemItemOptions;
}

export type PlatformTypesCurationAPIEventsEmitterMetaListenersAddUpdateCuratedItemItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesCurationAPIEventsEmitterMetaListenersAddUpdateCuratedItemItemOptions =
  Record<string, unknown>;

export interface PlatformTypesCurationAPIEventsEmitterMetaListenersRemove {
  update_curated_item: Array<PlatformTypesCurationAPIEventsEmitterMetaListenersRemoveUpdateCuratedItemItem>;
}

export interface PlatformTypesCurationAPIEventsEmitterMetaListenersRemoveUpdateCuratedItemItem {
  listener: PlatformTypesCurationAPIEventsEmitterMetaListenersRemoveUpdateCuratedItemItemListener;
  options: PlatformTypesCurationAPIEventsEmitterMetaListenersRemoveUpdateCuratedItemItemOptions;
}

export type PlatformTypesCurationAPIEventsEmitterMetaListenersRemoveUpdateCuratedItemItemListener =
  (arg0: any) => unknown;

export type PlatformTypesCurationAPIEventsEmitterMetaListenersRemoveUpdateCuratedItemItemOptions =
  Record<string, unknown>;

export type PlatformTypesCurationAPIEventsEmitUpdateCuratedItems = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesCurationAPIEventsOnCuratedBatchChanged = (arg0: any) => unknown;

export type PlatformTypesCurationAPIGetAvailableSortOrders = () => unknown;

export type PlatformTypesCurationAPIGetCapabilities = () => unknown;

export type PlatformTypesCurationAPIGetCurationContexts = (arg0: any) => unknown;

export type PlatformTypesCurationAPIGetDefaultCurationContextUri = (arg0: any) => unknown;

export type PlatformTypesCurationAPIGetEvents = () => unknown;

export type PlatformTypesCurationAPIIsCurated = () => unknown;

export type PlatformTypesCurationAPIIsCuratedSync = (arg0: any) => unknown;

export interface PlatformTypesCurationAPIYourLibrary {
  all: PlatformTypesOfflineAPIYourLibraryAll;
  contains: PlatformTypesOfflineAPIYourLibraryContains;
  decorate: PlatformTypesOfflineAPIYourLibraryDecorate;
  getKeys: PlatformTypesOfflineAPIYourLibraryGetKeys;
  isCurated: PlatformTypesOfflineAPIYourLibraryIsCurated;
  movePin: PlatformTypesOfflineAPIYourLibraryMovePin;
  options: PlatformTypesCurationAPIYourLibraryOptions;
  pin: PlatformTypesOfflineAPIYourLibraryPin;
  streamAll: PlatformTypesOfflineAPIYourLibraryStreamAll;
  streamContains: PlatformTypesOfflineAPIYourLibraryStreamContains;
  streamDecorate: PlatformTypesOfflineAPIYourLibraryStreamDecorate;
  streamIsCurated: PlatformTypesOfflineAPIYourLibraryStreamIsCurated;
  transport: PlatformTypesRegistryMapValueInstance2;
  unPin: PlatformTypesOfflineAPIYourLibraryUnPin;
}

export type PlatformTypesCurationAPIYourLibraryOptions = Record<string, unknown>;

export interface PlatformTypesDesktopLogsAPI {
  _service: PlatformTypesDesktopLogsAPIService;
  getLogFolder: PlatformTypesDesktopLogsAPIGetLogFolder;
  openFolder: PlatformTypesDesktopLogsAPIOpenFolder;
}

export type PlatformTypesDesktopLogsAPIGetLogFolder = () => unknown;

export type PlatformTypesDesktopLogsAPIOpenFolder = (arg0: any) => unknown;

export interface PlatformTypesDesktopLogsAPIService {
  copyLogsToTempFolder: PlatformTypesDesktopLogsAPIServiceCopyLogsToTempFolder;
  openFolder: PlatformTypesDesktopLogsAPIServiceOpenFolder;
  options: PlatformTypesDesktopLogsAPIServiceOptions;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesDesktopLogsAPIServiceCopyLogsToTempFolder = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesDesktopLogsAPIServiceOpenFolder = (arg0: any, arg1: any) => unknown;

export type PlatformTypesDesktopLogsAPIServiceOptions = Record<string, unknown>;

export interface PlatformTypesEqualizerAPI {
  filters: Array<
    | PlatformTypesEqualizerAPIFiltersItem
    | PlatformTypesEqualizerAPIFiltersItem2
    | PlatformTypesEqualizerAPIFiltersItem3
    | PlatformTypesEqualizerAPIFiltersItem4
    | PlatformTypesEqualizerAPIFiltersItem5
    | PlatformTypesEqualizerAPIFiltersItem6
  >;
  getFilters: PlatformTypesEqualizerAPIGetFilters;
  getPreset: PlatformTypesEqualizerAPIGetPreset;
  isSupported: PlatformTypesEqualizerAPIIsSupported;
  localStorageAPI: PlatformTypesEqualizerAPILocalStorageAPI;
  prefs: PlatformTypesEqualizerAPIPrefs;
  setEnabledState: PlatformTypesEqualizerAPISetEnabledState;
  setFilterGain: PlatformTypesEqualizerAPISetFilterGain;
  setPreset: PlatformTypesEqualizerAPISetPreset;
  subscribeToEnabledState: PlatformTypesEqualizerAPISubscribeToEnabledState;
  subscribeToPresetChange: PlatformTypesEqualizerAPISubscribeToPresetChange;
}

export interface PlatformTypesEqualizerAPIFiltersItem {
  frequency: number;
  gain: number;
  key: string;
  type: string;
}

export interface PlatformTypesEqualizerAPIFiltersItem2 {
  frequency: number;
  gain: number;
  key: string;
  type: string;
}

export interface PlatformTypesEqualizerAPIFiltersItem3 {
  frequency: number;
  gain: number;
  key: string;
  type: string;
}

export interface PlatformTypesEqualizerAPIFiltersItem4 {
  frequency: number;
  gain: number;
  key: string;
  type: string;
}

export interface PlatformTypesEqualizerAPIFiltersItem5 {
  frequency: number;
  gain: number;
  key: string;
  type: string;
}

export interface PlatformTypesEqualizerAPIFiltersItem6 {
  frequency: number;
  gain: number;
  key: string;
  type: string;
}

export type PlatformTypesEqualizerAPIGetFilters = () => unknown;

export type PlatformTypesEqualizerAPIGetPreset = () => unknown;

export type PlatformTypesEqualizerAPIIsSupported = () => unknown;

export interface PlatformTypesEqualizerAPILocalStorageAPI {
  _events: PlatformTypesEqualizerAPILocalStorageAPIEvents;
  auto_cleanup: boolean;
  clearItem: PlatformTypesEqualizerAPILocalStorageAPIClearItem;
  createNamespacedKey: PlatformTypesEqualizerAPILocalStorageAPICreateNamespacedKey;
  getEvents: PlatformTypesEqualizerAPILocalStorageAPIGetEvents;
  getItem: PlatformTypesEqualizerAPILocalStorageAPIGetItem;
  items: PlatformTypesEqualizerAPILocalStorageAPIItems;
  listenToStorageEvents: PlatformTypesEqualizerAPILocalStorageAPIListenToStorageEvents;
  max_retries: number;
  namespace: string;
  parseLocalStorageValue: PlatformTypesEqualizerAPILocalStorageAPIParseLocalStorageValue;
  setItem: PlatformTypesEqualizerAPILocalStorageAPISetItem;
  setItemInternal: PlatformTypesEqualizerAPILocalStorageAPISetItemInternal;
  toggleItemsTypeAndCleanup: PlatformTypesEqualizerAPILocalStorageAPIToggleItemsTypeAndCleanup;
}

export type PlatformTypesEqualizerAPILocalStorageAPIClearItem = (arg0: any) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPICreateNamespacedKey = (arg0: any) => unknown;

export interface PlatformTypesEqualizerAPILocalStorageAPIEvents {
  _emitter: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListeners {
  update: Array<
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem10
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem2
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem3
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem4
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem5
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem6
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem7
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem8
    | PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem9
  >;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem10 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener10;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions10;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem2 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener2;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions2;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem3 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener3;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions3;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem4 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener4;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions4;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem5 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener5;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions5;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem6 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener6;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions6;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem7 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener7;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions7;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem8 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener8;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions8;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItem9 {
  listener: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener9;
  options: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions9;
}

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener10 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener3 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener4 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener5 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener6 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener7 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener8 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemListener9 = (
  arg0: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions10 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions2 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions3 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions4 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions5 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions6 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions7 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions8 =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterListenersUpdateItemOptions9 =
  Record<string, unknown>;

export interface PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterMetaListeners {
  add: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesEqualizerAPILocalStorageAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesEqualizerAPILocalStorageAPIGetEvents = () => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIGetItem = (arg0: any) => unknown;

export interface PlatformTypesEqualizerAPILocalStorageAPIItems {
  "vcnhj1hh3xe940gk8lmerf3y5:cinema-media-preference": string;
  "vcnhj1hh3xe940gk8lmerf3y5:connect-nudge-triggered-at": string;
  "vcnhj1hh3xe940gk8lmerf3y5:fusionSearchHistory": Array<PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItem>;
  "vcnhj1hh3xe940gk8lmerf3y5:homePins": string;
  "vcnhj1hh3xe940gk8lmerf3y5:isPlaybackBarRemainingTimeToggled": boolean;
  "vcnhj1hh3xe940gk8lmerf3y5:items-view": number;
  "vcnhj1hh3xe940gk8lmerf3y5:items-view-fullscreen": number;
  "vcnhj1hh3xe940gk8lmerf3y5:lastVisitedLocation": string;
  "vcnhj1hh3xe940gk8lmerf3y5:left-sidebar-default-state-width": number;
  "vcnhj1hh3xe940gk8lmerf3y5:left-sidebar-expanded-state-width": number;
  "vcnhj1hh3xe940gk8lmerf3y5:left-sidebar-state": number;
  "vcnhj1hh3xe940gk8lmerf3y5:library-row-mode": null;
  "vcnhj1hh3xe940gk8lmerf3y5:lintHtmlWithCss": boolean;
  "vcnhj1hh3xe940gk8lmerf3y5:onboarding-checklist": PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5onboardingchecklist;
  "vcnhj1hh3xe940gk8lmerf3y5:onboarding-checklist-completed-at": null;
  "vcnhj1hh3xe940gk8lmerf3y5:opened-folder-uri": string;
  "vcnhj1hh3xe940gk8lmerf3y5:panel-width": number;
  "vcnhj1hh3xe940gk8lmerf3y5:playbackSpeed": number;
  "vcnhj1hh3xe940gk8lmerf3y5:queue-view": string;
  "vcnhj1hh3xe940gk8lmerf3y5:remote-config-overrides": PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5remoteconfigoverrides;
  "vcnhj1hh3xe940gk8lmerf3y5:toggleNowPlayingView": boolean;
  "vcnhj1hh3xe940gk8lmerf3y5:ui.right_sidebar_content": string;
  "vcnhj1hh3xe940gk8lmerf3y5:ylx-active-filter-ids": PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5ylxactivefilterids;
  "vcnhj1hh3xe940gk8lmerf3y5:ylx-active-sort-order-by-filter-id": PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5ylxactivesortorderbyfilterid;
  "vcnhj1hh3xe940gk8lmerf3y5:ylx-default-state-nav-bar-width": number;
  "vcnhj1hh3xe940gk8lmerf3y5:ylx-expanded-folders": Array<unknown>;
  "vcnhj1hh3xe940gk8lmerf3y5:ylx-expanded-state-nav-bar-width": number;
  "vcnhj1hh3xe940gk8lmerf3y5:ylx-sort-order-and-direction-by-filter-id": PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5ylxsortorderanddirectionbyfilterid;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItem {
  color: string;
  formatListData: PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemFormatListData;
  images: Array<PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemImagesItem>;
  name: string;
  owner: PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemOwner;
  requestId: string;
  type: string;
  uri: string;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemFormatListData {
  attributes: PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemFormatListDataAttributes;
  type: string;
}

export type PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemFormatListDataAttributes =
  Record<string, unknown>;

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemImagesItem {
  height: number;
  url: string;
  width: number;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemOwner {
  displayName: string;
  images: Array<
    | PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemOwnerImagesItem
    | PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemOwnerImagesItem2
  >;
  type: string;
  uri: string;
  username: string;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemOwnerImagesItem {
  height: number;
  url: string;
  width: number;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5fusionSearchHistoryItemOwnerImagesItem2 {
  height: number;
  url: string;
  width: number;
}

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5onboardingchecklist {
  completed: PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5onboardingchecklistCompleted;
}

export type PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5onboardingchecklistCompleted =
  Record<string, unknown>;

export interface PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5remoteconfigoverrides {
  betamaxSdkDataSaverV2: boolean;
  betamaxUsePendingStorage: boolean;
  canYourDJUserBeConvertedToPremium: boolean;
  embeddedAdsPrioritizeCanvas: boolean;
  enableAboutRecsDisclosure: boolean;
  enableAdaptiveTitleEntities: boolean;
  enableAudiobookAdExclusivity: boolean;
  enableAudiobookCardPlayButton: boolean;
  enableAuthorPage: boolean;
  enableAutoSeekToVideoBufferedStartPosition: boolean;
  enableBetamaxSdkSubtitlesDesktopX: boolean;
  enableBetamaxSdkVideoOnVideoSai: boolean;
  enableBetamaxSdkVmp: boolean;
  enableCanvasAds: boolean;
  enableConcertDistanceRadius: boolean;
  enableConcertsNearYou: boolean;
  enableConcertsNotInterested: boolean;
  enableConcertsReportIssue: boolean;
  enableContextualTrackBans: boolean;
  enableCreateButton: string;
  enableDesktopMusicLeavebehinds: boolean;
  enableEmbeddedNpvAds: boolean;
  enableEqualizer: boolean;
  enableEsperantoMigrationLeaderboard: boolean;
  enableEventsInYourLibrary: boolean;
  enableFeedBaselineAudioPreviews: boolean;
  enableFeedBaselineTranscripts: boolean;
  enableFeedBaselineVideoPreviews: boolean;
  enableFullscreenLibrary: boolean;
  enableFullscreenMode: boolean;
  enableImprovedCinemaModeCanvas: boolean;
  enableImprovedCinemaModeScrollCards: boolean;
  enableInAppMessaging: boolean;
  enableJamNearbyJoining: boolean;
  enableLikedSongsFilterTags: boolean;
  enableLyricsScrollToCurrentLineButton: boolean;
  enableLyricsUpsell: boolean;
  enableMandalorianEasterEgg: string;
  enableNavigateToGalleryFromConceptPill: boolean;
  enableNearbyJams: boolean;
  enableNewDevicePicker: boolean;
  enableNewShuffleModeOrder: boolean;
  enableNpvAboutPodcast: boolean;
  enableNpvCreditsImpressions: boolean;
  enablePiPMiniPlayer: boolean;
  enablePiPMiniPlayerVideo: boolean;
  enablePlaybackBarAnimation: boolean;
  enablePremiumPage: boolean;
  enablePremiumUserForMiniPlayer: boolean;
  enablePushCinemaModeStateToHistory: boolean;
  enableReactQueryPersistence: boolean;
  enableReportAudiobookAuthors: boolean;
  enableShowLeavebehindConsolidation: boolean;
  enableSixteenByNineCoverImages: boolean;
  enableSmartShuffle: boolean;
  enableStaticImage2Optimizer: boolean;
  enableUserCommentsForEpisodes: boolean;
  enableVenuePages: boolean;
  enableViewMode: boolean;
  enableWatchFeed: boolean;
  enableWatchFeedEntityPages: boolean;
  enableYLXPrereleaseAlbums: boolean;
  hideUpgradeCTA: boolean;
}

export type PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5ylxactivefilterids =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5ylxactivesortorderbyfilterid =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIItemsVcnhj1hh3xe940gk8lmerf3y5ylxsortorderanddirectionbyfilterid =
  Record<string, unknown>;

export type PlatformTypesEqualizerAPILocalStorageAPIListenToStorageEvents = () => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIParseLocalStorageValue = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPISetItem = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPISetItemInternal = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesEqualizerAPILocalStorageAPIToggleItemsTypeAndCleanup = () => unknown;

export interface PlatformTypesEqualizerAPIPrefs {
  create: PlatformTypesEqualizerAPIPrefsCreate;
  get: PlatformTypesEqualizerAPIPrefsGet;
  getAll: PlatformTypesEqualizerAPIPrefsGetAll;
  options: PlatformTypesEqualizerAPIPrefsOptions;
  set: PlatformTypesEqualizerAPIPrefsSet;
  sub: PlatformTypesEqualizerAPIPrefsSub;
  subAll: PlatformTypesEqualizerAPIPrefsSubAll;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesEqualizerAPIPrefsCreate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPIPrefsGet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPIPrefsGetAll = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPIPrefsOptions = Record<string, unknown>;

export type PlatformTypesEqualizerAPIPrefsSet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPIPrefsSub = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPIPrefsSubAll = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPISetEnabledState = (arg0: any) => unknown;

export type PlatformTypesEqualizerAPISetFilterGain = (arg0: any, arg1: any) => unknown;

export type PlatformTypesEqualizerAPISetPreset = (arg0: any) => unknown;

export type PlatformTypesEqualizerAPISubscribeToEnabledState = (arg0: any) => unknown;

export type PlatformTypesEqualizerAPISubscribeToPresetChange = (arg0: any) => unknown;

export interface PlatformTypesExternalAccessoryAPI {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _cache: PlatformTypesExternalAccessoryAPICache;
  lookup: PlatformTypesExternalAccessoryAPILookup;
  sendLookupRequest: PlatformTypesExternalAccessoryAPISendLookupRequest;
}

export interface PlatformTypesExternalAccessoryAPICache {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export type PlatformTypesExternalAccessoryAPILookup = (arg0: any) => unknown;

export type PlatformTypesExternalAccessoryAPISendLookupRequest = (arg0: any) => unknown;

export interface PlatformTypesFeatureFlags {
  enableShows: boolean;
}

export interface PlatformTypesFeedbackAPI {
  _client: PlatformTypesFeedbackAPIClient;
  _events: PlatformTypesFeedbackAPIEvents;
  _subscribeContextualBans: PlatformTypesFeedbackAPISubscribeContextualBans;
  addContextTrackBan: PlatformTypesFeedbackAPIAddContextTrackBan;
  getCapabilities: PlatformTypesFeedbackAPIGetCapabilities;
  getEvents: PlatformTypesFeedbackAPIGetEvents;
  removeContextTrackBan: PlatformTypesFeedbackAPIRemoveContextTrackBan;
}

export type PlatformTypesFeedbackAPIAddContextTrackBan = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesFeedbackAPIClient {
  add: PlatformTypesPlayerAPICollectionAdd;
  addUnplayed: PlatformTypesPlayerAPICollectionAddUnplayed;
  ban: PlatformTypesPlayerAPICollectionBan;
  banGlobal: PlatformTypesPlayerAPICollectionBanGlobal;
  banInPlayContext: PlatformTypesPlayerAPICollectionBanInPlayContext;
  contains: PlatformTypesPlayerAPICollectionContains;
  decorate: PlatformTypesPlayerAPICollectionDecorate;
  getAlbumTrackList: PlatformTypesPlayerAPICollectionGetAlbumTrackList;
  getAlbumView: PlatformTypesPlayerAPICollectionGetAlbumView;
  getArtistTrackList: PlatformTypesPlayerAPICollectionGetArtistTrackList;
  getArtistView: PlatformTypesPlayerAPICollectionGetArtistView;
  getBans: PlatformTypesPlayerAPICollectionGetBans;
  getBucketSyncStatus: PlatformTypesPlayerAPICollectionGetBucketSyncStatus;
  getEpisodeList: PlatformTypesPlayerAPICollectionGetEpisodeList;
  getResumePoints: PlatformTypesPlayerAPICollectionGetResumePoints;
  getTrackList: PlatformTypesPlayerAPICollectionGetTrackList;
  getTrackListMetadata: PlatformTypesPlayerAPICollectionGetTrackListMetadata;
  getUnplayedEpisodes: PlatformTypesPlayerAPICollectionGetUnplayedEpisodes;
  isSnoozed: PlatformTypesPlayerAPICollectionIsSnoozed;
  offlineAlbum: PlatformTypesPlayerAPICollectionOfflineAlbum;
  offlineArtist: PlatformTypesPlayerAPICollectionOfflineArtist;
  offlineTracks: PlatformTypesPlayerAPICollectionOfflineTracks;
  options: PlatformTypesFeedbackAPIClientOptions;
  playAlbum: PlatformTypesPlayerAPICollectionPlayAlbum;
  playArtist: PlatformTypesPlayerAPICollectionPlayArtist;
  playTracks: PlatformTypesPlayerAPICollectionPlayTracks;
  remove: PlatformTypesPlayerAPICollectionRemove;
  removeOfflineAlbum: PlatformTypesPlayerAPICollectionRemoveOfflineAlbum;
  removeOfflineArtist: PlatformTypesPlayerAPICollectionRemoveOfflineArtist;
  removeOfflineTracks: PlatformTypesPlayerAPICollectionRemoveOfflineTracks;
  removeUnplayed: PlatformTypesPlayerAPICollectionRemoveUnplayed;
  snooze: PlatformTypesPlayerAPICollectionSnooze;
  streamAlbumTrackList: PlatformTypesPlayerAPICollectionStreamAlbumTrackList;
  streamAlbumView: PlatformTypesPlayerAPICollectionStreamAlbumView;
  streamArtistTrackList: PlatformTypesPlayerAPICollectionStreamArtistTrackList;
  streamArtistView: PlatformTypesPlayerAPICollectionStreamArtistView;
  streamBans: PlatformTypesPlayerAPICollectionStreamBans;
  streamChanges: PlatformTypesPlayerAPICollectionStreamChanges;
  streamContains: PlatformTypesPlayerAPICollectionStreamContains;
  streamDecorate: PlatformTypesPlayerAPICollectionStreamDecorate;
  streamEpisodeList: PlatformTypesPlayerAPICollectionStreamEpisodeList;
  streamTagsInfo: PlatformTypesPlayerAPICollectionStreamTagsInfo;
  streamTrackList: PlatformTypesPlayerAPICollectionStreamTrackList;
  streamTrackListMetadata: PlatformTypesPlayerAPICollectionStreamTrackListMetadata;
  streamUnplayedEpisodes: PlatformTypesPlayerAPICollectionStreamUnplayedEpisodes;
  tracksOfflineStatus: PlatformTypesPlayerAPICollectionTracksOfflineStatus;
  transport: PlatformTypesRegistryMapValueInstance2;
  unban: PlatformTypesPlayerAPICollectionUnban;
  unbanGlobal: PlatformTypesPlayerAPICollectionUnbanGlobal;
  unbanInPlayContext: PlatformTypesPlayerAPICollectionUnbanInPlayContext;
  unsnooze: PlatformTypesPlayerAPICollectionUnsnooze;
}

export type PlatformTypesFeedbackAPIClientOptions = Record<string, unknown>;

export interface PlatformTypesFeedbackAPIEvents {
  _contextualBanAggregatorByContextUri: PlatformTypesFeedbackAPIEventsContextualBanAggregatorByContextUri;
  _contextualBanCancelFunctionByContextUri: PlatformTypesFeedbackAPIEventsContextualBanCancelFunctionByContextUri;
  _emitter: PlatformTypesFeedbackAPIEventsEmitter;
  _subscribeContextualBans: PlatformTypesFeedbackAPIEventsSubscribeContextualBans;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateContextualBan: PlatformTypesFeedbackAPIEventsEmitUpdateContextualBan;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onBatchChanged: PlatformTypesFeedbackAPIEventsOnBatchChanged;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export type PlatformTypesFeedbackAPIEventsContextualBanAggregatorByContextUri = Record<
  string,
  unknown
>;

export type PlatformTypesFeedbackAPIEventsContextualBanCancelFunctionByContextUri = Record<
  string,
  unknown
>;

export interface PlatformTypesFeedbackAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesFeedbackAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesFeedbackAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesFeedbackAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesFeedbackAPIEventsEmitterMetaListeners {
  add: PlatformTypesFeedbackAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesFeedbackAPIEventsEmitterMetaListenersAdd {
  update_contextual_ban: Array<PlatformTypesFeedbackAPIEventsEmitterMetaListenersAddUpdateContextualBanItem>;
}

export interface PlatformTypesFeedbackAPIEventsEmitterMetaListenersAddUpdateContextualBanItem {
  listener: PlatformTypesFeedbackAPIEventsEmitterMetaListenersAddUpdateContextualBanItemListener;
  options: PlatformTypesFeedbackAPIEventsEmitterMetaListenersAddUpdateContextualBanItemOptions;
}

export type PlatformTypesFeedbackAPIEventsEmitterMetaListenersAddUpdateContextualBanItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesFeedbackAPIEventsEmitterMetaListenersAddUpdateContextualBanItemOptions =
  Record<string, unknown>;

export interface PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemove {
  update_contextual_ban: Array<PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemoveUpdateContextualBanItem>;
}

export interface PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemoveUpdateContextualBanItem {
  listener: PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemoveUpdateContextualBanItemListener;
  options: PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemoveUpdateContextualBanItemOptions;
}

export type PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemoveUpdateContextualBanItemListener =
  (arg0: any) => unknown;

export type PlatformTypesFeedbackAPIEventsEmitterMetaListenersRemoveUpdateContextualBanItemOptions =
  Record<string, unknown>;

export type PlatformTypesFeedbackAPIEventsEmitUpdateContextualBan = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesFeedbackAPIEventsOnBatchChanged = (arg0: any, arg1: any) => unknown;

export type PlatformTypesFeedbackAPIEventsSubscribeContextualBans = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesFeedbackAPIGetCapabilities = () => unknown;

export type PlatformTypesFeedbackAPIGetEvents = () => unknown;

export type PlatformTypesFeedbackAPIRemoveContextTrackBan = (arg0: any, arg1: any) => unknown;

export type PlatformTypesFeedbackAPISubscribeContextualBans = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesFollowAPI {
  _cache: PlatformTypesFollowAPICache;
  _events: PlatformTypesFollowAPIEvents;
  _loader: PlatformTypesGraphQLLoader;
  _validateURIs: PlatformTypesFollowAPIValidateURIs;
  executeOperation: PlatformTypesFollowAPIExecuteOperation;
  followUsers: PlatformTypesFollowAPIFollowUsers;
  getEvents: PlatformTypesFollowAPIGetEvents;
  isFollowing: PlatformTypesFollowAPIIsFollowing;
  unfollowUsers: PlatformTypesFollowAPIUnfollowUsers;
}

export interface PlatformTypesFollowAPICache {
  _cache: Map<unknown, unknown>;
  _ttl: null;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesFollowAPIEvents {
  _emitter: PlatformTypesFollowAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitOperationComplete: PlatformTypesFollowAPIEventsEmitOperationComplete;
  emitOperationSync: PlatformTypesFollowAPIEventsEmitOperationSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export type PlatformTypesFollowAPIEventsEmitOperationComplete = (arg0: any, arg1: any) => unknown;

export type PlatformTypesFollowAPIEventsEmitOperationSync = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesFollowAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesFollowAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesFollowAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesFollowAPIEventsEmitterListeners {
  operation: Array<PlatformTypesFollowAPIEventsEmitterListenersOperationItem>;
}

export interface PlatformTypesFollowAPIEventsEmitterListenersOperationItem {
  listener: PlatformTypesFollowAPIEventsEmitterListenersOperationItemListener;
  options: PlatformTypesFollowAPIEventsEmitterListenersOperationItemOptions;
}

export type PlatformTypesFollowAPIEventsEmitterListenersOperationItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesFollowAPIEventsEmitterListenersOperationItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesFollowAPIEventsEmitterMetaListeners {
  add: PlatformTypesFollowAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesFollowAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesFollowAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesFollowAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesFollowAPIExecuteOperation = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesFollowAPIFollowUsers = (arg0: any) => unknown;

export type PlatformTypesFollowAPIGetEvents = () => unknown;

export type PlatformTypesFollowAPIIsFollowing = (arg0: any) => unknown;

export type PlatformTypesFollowAPIUnfollowUsers = (arg0: any) => unknown;

export type PlatformTypesFollowAPIValidateURIs = (arg0: any) => unknown;

export type PlatformTypesGraphQLLoader = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesHistory {
  action: string;
  block: PlatformTypesHistoryBlock;
  canGo: PlatformTypesHistoryCanGo;
  createHref: PlatformTypesHistoryCreateHref;
  entries: Array<PlatformTypesHistoryLocation>;
  go: PlatformTypesHistoryGo;
  goBack: PlatformTypesHistoryGoBack;
  goForward: PlatformTypesHistoryGoForward;
  index: number;
  length: number;
  listen: PlatformTypesHistoryListen;
  location: PlatformTypesHistoryLocation;
  push: PlatformTypesHistoryPush;
  replace: PlatformTypesHistoryReplace;
}

export type PlatformTypesHistoryBlock = () => unknown;

export type PlatformTypesHistoryCanGo = (arg0: any) => unknown;

export type PlatformTypesHistoryCreateHref = (arg0: any) => unknown;

export type PlatformTypesHistoryGo = (arg0: any) => unknown;

export type PlatformTypesHistoryGoBack = () => unknown;

export type PlatformTypesHistoryGoForward = () => unknown;

export type PlatformTypesHistoryListen = (arg0: any) => unknown;

export interface PlatformTypesHistoryLocation {
  hash: string;
  key: string;
  pathname: string;
  search: string;
  state: PlatformTypesHistoryLocationState;
}

export interface PlatformTypesHistoryLocationState {
  navigationalRoot: undefined;
}

export type PlatformTypesHistoryPush = (arg0: any, arg1: any) => unknown;

export type PlatformTypesHistoryReplace = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesInitialProductState {
  "ab-ad-player-targeting": string;
  "ab-watch-now": string;
  "active-session-days": string;
  "ad-formats-preroll-video": string;
  "ad-session-persistence": string;
  "age-assurance-enabled-account-settings": string;
  "app-developer": string;
  "apply-child-content-restrictions": string;
  "audio-preview-url-template": string;
  "audio-quality": string;
  "audiobook-onboarding-completed": string;
  "audiobook-onboarding-dismissed": string;
  "browse-overview-enabled": string;
  "buffering-strategy-parameters": string;
  "capper-profile": string;
  "capping-bar-threshold": string;
  "com.spotify.madprops.delivered.by.ucs": string;
  "com.spotify.madprops.use.ucs.product.state": string;
  "dma-mode-available": string;
  "dma-mode-enabled": string;
  "dsa-mode-available": string;
  "dsa-mode-enabled": string;
  "employee-free-opt-in": string;
  "enable-annotations": string;
  "enable-annotations-read": string;
  "enable-crossfade": string;
  "estimated-age": string;
  "explicit-content": string;
  "fb-grant-permission-local-render": string;
  "fb-info-confirmation": string;
  "filter-explicit-content": string;
  "financial-product": string;
  "has-audiobooks-subscription": string;
  "head-file-caching": string;
  "head-files-url": string;
  "high-bitrate": string;
  "image-url": string;
  "is-cheetara": string;
  "is-pigeon": string;
  "is-puffin": string;
  "is-standalone-audiobooks": string;
  "is-tuna": string;
  "key-caching-auto-offline": string;
  "key-caching-max-count": string;
  "key-caching-max-offline-seconds": string;
  "key-memory-cache-mode": string;
  "license-acceptance-grace-days": string;
  "license-agreements": string;
  "list-private-by-default": string;
  "metadata-link-lookup-modes": string;
  "mobile-browse": string;
  "mobile-login": string;
  "mobile-payment": string;
  "network-operator-premium-activation": string;
  "nft-disabled": string;
  "obfuscate-restricted-tracks": string;
  "on-demand": string;
  "on-demand-trial": string;
  "on-demand-trial-in-progress": string;
  "payments-locked-state": string;
  "pick-and-shuffle": string;
  "player-license": string;
  "player-license-v2": string;
  "playlist-annotations-markup": string;
  "preferred-locale": string;
  "prefetch-keys": string;
  "prefetch-strategy": string;
  "prefetch-window-max": string;
  "public-toplist": string;
  "publish-activity": string;
  "publish-playlist": string;
  "rating-access": string;
  "remote-control": string;
  "restrict-branch-data-processing": string;
  "restrict-playlist-collaboration": string;
  "send-email": string;
  "setup-headphones-changes": string;
  "should-assure-age-content-playback": string;
  "should-assure-age-social": string;
  "shows-collection": string;
  "shows-collection-jam": string;
  "shuffle-algorithm": string;
  "sidebar-navigation-enabled": string;
  "social-session": string;
  "social-session-free-tier": string;
  "storage-size-config": string;
  "streaming-only-premium": string;
  "streaming-rules": string;
  "track-cap": string;
  "ugc-abuse-report": string;
  "ugc-abuse-report-url": string;
  "use-fb-publish-backend": string;
  "user-profile-show-invitation-codes": string;
  "video-cdn-sampling": string;
  "video-device-blacklisted": string;
  "video-initial-bitrate": string;
  "video-keyframe-url": string;
  "video-manifest-url": string;
  "video-wifi-initial-bitrate": string;
  "widevine-license-url": string;
  "yl-kids-restricted-content": string;
  ab_recently_played_feature_time_filter_threshold: string;
  ads: string;
  arsenal_country: string;
  autoplay: string;
  catalogue: string;
  collection: string;
  country: string;
  created_by_partner: string;
  incognito_mode_timeout: string;
  is_email_verified: string;
  is_maybe_in_social_session: string;
  jam: string;
  libspotify: string;
  mobile: string;
  name: string;
  offline: string;
  parrot: string;
  product: string;
  radio: string;
  shuffle: string;
  streaming: string;
}

export interface PlatformTypesInitialUser {
  avatarBackgroundColor: number;
  displayName: string;
  images: Array<PlatformTypesInitialUserImagesItem | PlatformTypesInitialUserImagesItem2>;
  type: string;
  uri: string;
  username: string;
}

export interface PlatformTypesInitialUserImagesItem {
  height: number;
  url: string;
  width: number;
}

export interface PlatformTypesInitialUserImagesItem2 {
  height: number;
  url: string;
  width: number;
}

export interface PlatformTypesJamDevicesAPI {
  areTheSame: PlatformTypesJamDevicesAPIAreTheSame;
  cleanupJams: PlatformTypesJamDevicesAPICleanupJams;
  combineJamsWithEntities: PlatformTypesJamDevicesAPICombineJamsWithEntities;
  createNearbyJamRowEntities: PlatformTypesJamDevicesAPICreateNearbyJamRowEntities;
  getJamDevices: PlatformTypesJamDevicesAPIGetJamDevices;
  mergeJamsWithEntities: PlatformTypesJamDevicesAPIMergeJamsWithEntities;
  removeJamIfWeAreOnItAlready: PlatformTypesJamDevicesAPIRemoveJamIfWeAreOnItAlready;
  removeMatchedJams: PlatformTypesJamDevicesAPIRemoveMatchedJams;
  socialConnectAPI: PlatformTypesSocialConnectAPI;
}

export type PlatformTypesJamDevicesAPIAreTheSame = (arg0: any, arg1: any) => unknown;

export type PlatformTypesJamDevicesAPICleanupJams = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesJamDevicesAPICombineJamsWithEntities = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesJamDevicesAPICreateNearbyJamRowEntities = (arg0: any) => unknown;

export type PlatformTypesJamDevicesAPIGetJamDevices = () => unknown;

export type PlatformTypesJamDevicesAPIMergeJamsWithEntities = (arg0: any, arg1: any) => unknown;

export type PlatformTypesJamDevicesAPIRemoveJamIfWeAreOnItAlready = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesJamDevicesAPIRemoveMatchedJams = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesLibraryAPI {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _cache: Map<unknown, unknown>;
  _collection: PlatformTypesLibraryAPICollection;
  _currentUsername: string;
  _events: PlatformTypesLibraryAPIEvents;
  _isAlbumSortByReleaseDateEnabled: boolean;
  _isAuthorsEnabled: boolean;
  _isCoursesEnabled: boolean;
  _isEventsInYourLibraryEnabled: boolean;
  _isTagsInfoSynced: PlatformTypesLibraryAPIIsTagsInfoSynced;
  _playlistDataClient: PlatformTypesLibraryAPIPlaylistDataClient;
  _playlistServiceClient: PlatformTypesLibraryAPIPlaylistServiceClient;
  _your_library: PlatformTypesLibraryAPIYourLibrary;
  add: PlatformTypesLibraryAPIAdd;
  contains: PlatformTypesLibraryAPIContains;
  containsSync: PlatformTypesLibraryAPIContainsSync;
  getCapabilities: PlatformTypesLibraryAPIGetCapabilities;
  getContents: PlatformTypesLibraryAPIGetContents;
  getContentsPrimaryFilterId: PlatformTypesLibraryAPIGetContentsPrimaryFilterId;
  getCustomSortOrderId: PlatformTypesLibraryAPIGetCustomSortOrderId;
  getEvents: PlatformTypesLibraryAPIGetEvents;
  getFilterLabel: PlatformTypesLibraryAPIGetFilterLabel;
  getRecentsSortOrderId: PlatformTypesLibraryAPIGetRecentsSortOrderId;
  getSortOrderLabel: PlatformTypesLibraryAPIGetSortOrderLabel;
  getStaticallyKnownFilters: PlatformTypesLibraryAPIGetStaticallyKnownFilters;
  getTracks: PlatformTypesLibraryAPIGetTracks;
  getTracksFilterTags: PlatformTypesLibraryAPIGetTracksFilterTags;
  markAsPlayed: PlatformTypesLibraryAPIMarkAsPlayed;
  markAsUnPlayed: PlatformTypesLibraryAPIMarkAsUnPlayed;
  pin: PlatformTypesLibraryAPIPin;
  remove: PlatformTypesLibraryAPIRemove;
  unpin: PlatformTypesLibraryAPIUnpin;
}

export type PlatformTypesLibraryAPIAdd = (arg0: any) => unknown;

export interface PlatformTypesLibraryAPICollection {
  add: PlatformTypesPlayerAPICollectionAdd;
  addUnplayed: PlatformTypesPlayerAPICollectionAddUnplayed;
  ban: PlatformTypesPlayerAPICollectionBan;
  banGlobal: PlatformTypesPlayerAPICollectionBanGlobal;
  banInPlayContext: PlatformTypesPlayerAPICollectionBanInPlayContext;
  contains: PlatformTypesPlayerAPICollectionContains;
  decorate: PlatformTypesPlayerAPICollectionDecorate;
  getAlbumTrackList: PlatformTypesPlayerAPICollectionGetAlbumTrackList;
  getAlbumView: PlatformTypesPlayerAPICollectionGetAlbumView;
  getArtistTrackList: PlatformTypesPlayerAPICollectionGetArtistTrackList;
  getArtistView: PlatformTypesPlayerAPICollectionGetArtistView;
  getBans: PlatformTypesPlayerAPICollectionGetBans;
  getBucketSyncStatus: PlatformTypesPlayerAPICollectionGetBucketSyncStatus;
  getEpisodeList: PlatformTypesPlayerAPICollectionGetEpisodeList;
  getResumePoints: PlatformTypesPlayerAPICollectionGetResumePoints;
  getTrackList: PlatformTypesPlayerAPICollectionGetTrackList;
  getTrackListMetadata: PlatformTypesPlayerAPICollectionGetTrackListMetadata;
  getUnplayedEpisodes: PlatformTypesPlayerAPICollectionGetUnplayedEpisodes;
  isSnoozed: PlatformTypesPlayerAPICollectionIsSnoozed;
  offlineAlbum: PlatformTypesPlayerAPICollectionOfflineAlbum;
  offlineArtist: PlatformTypesPlayerAPICollectionOfflineArtist;
  offlineTracks: PlatformTypesPlayerAPICollectionOfflineTracks;
  options: PlatformTypesLibraryAPICollectionOptions;
  playAlbum: PlatformTypesPlayerAPICollectionPlayAlbum;
  playArtist: PlatformTypesPlayerAPICollectionPlayArtist;
  playTracks: PlatformTypesPlayerAPICollectionPlayTracks;
  remove: PlatformTypesPlayerAPICollectionRemove;
  removeOfflineAlbum: PlatformTypesPlayerAPICollectionRemoveOfflineAlbum;
  removeOfflineArtist: PlatformTypesPlayerAPICollectionRemoveOfflineArtist;
  removeOfflineTracks: PlatformTypesPlayerAPICollectionRemoveOfflineTracks;
  removeUnplayed: PlatformTypesPlayerAPICollectionRemoveUnplayed;
  snooze: PlatformTypesPlayerAPICollectionSnooze;
  streamAlbumTrackList: PlatformTypesPlayerAPICollectionStreamAlbumTrackList;
  streamAlbumView: PlatformTypesPlayerAPICollectionStreamAlbumView;
  streamArtistTrackList: PlatformTypesPlayerAPICollectionStreamArtistTrackList;
  streamArtistView: PlatformTypesPlayerAPICollectionStreamArtistView;
  streamBans: PlatformTypesPlayerAPICollectionStreamBans;
  streamChanges: PlatformTypesPlayerAPICollectionStreamChanges;
  streamContains: PlatformTypesPlayerAPICollectionStreamContains;
  streamDecorate: PlatformTypesPlayerAPICollectionStreamDecorate;
  streamEpisodeList: PlatformTypesPlayerAPICollectionStreamEpisodeList;
  streamTagsInfo: PlatformTypesPlayerAPICollectionStreamTagsInfo;
  streamTrackList: PlatformTypesPlayerAPICollectionStreamTrackList;
  streamTrackListMetadata: PlatformTypesPlayerAPICollectionStreamTrackListMetadata;
  streamUnplayedEpisodes: PlatformTypesPlayerAPICollectionStreamUnplayedEpisodes;
  tracksOfflineStatus: PlatformTypesPlayerAPICollectionTracksOfflineStatus;
  transport: PlatformTypesRegistryMapValueInstance2;
  unban: PlatformTypesPlayerAPICollectionUnban;
  unbanGlobal: PlatformTypesPlayerAPICollectionUnbanGlobal;
  unbanInPlayContext: PlatformTypesPlayerAPICollectionUnbanInPlayContext;
  unsnooze: PlatformTypesPlayerAPICollectionUnsnooze;
}

export type PlatformTypesLibraryAPICollectionOptions = Record<string, unknown>;

export type PlatformTypesLibraryAPIContains = () => unknown;

export type PlatformTypesLibraryAPIContainsSync = (arg0: any) => unknown;

export interface PlatformTypesLibraryAPIEvents {
  _aggregator: PlatformTypesLibraryAPIEventsAggregator;
  _cache: Map<unknown, unknown>;
  _cancellables: PlatformTypesLibraryAPIEventsCancellables;
  _collection: PlatformTypesLibraryAPICollection;
  _containsCancellable: null;
  _emitter: PlatformTypesLibraryAPIEventsEmitter;
  _isAuthorsEnabled: boolean;
  _isEventsInYourLibraryEnabled: boolean;
  _numListeners: number;
  _playlist: PlatformTypesLibraryAPIPlaylistDataClient;
  _your_library: PlatformTypesLibraryAPIYourLibrary;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitOperationComplete: PlatformTypesLibraryAPIEventsEmitOperationComplete;
  emitOperationSync: PlatformTypesLibraryAPIEventsEmitOperationSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateItems: PlatformTypesLibraryAPIEventsEmitUpdateItems;
  emitUpdatePin: PlatformTypesLibraryAPIEventsEmitUpdatePin;
  emitUpdatePinErrorTooManyPins: PlatformTypesLibraryAPIEventsEmitUpdatePinErrorTooManyPins;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onBatchChanged: PlatformTypesLibraryAPIEventsOnBatchChanged;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
  subscribeToUpdates: PlatformTypesLibraryAPIEventsSubscribeToUpdates;
  unsubscribeFromUpdates: PlatformTypesLibraryAPIEventsUnsubscribeFromUpdates;
}

export interface PlatformTypesLibraryAPIEventsAggregator {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesLibraryAPIEventsAggregatorOnAdd;
  _onBatch: PlatformTypesLibraryAPIEventsAggregatorOnBatch;
  _onRemove: PlatformTypesLibraryAPIEventsAggregatorOnRemove;
  _onUpdate: PlatformTypesLibraryAPIEventsAggregatorOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesLibraryAPIEventsAggregatorOnAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLibraryAPIEventsAggregatorOnBatch = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIEventsAggregatorOnRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLibraryAPIEventsAggregatorOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesLibraryAPIEventsCancellables {
  albums: PlatformTypesLibraryAPIEventsCancellablesAlbums;
  artists: PlatformTypesLibraryAPIEventsCancellablesArtists;
  authors: PlatformTypesLibraryAPIEventsCancellablesAuthors;
  books: PlatformTypesLibraryAPIEventsCancellablesBooks;
  episodes: PlatformTypesLibraryAPIEventsCancellablesEpisodes;
  events: PlatformTypesLibraryAPIEventsCancellablesEvents;
  shows: PlatformTypesLibraryAPIEventsCancellablesShows;
  tracks: PlatformTypesLibraryAPIEventsCancellablesTracks;
}

export interface PlatformTypesLibraryAPIEventsCancellablesAlbums {
  cancel: PlatformTypesLibraryAPIEventsCancellablesAlbumsCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesAlbumsCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesArtists {
  cancel: PlatformTypesLibraryAPIEventsCancellablesArtistsCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesArtistsCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesAuthors {
  cancel: PlatformTypesLibraryAPIEventsCancellablesAuthorsCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesAuthorsCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesBooks {
  cancel: PlatformTypesLibraryAPIEventsCancellablesBooksCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesBooksCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesEpisodes {
  cancel: PlatformTypesLibraryAPIEventsCancellablesEpisodesCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesEpisodesCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesEvents {
  cancel: PlatformTypesLibraryAPIEventsCancellablesEventsCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesEventsCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesShows {
  cancel: PlatformTypesLibraryAPIEventsCancellablesShowsCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesShowsCancel = () => unknown;

export interface PlatformTypesLibraryAPIEventsCancellablesTracks {
  cancel: PlatformTypesLibraryAPIEventsCancellablesTracksCancel;
}

export type PlatformTypesLibraryAPIEventsCancellablesTracksCancel = () => unknown;

export type PlatformTypesLibraryAPIEventsEmitOperationComplete = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLibraryAPIEventsEmitOperationSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesLibraryAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesLibraryAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesLibraryAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesLibraryAPIEventsEmitterListeners {
  operation: Array<PlatformTypesLibraryAPIEventsEmitterListenersOperationItem>;
  update: Array<PlatformTypesLibraryAPIEventsEmitterListenersUpdateItem>;
  update_pin: Array<PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinItem>;
  update_pin_error: Array<PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinErrorItem>;
}

export interface PlatformTypesLibraryAPIEventsEmitterListenersOperationItem {
  listener: PlatformTypesLibraryAPIEventsEmitterListenersOperationItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterListenersOperationItemOptions;
}

export type PlatformTypesLibraryAPIEventsEmitterListenersOperationItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsEmitterListenersOperationItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesLibraryAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesLibraryAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesLibraryAPIEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinErrorItem {
  listener: PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinErrorItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinErrorItemOptions;
}

export type PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinErrorItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinErrorItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinItem {
  listener: PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinItemOptions;
}

export type PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsEmitterListenersUpdatePinItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesLibraryAPIEventsEmitterMetaListeners {
  add: PlatformTypesLibraryAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesLibraryAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesLibraryAPIEventsEmitterMetaListenersAdd {
  update: Array<PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItem>;
  update_item: Array<PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemItem>;
}

export interface PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItem {
  listener: PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemOptions;
}

export interface PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemItem {
  listener: PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemItemOptions;
}

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemListener = () => unknown;

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersAddUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesLibraryAPIEventsEmitterMetaListenersRemove {
  update: Array<PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItem>;
  update_item: Array<PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemItem>;
}

export interface PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItem {
  listener: PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemOptions;
}

export interface PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemItem {
  listener: PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemItemListener;
  options: PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemItemOptions;
}

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemListener =
  () => unknown;

export type PlatformTypesLibraryAPIEventsEmitterMetaListenersRemoveUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesLibraryAPIEventsEmitUpdateItems = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLibraryAPIEventsEmitUpdatePin = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLibraryAPIEventsEmitUpdatePinErrorTooManyPins = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesLibraryAPIEventsOnBatchChanged = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIEventsSubscribeToUpdates = () => unknown;

export type PlatformTypesLibraryAPIEventsUnsubscribeFromUpdates = () => unknown;

export type PlatformTypesLibraryAPIGetCapabilities = () => unknown;

export type PlatformTypesLibraryAPIGetContents = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIGetContentsPrimaryFilterId = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIGetCustomSortOrderId = () => unknown;

export type PlatformTypesLibraryAPIGetEvents = () => unknown;

export type PlatformTypesLibraryAPIGetFilterLabel = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIGetRecentsSortOrderId = () => unknown;

export type PlatformTypesLibraryAPIGetSortOrderLabel = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIGetStaticallyKnownFilters = () => unknown;

export type PlatformTypesLibraryAPIGetTracks = () => unknown;

export type PlatformTypesLibraryAPIGetTracksFilterTags = () => unknown;

export type PlatformTypesLibraryAPIIsTagsInfoSynced = () => unknown;

export type PlatformTypesLibraryAPIMarkAsPlayed = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIMarkAsUnPlayed = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIPin = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesLibraryAPIPlaylistDataClient {
  find: PlatformTypesShuffleAPIPlaylistDataServiceClientFind;
  get: PlatformTypesShuffleAPIPlaylistDataServiceClientGet;
  multiGet: PlatformTypesShuffleAPIPlaylistDataServiceClientMultiGet;
  options: PlatformTypesLibraryAPIPlaylistDataClientOptions;
  subscribe: PlatformTypesShuffleAPIPlaylistDataServiceClientSubscribe;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesLibraryAPIPlaylistDataClientOptions = Record<string, unknown>;

export interface PlatformTypesLibraryAPIPlaylistServiceClient {
  clearToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken;
  contains: PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains;
  emitItemSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals;
  emitSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals;
  getMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers;
  invalidateRevisions: PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions;
  modify: PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify;
  options: PlatformTypesLibraryAPIPlaylistServiceClientOptions;
  requestLenses: PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses;
  resync: PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync;
  setBasePermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission;
  setMemberPermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission;
  setOfflineState: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState;
  setToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken;
  signal: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal;
  signalItem: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem;
  subscribeToMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesLibraryAPIPlaylistServiceClientOptions = Record<string, unknown>;

export type PlatformTypesLibraryAPIRemove = (arg0: any) => unknown;

export type PlatformTypesLibraryAPIUnpin = (arg0: any) => unknown;

export interface PlatformTypesLibraryAPIYourLibrary {
  all: PlatformTypesOfflineAPIYourLibraryAll;
  contains: PlatformTypesOfflineAPIYourLibraryContains;
  decorate: PlatformTypesOfflineAPIYourLibraryDecorate;
  getKeys: PlatformTypesOfflineAPIYourLibraryGetKeys;
  isCurated: PlatformTypesOfflineAPIYourLibraryIsCurated;
  movePin: PlatformTypesOfflineAPIYourLibraryMovePin;
  options: PlatformTypesLibraryAPIYourLibraryOptions;
  pin: PlatformTypesOfflineAPIYourLibraryPin;
  streamAll: PlatformTypesOfflineAPIYourLibraryStreamAll;
  streamContains: PlatformTypesOfflineAPIYourLibraryStreamContains;
  streamDecorate: PlatformTypesOfflineAPIYourLibraryStreamDecorate;
  streamIsCurated: PlatformTypesOfflineAPIYourLibraryStreamIsCurated;
  transport: PlatformTypesRegistryMapValueInstance2;
  unPin: PlatformTypesOfflineAPIYourLibraryUnPin;
}

export type PlatformTypesLibraryAPIYourLibraryOptions = Record<string, unknown>;

export interface PlatformTypesLifecycleAPI {
  _client: PlatformTypesLifecycleAPIClient;
  restart: PlatformTypesLifecycleAPIRestart;
  shutdown: PlatformTypesLifecycleAPIShutdown;
}

export interface PlatformTypesLifecycleAPIClient {
  options: PlatformTypesLifecycleAPIClientOptions;
  restart: PlatformTypesLifecycleAPIClientRestart;
  shutdown: PlatformTypesLifecycleAPIClientShutdown;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesLifecycleAPIClientOptions = Record<string, unknown>;

export type PlatformTypesLifecycleAPIClientRestart = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLifecycleAPIClientShutdown = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLifecycleAPIRestart = () => unknown;

export type PlatformTypesLifecycleAPIShutdown = () => unknown;

export interface PlatformTypesLocalFilesAPI {
  _client: PlatformTypesLocalFilesAPIClient;
  _cosmos: PlatformTypesRegistryMapValueInstance;
  _emitUpdate: PlatformTypesLocalFilesAPIEmitUpdate;
  _events: PlatformTypesLocalFilesAPIEvents;
  _localStorageAPI: PlatformTypesEqualizerAPILocalStorageAPI;
  _subscribeToTracksUpdates: PlatformTypesLocalFilesAPISubscribeToTracksUpdates;
  _totalLength: number;
  addFolder: PlatformTypesLocalFilesAPIAddFolder;
  browseForFolder: PlatformTypesLocalFilesAPIBrowseForFolder;
  getCapabilities: PlatformTypesLocalFilesAPIGetCapabilities;
  getEvents: PlatformTypesLocalFilesAPIGetEvents;
  getIsEnabled: PlatformTypesLocalFilesAPIGetIsEnabled;
  getSources: PlatformTypesLocalFilesAPIGetSources;
  getTracks: PlatformTypesLocalFilesAPIGetTracks;
  mutateDefaultSource: PlatformTypesLocalFilesAPIMutateDefaultSource;
  removeFolder: PlatformTypesLocalFilesAPIRemoveFolder;
  setIsEnabled: PlatformTypesLocalFilesAPISetIsEnabled;
  subscribeIsEnabled: PlatformTypesLocalFilesAPISubscribeIsEnabled;
}

export type PlatformTypesLocalFilesAPIAddFolder = (arg0: any) => unknown;

export type PlatformTypesLocalFilesAPIBrowseForFolder = () => unknown;

export interface PlatformTypesLocalFilesAPIClient {
  addFolder: PlatformTypesLocalFilesAPIClientAddFolder;
  getScannerStatus: PlatformTypesLocalFilesAPIClientGetScannerStatus;
  getSources: PlatformTypesLocalFilesAPIClientGetSources;
  getTracks: PlatformTypesLocalFilesAPIClientGetTracks;
  mutateDefaultSource: PlatformTypesLocalFilesAPIClientMutateDefaultSource;
  mutateDefaultSources: PlatformTypesLocalFilesAPIClientMutateDefaultSources;
  notifyDefaultSources: PlatformTypesLocalFilesAPIClientNotifyDefaultSources;
  options: PlatformTypesLocalFilesAPIClientOptions;
  removeFolder: PlatformTypesLocalFilesAPIClientRemoveFolder;
  subscribeScannerStatus: PlatformTypesLocalFilesAPIClientSubscribeScannerStatus;
  subscribeSources: PlatformTypesLocalFilesAPIClientSubscribeSources;
  subscribeTracks: PlatformTypesLocalFilesAPIClientSubscribeTracks;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesLocalFilesAPIClientAddFolder = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientGetScannerStatus = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientGetSources = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientGetTracks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientMutateDefaultSource = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientMutateDefaultSources = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesLocalFilesAPIClientNotifyDefaultSources = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesLocalFilesAPIClientOptions = Record<string, unknown>;

export type PlatformTypesLocalFilesAPIClientRemoveFolder = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientSubscribeScannerStatus = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesLocalFilesAPIClientSubscribeSources = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIClientSubscribeTracks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIEmitUpdate = () => unknown;

export interface PlatformTypesLocalFilesAPIEvents {
  _emitter: PlatformTypesLocalFilesAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesLocalFilesAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesLocalFilesAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesLocalFilesAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesLocalFilesAPIEventsEmitterListeners {
  update: Array<PlatformTypesLocalFilesAPIEventsEmitterListenersUpdateItem>;
}

export interface PlatformTypesLocalFilesAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesLocalFilesAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesLocalFilesAPIEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesLocalFilesAPIEventsEmitterListenersUpdateItemListener = () => unknown;

export type PlatformTypesLocalFilesAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesLocalFilesAPIEventsEmitterMetaListeners {
  add: PlatformTypesLocalFilesAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesLocalFilesAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesLocalFilesAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesLocalFilesAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesLocalFilesAPIGetCapabilities = () => unknown;

export type PlatformTypesLocalFilesAPIGetEvents = () => unknown;

export type PlatformTypesLocalFilesAPIGetIsEnabled = () => unknown;

export type PlatformTypesLocalFilesAPIGetSources = () => unknown;

export type PlatformTypesLocalFilesAPIGetTracks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesLocalFilesAPIMutateDefaultSource = (arg0: any) => unknown;

export type PlatformTypesLocalFilesAPIRemoveFolder = (arg0: any) => unknown;

export type PlatformTypesLocalFilesAPISetIsEnabled = (arg0: any) => unknown;

export type PlatformTypesLocalFilesAPISubscribeIsEnabled = (arg0: any) => unknown;

export type PlatformTypesLocalFilesAPISubscribeToTracksUpdates = () => unknown;

export interface PlatformTypesNativeAPI {
  _updateUiClient: PlatformTypesNativeAPIUpdateUiClient;
  setWindowButtonsVisibility: PlatformTypesNativeAPISetWindowButtonsVisibility;
}

export type PlatformTypesNativeAPISetWindowButtonsVisibility = (arg0: any) => unknown;

export interface PlatformTypesNativeAPIUpdateUiClient {
  options: PlatformTypesNativeAPIUpdateUiClientOptions;
  setButtonsVisibility: PlatformTypesNativeAPIUpdateUiClientSetButtonsVisibility;
  transport: PlatformTypesRegistryMapValueInstance2;
  updateMenuState: PlatformTypesNativeAPIUpdateUiClientUpdateMenuState;
  updateTitlebarHeight: PlatformTypesNativeAPIUpdateUiClientUpdateTitlebarHeight;
}

export type PlatformTypesNativeAPIUpdateUiClientOptions = Record<string, unknown>;

export type PlatformTypesNativeAPIUpdateUiClientSetButtonsVisibility = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesNativeAPIUpdateUiClientUpdateMenuState = (arg0: any, arg1: any) => unknown;

export type PlatformTypesNativeAPIUpdateUiClientUpdateTitlebarHeight = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesOfflineAPI {
  _cache: Map<unknown, unknown>;
  _canDownload: PlatformTypesOfflineAPICanDownload;
  _events: PlatformTypesOfflineAPIEvents;
  _offline: PlatformTypesOfflineAPIOffline;
  _productState: PlatformTypesOfflineAPIProductState;
  _storage: PlatformTypesOfflineAPIStorage;
  _username: string;
  _yourLibrary: PlatformTypesOfflineAPIYourLibrary;
  addDownload: PlatformTypesOfflineAPIAddDownload;
  getAvailabilitySync: PlatformTypesOfflineAPIGetAvailabilitySync;
  getCapabilities: PlatformTypesOfflineAPIGetCapabilities;
  getContextForDevices: PlatformTypesOfflineAPIGetContextForDevices;
  getDownloads: PlatformTypesOfflineAPIGetDownloads;
  getEvents: PlatformTypesOfflineAPIGetEvents;
  getStatistics: PlatformTypesOfflineAPIGetStatistics;
  removeAllDownloads: PlatformTypesOfflineAPIRemoveAllDownloads;
  removeCache: PlatformTypesOfflineAPIRemoveCache;
  removeDownload: PlatformTypesOfflineAPIRemoveDownload;
}

export type PlatformTypesOfflineAPIAddDownload = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPICanDownload = (arg0: any) => unknown;

export interface PlatformTypesOfflineAPIEvents {
  _cache: Map<unknown, unknown>;
  _cosmos: PlatformTypesRegistryMapValueInstance;
  _emitter: PlatformTypesOfflineAPIEventsEmitter;
  _offline: PlatformTypesOfflineAPIOffline;
  _productState: PlatformTypesOfflineAPIProductState;
  _username: string;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
  setupCapabilitiesEvents: PlatformTypesOfflineAPIEventsSetupCapabilitiesEvents;
  setupConnectivityEvents: PlatformTypesOfflineAPIEventsSetupConnectivityEvents;
  setupContextAndItemAvailabilityEvents: PlatformTypesOfflineAPIEventsSetupContextAndItemAvailabilityEvents;
  setupContextProgressEvents: PlatformTypesOfflineAPIEventsSetupContextProgressEvents;
  setupErrorEvents: PlatformTypesOfflineAPIEventsSetupErrorEvents;
  setupTotalProgressEvents: PlatformTypesOfflineAPIEventsSetupTotalProgressEvents;
}

export interface PlatformTypesOfflineAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesOfflineAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesOfflineAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesOfflineAPIEventsEmitterListeners {
  error: Array<PlatformTypesOfflineAPIEventsEmitterListenersErrorItem>;
  update_capabilities: Array<PlatformTypesOfflineAPIEventsEmitterListenersUpdateCapabilitiesItem>;
}

export interface PlatformTypesOfflineAPIEventsEmitterListenersErrorItem {
  listener: PlatformTypesOfflineAPIEventsEmitterListenersErrorItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterListenersErrorItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterListenersErrorItemListener = (arg0: any) => unknown;

export type PlatformTypesOfflineAPIEventsEmitterListenersErrorItemOptions = Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterListenersUpdateCapabilitiesItem {
  listener: PlatformTypesOfflineAPIEventsEmitterListenersUpdateCapabilitiesItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterListenersUpdateCapabilitiesItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterListenersUpdateCapabilitiesItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesOfflineAPIEventsEmitterListenersUpdateCapabilitiesItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListeners {
  add: PlatformTypesOfflineAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAdd {
  error: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersAddErrorItem>;
  update_availability: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateAvailabilityItem>;
  update_capabilities: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateCapabilitiesItem>;
  update_connectivity: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateConnectivityItem>;
  update_context_progress: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateContextProgressItem>;
  update_total_progress: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateTotalProgressItem>;
}

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAddErrorItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddErrorItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddErrorItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddErrorItemListener = () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddErrorItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateAvailabilityItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateAvailabilityItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateAvailabilityItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateAvailabilityItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateAvailabilityItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateCapabilitiesItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateCapabilitiesItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateCapabilitiesItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateCapabilitiesItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateCapabilitiesItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateConnectivityItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateConnectivityItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateConnectivityItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateConnectivityItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateConnectivityItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateContextProgressItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateContextProgressItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateContextProgressItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateContextProgressItemListener =
  (arg0: any) => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateContextProgressItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateTotalProgressItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateTotalProgressItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateTotalProgressItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateTotalProgressItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersAddUpdateTotalProgressItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemove {
  error: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveErrorItem>;
  update_availability: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateAvailabilityItem>;
  update_capabilities: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateCapabilitiesItem>;
  update_connectivity: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateConnectivityItem>;
  update_context_progress: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateContextProgressItem>;
  update_total_progress: Array<PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateTotalProgressItem>;
}

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveErrorItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveErrorItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveErrorItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveErrorItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveErrorItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateAvailabilityItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateAvailabilityItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateAvailabilityItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateAvailabilityItemListener =
  (arg0: any) => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateAvailabilityItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateCapabilitiesItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateCapabilitiesItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateCapabilitiesItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateCapabilitiesItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateCapabilitiesItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateConnectivityItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateConnectivityItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateConnectivityItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateConnectivityItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateConnectivityItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateContextProgressItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateContextProgressItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateContextProgressItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateContextProgressItemListener =
  (arg0: any) => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateContextProgressItemOptions =
  Record<string, unknown>;

export interface PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateTotalProgressItem {
  listener: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateTotalProgressItemListener;
  options: PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateTotalProgressItemOptions;
}

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateTotalProgressItemListener =
  () => unknown;

export type PlatformTypesOfflineAPIEventsEmitterMetaListenersRemoveUpdateTotalProgressItemOptions =
  Record<string, unknown>;

export type PlatformTypesOfflineAPIEventsSetupCapabilitiesEvents = () => unknown;

export type PlatformTypesOfflineAPIEventsSetupConnectivityEvents = () => unknown;

export type PlatformTypesOfflineAPIEventsSetupContextAndItemAvailabilityEvents = () => unknown;

export type PlatformTypesOfflineAPIEventsSetupContextProgressEvents = () => unknown;

export type PlatformTypesOfflineAPIEventsSetupErrorEvents = () => unknown;

export type PlatformTypesOfflineAPIEventsSetupTotalProgressEvents = () => unknown;

export type PlatformTypesOfflineAPIGetAvailabilitySync = (arg0: any) => unknown;

export type PlatformTypesOfflineAPIGetCapabilities = () => unknown;

export type PlatformTypesOfflineAPIGetContextForDevices = (arg0: any) => unknown;

export type PlatformTypesOfflineAPIGetDownloads = () => unknown;

export type PlatformTypesOfflineAPIGetEvents = () => unknown;

export type PlatformTypesOfflineAPIGetStatistics = () => unknown;

export interface PlatformTypesOfflineAPIOffline {
  addDownload: PlatformTypesOfflineAPIOfflineAddDownload;
  getContextForDevices: PlatformTypesOfflineAPIOfflineGetContextForDevices;
  getContexts: PlatformTypesOfflineAPIOfflineGetContexts;
  getContextsProgress: PlatformTypesOfflineAPIOfflineGetContextsProgress;
  getDevices: PlatformTypesOfflineAPIOfflineGetDevices;
  getItems: PlatformTypesOfflineAPIOfflineGetItems;
  getLocalDevice: PlatformTypesOfflineAPIOfflineGetLocalDevice;
  getOfflineLicenseInfo: PlatformTypesOfflineAPIOfflineGetOfflineLicenseInfo;
  getOfflinePlaybackStatus: PlatformTypesOfflineAPIOfflineGetOfflinePlaybackStatus;
  getTotalProgress: PlatformTypesOfflineAPIOfflineGetTotalProgress;
  options: PlatformTypesOfflineAPIOfflineOptions;
  removeAllDownloads: PlatformTypesOfflineAPIOfflineRemoveAllDownloads;
  removeDownload: PlatformTypesOfflineAPIOfflineRemoveDownload;
  setOfflinePlaybackAllowed: PlatformTypesOfflineAPIOfflineSetOfflinePlaybackAllowed;
  subscribeContextForDevices: PlatformTypesOfflineAPIOfflineSubscribeContextForDevices;
  subscribeContexts: PlatformTypesOfflineAPIOfflineSubscribeContexts;
  subscribeContextsProgress: PlatformTypesOfflineAPIOfflineSubscribeContextsProgress;
  subscribeDevicesWithContext: PlatformTypesOfflineAPIOfflineSubscribeDevicesWithContext;
  subscribeError: PlatformTypesOfflineAPIOfflineSubscribeError;
  subscribeItems: PlatformTypesOfflineAPIOfflineSubscribeItems;
  subscribeOfflinePlaybackStatus: PlatformTypesOfflineAPIOfflineSubscribeOfflinePlaybackStatus;
  subscribeTotalProgress: PlatformTypesOfflineAPIOfflineSubscribeTotalProgress;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesOfflineAPIOfflineAddDownload = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetContextForDevices = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetContexts = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetContextsProgress = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetDevices = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetItems = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetLocalDevice = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetOfflineLicenseInfo = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineGetOfflinePlaybackStatus = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesOfflineAPIOfflineGetTotalProgress = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineOptions = Record<string, unknown>;

export type PlatformTypesOfflineAPIOfflineRemoveAllDownloads = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineRemoveDownload = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineSetOfflinePlaybackAllowed = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeContextForDevices = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeContexts = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeContextsProgress = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeDevicesWithContext = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeError = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeItems = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeOfflinePlaybackStatus = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesOfflineAPIOfflineSubscribeTotalProgress = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesOfflineAPIProductState {
  delOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiDelOverridesValues;
  getValues: PlatformTypesRegistryMapValueInstanceProductStateApiGetValues;
  options: PlatformTypesOfflineAPIProductStateOptions;
  putOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutOverridesValues;
  putValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutValues;
  putValuesSync: PlatformTypesRegistryMapValueInstanceProductStateApiPutValuesSync;
  subValues: PlatformTypesRegistryMapValueInstanceProductStateApiSubValues;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesOfflineAPIProductStateOptions = Record<string, unknown>;

export type PlatformTypesOfflineAPIRemoveAllDownloads = () => unknown;

export type PlatformTypesOfflineAPIRemoveCache = () => unknown;

export type PlatformTypesOfflineAPIRemoveDownload = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesOfflineAPIStorage {
  deleteExpiredItems: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceDeleteExpiredItems;
  deleteUnlockedItems: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceDeleteUnlockedItems;
  getCacheSizeLimit: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetCacheSizeLimit;
  getFileRanges: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetFileRanges;
  getStats: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetStats;
  options: PlatformTypesOfflineAPIStorageOptions;
  setCacheSizeLimit: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceSetCacheSizeLimit;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesOfflineAPIStorageOptions = Record<string, unknown>;

export interface PlatformTypesOfflineAPIYourLibrary {
  all: PlatformTypesOfflineAPIYourLibraryAll;
  contains: PlatformTypesOfflineAPIYourLibraryContains;
  decorate: PlatformTypesOfflineAPIYourLibraryDecorate;
  getKeys: PlatformTypesOfflineAPIYourLibraryGetKeys;
  isCurated: PlatformTypesOfflineAPIYourLibraryIsCurated;
  movePin: PlatformTypesOfflineAPIYourLibraryMovePin;
  options: PlatformTypesOfflineAPIYourLibraryOptions;
  pin: PlatformTypesOfflineAPIYourLibraryPin;
  streamAll: PlatformTypesOfflineAPIYourLibraryStreamAll;
  streamContains: PlatformTypesOfflineAPIYourLibraryStreamContains;
  streamDecorate: PlatformTypesOfflineAPIYourLibraryStreamDecorate;
  streamIsCurated: PlatformTypesOfflineAPIYourLibraryStreamIsCurated;
  transport: PlatformTypesRegistryMapValueInstance2;
  unPin: PlatformTypesOfflineAPIYourLibraryUnPin;
}

export type PlatformTypesOfflineAPIYourLibraryAll = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryDecorate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryGetKeys = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryIsCurated = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryMovePin = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryOptions = Record<string, unknown>;

export type PlatformTypesOfflineAPIYourLibraryPin = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryStreamAll = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryStreamContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryStreamDecorate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryStreamIsCurated = (arg0: any, arg1: any) => unknown;

export type PlatformTypesOfflineAPIYourLibraryUnPin = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlatformData {
  app_platform: string;
  client_capabilities: PlatformTypesPlatformDataClientCapabilities;
  client_name: string;
  client_variant: string;
  client_version_quadruple: string;
  client_version_quintuple: string;
  client_version_triple: string;
  event_sender_context_information: PlatformTypesPlatformDataEventSenderContextInformation;
  is_developer_mode: boolean;
  os_name: string;
  os_settings: PlatformTypesPlatformDataOsSettings;
  os_version: string;
  remote_config_client_id: string;
}

export interface PlatformTypesPlatformDataClientCapabilities {
  can_autostart: boolean;
  can_minimize_or_exit_on_close: boolean;
  can_restart: boolean;
  can_show_system_media_controls: boolean;
  can_show_track_notifications: boolean;
}

export interface PlatformTypesPlatformDataEventSenderContextInformation {
  client_id: string;
  client_version_int: number;
  client_version_string: string;
  device_id: string;
  device_manufacturer: string;
  device_model: string;
  installation_id: string;
  os_version: string;
  platform_type: string;
}

export interface PlatformTypesPlatformDataOsSettings {
  double_click_interval_ms: number;
  scroller_style: string;
}

export interface PlatformTypesPlaybackFiltersAPI {
  disableNormalizationOverride: PlatformTypesPlaybackFiltersAPIDisableNormalizationOverride;
  getDevices: PlatformTypesPlaybackFiltersAPIGetDevices;
  getFilterState: PlatformTypesPlaybackFiltersAPIGetFilterState;
  getFiltersEvents: PlatformTypesPlaybackFiltersAPIGetFiltersEvents;
  getSavedDevices: PlatformTypesPlaybackFiltersAPIGetSavedDevices;
  isAvailable: PlatformTypesPlaybackFiltersAPIIsAvailable;
  isNormalizationOverriden: PlatformTypesPlaybackFiltersAPIIsNormalizationOverriden;
  removeCurrentDevice: PlatformTypesPlaybackFiltersAPIRemoveCurrentDevice;
  setCurrentDevice: PlatformTypesPlaybackFiltersAPISetCurrentDevice;
}

export type PlatformTypesPlaybackFiltersAPIDisableNormalizationOverride = () => unknown;

export type PlatformTypesPlaybackFiltersAPIGetDevices = () => unknown;

export type PlatformTypesPlaybackFiltersAPIGetFiltersEvents = () => unknown;

export type PlatformTypesPlaybackFiltersAPIGetFilterState = () => unknown;

export type PlatformTypesPlaybackFiltersAPIGetSavedDevices = () => unknown;

export type PlatformTypesPlaybackFiltersAPIIsAvailable = () => unknown;

export type PlatformTypesPlaybackFiltersAPIIsNormalizationOverriden = () => unknown;

export type PlatformTypesPlaybackFiltersAPIRemoveCurrentDevice = () => unknown;

export type PlatformTypesPlaybackFiltersAPISetCurrentDevice = () => unknown;

export interface PlatformTypesPlayerAPI {
  _collection: PlatformTypesPlayerAPICollection;
  _contextPlayer: PlatformTypesPlayerAPIContextPlayer;
  _contextualShuffle: PlatformTypesContextualShuffleAPI;
  _cosmos: PlatformTypesPlayerAPICosmos;
  _defaultFeatureVersion: string;
  _events: PlatformTypesPlayerAPIEvents;
  _isCentralizedSmartShuffleEnabled: boolean;
  _isLegacySmartShuffleEnabled: boolean;
  _isSleepTimerEnabled: boolean;
  _playlistPlayServiceClient: PlatformTypesPlayerAPIPlaylistPlayServiceClient;
  _playlistResyncerAPI: PlatformTypesPlaylistResyncAPI;
  _playlistServiceClient: PlatformTypesPlayerAPIPlaylistServiceClient;
  _queue: PlatformTypesPlayerAPIQueue;
  _sleepTimerCore: null;
  _smartShuffleEligibility: PlatformTypesPlayerAPISmartShuffleEligibility;
  _state: PlatformTypesPlayerAPIState;
  addToQueue: PlatformTypesPlayerAPIAddToQueue;
  canPlayEncryptedContent: PlatformTypesPlayerAPICanPlayEncryptedContent;
  canSendSignal: PlatformTypesPlayerAPICanSendSignal;
  clearQueue: PlatformTypesPlayerAPIClearQueue;
  getCapabilities: PlatformTypesPlayerAPIGetCapabilities;
  getEvents: PlatformTypesPlayerAPIGetEvents;
  getQueue: PlatformTypesPlayerAPIGetQueue;
  getReferrer: PlatformTypesPlayerAPIGetReferrer;
  getSleepTimerCore: PlatformTypesPlayerAPIGetSleepTimerCore;
  getState: PlatformTypesPlayerAPIGetState;
  insertIntoQueue: PlatformTypesPlayerAPIInsertIntoQueue;
  pause: PlatformTypesPlayerAPIPause;
  play: PlatformTypesPlayerAPIPlay;
  playAsNextInQueue: PlatformTypesPlayerAPIPlayAsNextInQueue;
  referrer: string;
  refreshCurrentContext: PlatformTypesPlayerAPIRefreshCurrentContext;
  removeFromQueue: PlatformTypesPlayerAPIRemoveFromQueue;
  reorderQueue: PlatformTypesPlayerAPIReorderQueue;
  resume: PlatformTypesPlayerAPIResume;
  seekBackward: PlatformTypesPlayerAPISeekBackward;
  seekBy: PlatformTypesPlayerAPISeekBy;
  seekForward: PlatformTypesPlayerAPISeekForward;
  seekTo: PlatformTypesPlayerAPISeekTo;
  sendSignal: PlatformTypesPlayerAPISendSignal;
  setDefaultFeatureVersion: PlatformTypesPlayerAPISetDefaultFeatureVersion;
  setReferrer: PlatformTypesPlayerAPISetReferrer;
  setRepeat: PlatformTypesPlayerAPISetRepeat;
  setShuffle: PlatformTypesPlayerAPISetShuffle;
  setSleepTimer: PlatformTypesPlayerAPISetSleepTimer;
  setSpeed: PlatformTypesPlayerAPISetSpeed;
  skipTo: PlatformTypesPlayerAPISkipTo;
  skipToNext: PlatformTypesPlayerAPISkipToNext;
  skipToPrevious: PlatformTypesPlayerAPISkipToPrevious;
  updateContext: PlatformTypesPlayerAPIUpdateContext;
}

export type PlatformTypesPlayerAPIAddToQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICanPlayEncryptedContent = () => unknown;

export type PlatformTypesPlayerAPICanSendSignal = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIClearQueue = () => unknown;

export interface PlatformTypesPlayerAPICollection {
  add: PlatformTypesPlayerAPICollectionAdd;
  addUnplayed: PlatformTypesPlayerAPICollectionAddUnplayed;
  ban: PlatformTypesPlayerAPICollectionBan;
  banGlobal: PlatformTypesPlayerAPICollectionBanGlobal;
  banInPlayContext: PlatformTypesPlayerAPICollectionBanInPlayContext;
  contains: PlatformTypesPlayerAPICollectionContains;
  decorate: PlatformTypesPlayerAPICollectionDecorate;
  getAlbumTrackList: PlatformTypesPlayerAPICollectionGetAlbumTrackList;
  getAlbumView: PlatformTypesPlayerAPICollectionGetAlbumView;
  getArtistTrackList: PlatformTypesPlayerAPICollectionGetArtistTrackList;
  getArtistView: PlatformTypesPlayerAPICollectionGetArtistView;
  getBans: PlatformTypesPlayerAPICollectionGetBans;
  getBucketSyncStatus: PlatformTypesPlayerAPICollectionGetBucketSyncStatus;
  getEpisodeList: PlatformTypesPlayerAPICollectionGetEpisodeList;
  getResumePoints: PlatformTypesPlayerAPICollectionGetResumePoints;
  getTrackList: PlatformTypesPlayerAPICollectionGetTrackList;
  getTrackListMetadata: PlatformTypesPlayerAPICollectionGetTrackListMetadata;
  getUnplayedEpisodes: PlatformTypesPlayerAPICollectionGetUnplayedEpisodes;
  isSnoozed: PlatformTypesPlayerAPICollectionIsSnoozed;
  offlineAlbum: PlatformTypesPlayerAPICollectionOfflineAlbum;
  offlineArtist: PlatformTypesPlayerAPICollectionOfflineArtist;
  offlineTracks: PlatformTypesPlayerAPICollectionOfflineTracks;
  options: PlatformTypesPlayerAPICollectionOptions;
  playAlbum: PlatformTypesPlayerAPICollectionPlayAlbum;
  playArtist: PlatformTypesPlayerAPICollectionPlayArtist;
  playTracks: PlatformTypesPlayerAPICollectionPlayTracks;
  remove: PlatformTypesPlayerAPICollectionRemove;
  removeOfflineAlbum: PlatformTypesPlayerAPICollectionRemoveOfflineAlbum;
  removeOfflineArtist: PlatformTypesPlayerAPICollectionRemoveOfflineArtist;
  removeOfflineTracks: PlatformTypesPlayerAPICollectionRemoveOfflineTracks;
  removeUnplayed: PlatformTypesPlayerAPICollectionRemoveUnplayed;
  snooze: PlatformTypesPlayerAPICollectionSnooze;
  streamAlbumTrackList: PlatformTypesPlayerAPICollectionStreamAlbumTrackList;
  streamAlbumView: PlatformTypesPlayerAPICollectionStreamAlbumView;
  streamArtistTrackList: PlatformTypesPlayerAPICollectionStreamArtistTrackList;
  streamArtistView: PlatformTypesPlayerAPICollectionStreamArtistView;
  streamBans: PlatformTypesPlayerAPICollectionStreamBans;
  streamChanges: PlatformTypesPlayerAPICollectionStreamChanges;
  streamContains: PlatformTypesPlayerAPICollectionStreamContains;
  streamDecorate: PlatformTypesPlayerAPICollectionStreamDecorate;
  streamEpisodeList: PlatformTypesPlayerAPICollectionStreamEpisodeList;
  streamTagsInfo: PlatformTypesPlayerAPICollectionStreamTagsInfo;
  streamTrackList: PlatformTypesPlayerAPICollectionStreamTrackList;
  streamTrackListMetadata: PlatformTypesPlayerAPICollectionStreamTrackListMetadata;
  streamUnplayedEpisodes: PlatformTypesPlayerAPICollectionStreamUnplayedEpisodes;
  tracksOfflineStatus: PlatformTypesPlayerAPICollectionTracksOfflineStatus;
  transport: PlatformTypesRegistryMapValueInstance2;
  unban: PlatformTypesPlayerAPICollectionUnban;
  unbanGlobal: PlatformTypesPlayerAPICollectionUnbanGlobal;
  unbanInPlayContext: PlatformTypesPlayerAPICollectionUnbanInPlayContext;
  unsnooze: PlatformTypesPlayerAPICollectionUnsnooze;
}

export type PlatformTypesPlayerAPICollectionAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionAddUnplayed = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionBan = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionBanGlobal = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionBanInPlayContext = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionDecorate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetAlbumTrackList = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetAlbumView = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetArtistTrackList = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetArtistView = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetBans = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetBucketSyncStatus = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetEpisodeList = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetResumePoints = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetTrackList = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionGetTrackListMetadata = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPICollectionGetUnplayedEpisodes = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionIsSnoozed = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionOfflineAlbum = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionOfflineArtist = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionOfflineTracks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionOptions = Record<string, unknown>;

export type PlatformTypesPlayerAPICollectionPlayAlbum = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionPlayArtist = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionPlayTracks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionRemoveOfflineAlbum = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionRemoveOfflineArtist = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionRemoveOfflineTracks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionRemoveUnplayed = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionSnooze = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamAlbumTrackList = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPICollectionStreamAlbumView = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamArtistTrackList = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPICollectionStreamArtistView = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamBans = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamChanges = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamDecorate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamEpisodeList = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamTagsInfo = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamTrackList = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionStreamTrackListMetadata = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPICollectionStreamUnplayedEpisodes = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPICollectionTracksOfflineStatus = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionUnban = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionUnbanGlobal = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionUnbanInPlayContext = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICollectionUnsnooze = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlayerAPIContextPlayer {
  addToQueue: PlatformTypesPlayerAPIContextPlayerAddToQueue;
  deleteSession: PlatformTypesPlayerAPIContextPlayerDeleteSession;
  getError: PlatformTypesPlayerAPIContextPlayerGetError;
  getPlayHistory: PlatformTypesPlayerAPIContextPlayerGetPlayHistory;
  getPositionState: PlatformTypesPlayerAPIContextPlayerGetPositionState;
  getQueue: PlatformTypesPlayerAPIContextPlayerGetQueue;
  getState: PlatformTypesPlayerAPIContextPlayerGetState;
  options: PlatformTypesPlayerAPIContextPlayerOptions;
  pause: PlatformTypesPlayerAPIContextPlayerPause;
  play: PlatformTypesPlayerAPIContextPlayerPlay;
  playAsNextInQueue: PlatformTypesPlayerAPIContextPlayerPlayAsNextInQueue;
  playPrepared: PlatformTypesPlayerAPIContextPlayerPlayPrepared;
  preparePlay: PlatformTypesPlayerAPIContextPlayerPreparePlay;
  resume: PlatformTypesPlayerAPIContextPlayerResume;
  seekTo: PlatformTypesPlayerAPIContextPlayerSeekTo;
  setOptions: PlatformTypesPlayerAPIContextPlayerSetOptions;
  setQueue: PlatformTypesPlayerAPIContextPlayerSetQueue;
  setRepeatingContext: PlatformTypesPlayerAPIContextPlayerSetRepeatingContext;
  setRepeatingTrack: PlatformTypesPlayerAPIContextPlayerSetRepeatingTrack;
  setShufflingContext: PlatformTypesPlayerAPIContextPlayerSetShufflingContext;
  setSleepTimer: PlatformTypesPlayerAPIContextPlayerSetSleepTimer;
  signal: PlatformTypesPlayerAPIContextPlayerSignal;
  skipNext: PlatformTypesPlayerAPIContextPlayerSkipNext;
  skipPrev: PlatformTypesPlayerAPIContextPlayerSkipPrev;
  stop: PlatformTypesPlayerAPIContextPlayerStop;
  transport: PlatformTypesRegistryMapValueInstance2;
  updateContext: PlatformTypesPlayerAPIContextPlayerUpdateContext;
  updateContextPage: PlatformTypesPlayerAPIContextPlayerUpdateContextPage;
  updateContextTrack: PlatformTypesPlayerAPIContextPlayerUpdateContextTrack;
  updateViewUri: PlatformTypesPlayerAPIContextPlayerUpdateViewUri;
}

export type PlatformTypesPlayerAPIContextPlayerAddToQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerDeleteSession = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerGetError = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerGetPlayHistory = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerGetPositionState = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerGetQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerGetState = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerOptions = Record<string, unknown>;

export type PlatformTypesPlayerAPIContextPlayerPause = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerPlay = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerPlayAsNextInQueue = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIContextPlayerPlayPrepared = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerPreparePlay = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerResume = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSeekTo = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSetOptions = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSetQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSetRepeatingContext = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSetRepeatingTrack = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSetShufflingContext = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSetSleepTimer = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSignal = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSkipNext = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerSkipPrev = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerStop = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerUpdateContext = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIContextPlayerUpdateContextPage = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIContextPlayerUpdateContextTrack = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIContextPlayerUpdateViewUri = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlayerAPICosmos {
  del: PlatformTypesPlayerAPICosmosDel;
  get: PlatformTypesPlayerAPICosmosGet;
  head: PlatformTypesRegistryMapValueInstanceHead;
  patch: PlatformTypesPlayerAPICosmosPatch;
  post: PlatformTypesPlayerAPICosmosPost;
  postSub: PlatformTypesRegistryMapValueInstancePostSub;
  put: PlatformTypesPlayerAPICosmosPut;
  request: PlatformTypesRegistryMapValueInstanceRequest;
  requestFactory: PlatformTypesRegistryMapValueInstanceRequestFactory;
  resolve: PlatformTypesRegistryMapValueInstanceResolve;
  resolver: PlatformTypesRegistryMapValueInstanceResolver;
  sub: PlatformTypesRegistryMapValueInstanceSub;
}

export type PlatformTypesPlayerAPICosmosDel = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICosmosGet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICosmosPatch = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICosmosPost = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPICosmosPut = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlayerAPIEvents {
  _client: PlatformTypesPlayerAPIContextPlayer;
  _emitter: PlatformTypesPlayerAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitPauseSync: PlatformTypesPlayerAPIEventsEmitPauseSync;
  emitPlaySync: PlatformTypesPlayerAPIEventsEmitPlaySync;
  emitQueueActionComplete: PlatformTypesPlayerAPIEventsEmitQueueActionComplete;
  emitQueueActionSync: PlatformTypesPlayerAPIEventsEmitQueueActionSync;
  emitQueueUpdate: PlatformTypesPlayerAPIEventsEmitQueueUpdate;
  emitResumeSync: PlatformTypesPlayerAPIEventsEmitResumeSync;
  emitSkipToNextSync: PlatformTypesPlayerAPIEventsEmitSkipToNextSync;
  emitSkipToPreviousSync: PlatformTypesPlayerAPIEventsEmitSkipToPreviousSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export type PlatformTypesPlayerAPIEventsEmitPauseSync = () => unknown;

export type PlatformTypesPlayerAPIEventsEmitPlaySync = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitQueueActionComplete = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitQueueActionSync = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitQueueUpdate = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitResumeSync = () => unknown;

export type PlatformTypesPlayerAPIEventsEmitSkipToNextSync = () => unknown;

export type PlatformTypesPlayerAPIEventsEmitSkipToPreviousSync = () => unknown;

export interface PlatformTypesPlayerAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesPlayerAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesPlayerAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesPlayerAPIEventsEmitterListeners {
  action: Array<
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem2
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem3
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem4
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem5
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem6
    | PlatformTypesPlayerAPIEventsEmitterListenersActionItem7
  >;
  error: Array<PlatformTypesPlayerAPIEventsEmitterListenersErrorItem>;
  ready: Array<PlatformTypesPlayerAPIEventsEmitterListenersReadyItem>;
  update: Array<
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem10
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem2
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem3
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem4
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem5
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem6
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem7
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem8
    | PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem9
  >;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem2 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener2;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions2;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem3 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener3;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions3;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem4 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener4;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions4;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem5 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener5;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions5;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem6 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener6;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions6;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersActionItem7 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener7;
  options: PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions7;
}

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener3 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener4 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener5 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener6 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemListener7 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions = Record<string, unknown>;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions2 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions3 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions4 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions5 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions6 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersActionItemOptions7 = Record<
  string,
  unknown
>;

export interface PlatformTypesPlayerAPIEventsEmitterListenersErrorItem {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersErrorItemListener;
  options: PlatformTypesPlayerAPIEventsEmitterListenersErrorItemOptions;
}

export type PlatformTypesPlayerAPIEventsEmitterListenersErrorItemListener = () => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersErrorItemOptions = Record<string, unknown>;

export interface PlatformTypesPlayerAPIEventsEmitterListenersReadyItem {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersReadyItemListener;
  options: PlatformTypesPlayerAPIEventsEmitterListenersReadyItemOptions;
}

export type PlatformTypesPlayerAPIEventsEmitterListenersReadyItemListener = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersReadyItemOptions = Record<string, unknown>;

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem10 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener10;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions10;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem2 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener2;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions2;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem3 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener3;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions3;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem4 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener4;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions4;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem5 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener5;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions5;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem6 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener6;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions6;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem7 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener7;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions7;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem8 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener8;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions8;
}

export interface PlatformTypesPlayerAPIEventsEmitterListenersUpdateItem9 {
  listener: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener9;
  options: PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions9;
}

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener10 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener3 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener4 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener5 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener6 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener7 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener8 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemListener9 = (
  arg0: any,
) => unknown;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions = Record<string, unknown>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions10 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions2 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions3 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions4 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions5 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions6 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions7 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions8 = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPIEventsEmitterListenersUpdateItemOptions9 = Record<
  string,
  unknown
>;

export interface PlatformTypesPlayerAPIEventsEmitterMetaListeners {
  add: PlatformTypesPlayerAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesPlayerAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesPlayerAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesPlayerAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesPlayerAPIGetCapabilities = () => unknown;

export type PlatformTypesPlayerAPIGetEvents = () => unknown;

export type PlatformTypesPlayerAPIGetQueue = () => unknown;

export type PlatformTypesPlayerAPIGetReferrer = () => unknown;

export type PlatformTypesPlayerAPIGetSleepTimerCore = () => unknown;

export type PlatformTypesPlayerAPIGetState = () => unknown;

export type PlatformTypesPlayerAPIInsertIntoQueue = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesPlayerAPIPause = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIPlay = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIPlayAsNextInQueue = (arg0: any) => unknown;

export interface PlatformTypesPlayerAPIPlaylistPlayServiceClient {
  getPlayContext: PlatformTypesPlayerAPIPlaylistPlayServiceClientGetPlayContext;
  options: PlatformTypesPlayerAPIPlaylistPlayServiceClientOptions;
  play: PlatformTypesPlayerAPIPlaylistPlayServiceClientPlay;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlayerAPIPlaylistPlayServiceClientGetPlayContext = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPIPlaylistPlayServiceClientOptions = Record<string, unknown>;

export type PlatformTypesPlayerAPIPlaylistPlayServiceClientPlay = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlayerAPIPlaylistServiceClient {
  clearToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken;
  contains: PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains;
  emitItemSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals;
  emitSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals;
  getMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers;
  invalidateRevisions: PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions;
  modify: PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify;
  options: PlatformTypesPlayerAPIPlaylistServiceClientOptions;
  requestLenses: PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses;
  resync: PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync;
  setBasePermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission;
  setMemberPermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission;
  setOfflineState: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState;
  setToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken;
  signal: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal;
  signalItem: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem;
  subscribeToMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlayerAPIPlaylistServiceClientOptions = Record<string, unknown>;

export interface PlatformTypesPlayerAPIQueue {
  _client: PlatformTypesPlayerAPIContextPlayer;
  _events: PlatformTypesPlayerAPIEvents;
  _queue: PlatformTypesPlayerAPIQueueQueue;
  _queueState: PlatformTypesPlayerAPIQueueQueueState;
  addToQueue: PlatformTypesPlayerAPIQueueAddToQueue;
  clearQueue: PlatformTypesPlayerAPIQueueClearQueue;
  convertQueueState: PlatformTypesPlayerAPIQueueConvertQueueState;
  createQueueItem: PlatformTypesPlayerAPIQueueCreateQueueItem;
  getInternalQueue: PlatformTypesPlayerAPIQueueGetInternalQueue;
  getQueue: PlatformTypesPlayerAPIQueueGetQueue;
  insertIntoQueue: PlatformTypesPlayerAPIQueueInsertIntoQueue;
  isQueued: PlatformTypesPlayerAPIQueueIsQueued;
  isSameItem: PlatformTypesPlayerAPIQueueIsSameItem;
  markAsQueued: PlatformTypesPlayerAPIQueueMarkAsQueued;
  removeFromQueue: PlatformTypesPlayerAPIQueueRemoveFromQueue;
  reorderQueue: PlatformTypesPlayerAPIQueueReorderQueue;
  timeoutId: number;
}

export type PlatformTypesPlayerAPIQueueAddToQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIQueueClearQueue = () => unknown;

export type PlatformTypesPlayerAPIQueueConvertQueueState = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIQueueCreateQueueItem = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIQueueGetInternalQueue = () => unknown;

export type PlatformTypesPlayerAPIQueueGetQueue = () => unknown;

export type PlatformTypesPlayerAPIQueueInsertIntoQueue = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlayerAPIQueueIsQueued = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIQueueIsSameItem = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIQueueMarkAsQueued = (arg0: any) => unknown;

export interface PlatformTypesPlayerAPIQueueQueue {
  nextTracks: Array<unknown>;
  prevTracks: Array<unknown>;
  queueRevision: bigint;
  track: undefined;
}

export interface PlatformTypesPlayerAPIQueueQueueState {
  current: null;
  nextUp: Array<unknown>;
  queued: Array<unknown>;
}

export type PlatformTypesPlayerAPIQueueRemoveFromQueue = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIQueueReorderQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIRefreshCurrentContext = () => unknown;

export type PlatformTypesPlayerAPIRemoveFromQueue = (arg0: any) => unknown;

export type PlatformTypesPlayerAPIReorderQueue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPIResume = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISeekBackward = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISeekBy = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISeekForward = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISeekTo = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISendSignal = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlayerAPISetDefaultFeatureVersion = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISetReferrer = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISetRepeat = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISetShuffle = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISetSleepTimer = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISetSpeed = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISkipTo = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISkipToNext = (arg0: any) => unknown;

export type PlatformTypesPlayerAPISkipToPrevious = () => unknown;

export interface PlatformTypesPlayerAPISmartShuffleEligibility {
  _metadataServiceClient: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClient;
  getEligibility: PlatformTypesPlayerAPISmartShuffleEligibilityGetEligibility;
}

export type PlatformTypesPlayerAPISmartShuffleEligibilityGetEligibility = (arg0: any) => unknown;

export interface PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClient {
  expire: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientExpire;
  fetch: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientFetch;
  observe: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientObserve;
  options: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientOptions;
  purge: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientPurge;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientExpire = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientFetch = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientObserve = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientOptions = Record<
  string,
  unknown
>;

export type PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientPurge = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesPlayerAPIState {
  context: PlatformTypesPlayerAPIStateContext;
  duration: null;
  format: null;
  hasContext: boolean;
  index: PlatformTypesPlayerAPIStateIndex;
  isBuffering: boolean;
  isPaused: boolean;
  item: null;
  nextItems: Array<unknown>;
  playbackId: null;
  playbackQuality: PlatformTypesPlayerAPIStatePlaybackQuality;
  positionAsOfTimestamp: number;
  previousItems: Array<unknown>;
  repeat: number;
  restrictions: PlatformTypesPlayerAPIStateRestrictions;
  sessionId: string;
  shuffle: boolean;
  signals: Array<string>;
  sleepTimer: PlatformTypesPlayerAPIStateSleepTimer;
  smartShuffle: boolean;
  speed: number;
  speedEsperanto: number;
  timestamp: number;
}

export interface PlatformTypesPlayerAPIStateContext {
  metadata: PlatformTypesPlayerAPIStateContextMetadata;
  uri: string;
  url: string;
}

export interface PlatformTypesPlayerAPIStateContextMetadata {
  "player.arch": string;
}

export interface PlatformTypesPlayerAPIStateIndex {
  itemIndex: null;
  pageIndex: null;
  pageURI: null;
}

export interface PlatformTypesPlayerAPIStatePlaybackQuality {
  bitrateLevel: number;
  losslessStatus: number;
  strategy: number;
  targetBitrateAvailable: boolean;
  targetBitrateLevel: number;
}

export interface PlatformTypesPlayerAPIStateRestrictions {
  canPause: boolean;
  canResume: boolean;
  canSeek: boolean;
  canSkipNext: boolean;
  canSkipPrevious: boolean;
  canToggleRepeatContext: boolean;
  canToggleRepeatTrack: boolean;
  canToggleShuffle: boolean;
  canToggleSmartShuffle: boolean;
  disallowAddToQueueReasons: Array<unknown>;
  disallowPausingReasons: Array<string>;
  disallowResumingReasons: Array<string>;
  disallowSeekingReasons: Array<string>;
  disallowSetQueueReasons: Array<string>;
  disallowSettingPlaybackSpeedReasons: Array<string>;
  disallowSignals: PlatformTypesPlayerAPIStateRestrictionsDisallowSignals;
  disallowSkippingNextReasons: Array<string>;
  disallowSkippingPreviousReasons: Array<string>;
  disallowTogglingRepeatContextReasons: Array<unknown>;
  disallowTogglingRepeatTrackReasons: Array<unknown>;
  disallowTogglingShuffleReasons: Array<unknown>;
  disallowTransferringPlaybackReasons: Array<unknown>;
}

export type PlatformTypesPlayerAPIStateRestrictionsDisallowSignals = Record<string, unknown>;

export interface PlatformTypesPlayerAPIStateSleepTimer {
  timestamp: null;
  type: number;
}

export type PlatformTypesPlayerAPIUpdateContext = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesPlayHistoryAPI {
  _cache: PlatformTypesPlayHistoryAPICache;
  _events: PlatformTypesPlayHistoryAPIEvents;
  _loader: PlatformTypesPlayHistoryAPILoader;
  _player: PlatformTypesPlayHistoryAPIPlayer;
  getCapabilities: PlatformTypesPlayHistoryAPIGetCapabilities;
  getContents: PlatformTypesPlayHistoryAPIGetContents;
  getEvents: PlatformTypesPlayHistoryAPIGetEvents;
}

export interface PlatformTypesPlayHistoryAPICache {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesPlayHistoryAPIEvents {
  _cache: PlatformTypesPlayHistoryAPICache;
  _emitter: PlatformTypesPlayHistoryAPIEventsEmitter;
  _loader: PlatformTypesPlayHistoryAPILoader;
  _numListeners: number;
  _player: PlatformTypesPlayHistoryAPIEventsPlayer;
  _subscriptions: PlatformTypesPlayHistoryAPIEventsSubscriptions;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onListenerAdded: PlatformTypesPlayHistoryAPIEventsOnListenerAdded;
  onListenerRemoved: PlatformTypesPlayHistoryAPIEventsOnListenerRemoved;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
  startListening: PlatformTypesPlayHistoryAPIEventsStartListening;
  stopListening: PlatformTypesPlayHistoryAPIEventsStopListening;
}

export interface PlatformTypesPlayHistoryAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesPlayHistoryAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesPlayHistoryAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesPlayHistoryAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesPlayHistoryAPIEventsEmitterMetaListeners {
  add: PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAdd {
  update: Array<PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAddUpdateItem>;
}

export interface PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAddUpdateItem {
  listener: PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAddUpdateItemListener;
  options: PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAddUpdateItemOptions;
}

export type PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAddUpdateItemListener =
  () => unknown;

export type PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersAddUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemove {
  update: Array<PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemoveUpdateItem>;
}

export interface PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemoveUpdateItem {
  listener: PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemoveUpdateItemListener;
  options: PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemoveUpdateItemOptions;
}

export type PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemoveUpdateItemListener =
  () => unknown;

export type PlatformTypesPlayHistoryAPIEventsEmitterMetaListenersRemoveUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesPlayHistoryAPIEventsOnListenerAdded = () => unknown;

export type PlatformTypesPlayHistoryAPIEventsOnListenerRemoved = () => unknown;

export interface PlatformTypesPlayHistoryAPIEventsPlayer {
  addToQueue: PlatformTypesPlayerAPIContextPlayerAddToQueue;
  deleteSession: PlatformTypesPlayerAPIContextPlayerDeleteSession;
  getError: PlatformTypesPlayerAPIContextPlayerGetError;
  getPlayHistory: PlatformTypesPlayerAPIContextPlayerGetPlayHistory;
  getPositionState: PlatformTypesPlayerAPIContextPlayerGetPositionState;
  getQueue: PlatformTypesPlayerAPIContextPlayerGetQueue;
  getState: PlatformTypesPlayerAPIContextPlayerGetState;
  options: PlatformTypesPlayHistoryAPIEventsPlayerOptions;
  pause: PlatformTypesPlayerAPIContextPlayerPause;
  play: PlatformTypesPlayerAPIContextPlayerPlay;
  playAsNextInQueue: PlatformTypesPlayerAPIContextPlayerPlayAsNextInQueue;
  playPrepared: PlatformTypesPlayerAPIContextPlayerPlayPrepared;
  preparePlay: PlatformTypesPlayerAPIContextPlayerPreparePlay;
  resume: PlatformTypesPlayerAPIContextPlayerResume;
  seekTo: PlatformTypesPlayerAPIContextPlayerSeekTo;
  setOptions: PlatformTypesPlayerAPIContextPlayerSetOptions;
  setQueue: PlatformTypesPlayerAPIContextPlayerSetQueue;
  setRepeatingContext: PlatformTypesPlayerAPIContextPlayerSetRepeatingContext;
  setRepeatingTrack: PlatformTypesPlayerAPIContextPlayerSetRepeatingTrack;
  setShufflingContext: PlatformTypesPlayerAPIContextPlayerSetShufflingContext;
  setSleepTimer: PlatformTypesPlayerAPIContextPlayerSetSleepTimer;
  signal: PlatformTypesPlayerAPIContextPlayerSignal;
  skipNext: PlatformTypesPlayerAPIContextPlayerSkipNext;
  skipPrev: PlatformTypesPlayerAPIContextPlayerSkipPrev;
  stop: PlatformTypesPlayerAPIContextPlayerStop;
  transport: PlatformTypesRegistryMapValueInstance2;
  updateContext: PlatformTypesPlayerAPIContextPlayerUpdateContext;
  updateContextPage: PlatformTypesPlayerAPIContextPlayerUpdateContextPage;
  updateContextTrack: PlatformTypesPlayerAPIContextPlayerUpdateContextTrack;
  updateViewUri: PlatformTypesPlayerAPIContextPlayerUpdateViewUri;
}

export type PlatformTypesPlayHistoryAPIEventsPlayerOptions = Record<string, unknown>;

export type PlatformTypesPlayHistoryAPIEventsStartListening = () => unknown;

export type PlatformTypesPlayHistoryAPIEventsStopListening = () => unknown;

export interface PlatformTypesPlayHistoryAPIEventsSubscriptions {
  update: null;
}

export type PlatformTypesPlayHistoryAPIGetCapabilities = () => unknown;

export type PlatformTypesPlayHistoryAPIGetContents = () => unknown;

export type PlatformTypesPlayHistoryAPIGetEvents = () => unknown;

export type PlatformTypesPlayHistoryAPILoader = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export interface PlatformTypesPlayHistoryAPIPlayer {
  addToQueue: PlatformTypesPlayerAPIContextPlayerAddToQueue;
  deleteSession: PlatformTypesPlayerAPIContextPlayerDeleteSession;
  getError: PlatformTypesPlayerAPIContextPlayerGetError;
  getPlayHistory: PlatformTypesPlayerAPIContextPlayerGetPlayHistory;
  getPositionState: PlatformTypesPlayerAPIContextPlayerGetPositionState;
  getQueue: PlatformTypesPlayerAPIContextPlayerGetQueue;
  getState: PlatformTypesPlayerAPIContextPlayerGetState;
  options: PlatformTypesPlayHistoryAPIPlayerOptions;
  pause: PlatformTypesPlayerAPIContextPlayerPause;
  play: PlatformTypesPlayerAPIContextPlayerPlay;
  playAsNextInQueue: PlatformTypesPlayerAPIContextPlayerPlayAsNextInQueue;
  playPrepared: PlatformTypesPlayerAPIContextPlayerPlayPrepared;
  preparePlay: PlatformTypesPlayerAPIContextPlayerPreparePlay;
  resume: PlatformTypesPlayerAPIContextPlayerResume;
  seekTo: PlatformTypesPlayerAPIContextPlayerSeekTo;
  setOptions: PlatformTypesPlayerAPIContextPlayerSetOptions;
  setQueue: PlatformTypesPlayerAPIContextPlayerSetQueue;
  setRepeatingContext: PlatformTypesPlayerAPIContextPlayerSetRepeatingContext;
  setRepeatingTrack: PlatformTypesPlayerAPIContextPlayerSetRepeatingTrack;
  setShufflingContext: PlatformTypesPlayerAPIContextPlayerSetShufflingContext;
  setSleepTimer: PlatformTypesPlayerAPIContextPlayerSetSleepTimer;
  signal: PlatformTypesPlayerAPIContextPlayerSignal;
  skipNext: PlatformTypesPlayerAPIContextPlayerSkipNext;
  skipPrev: PlatformTypesPlayerAPIContextPlayerSkipPrev;
  stop: PlatformTypesPlayerAPIContextPlayerStop;
  transport: PlatformTypesRegistryMapValueInstance2;
  updateContext: PlatformTypesPlayerAPIContextPlayerUpdateContext;
  updateContextPage: PlatformTypesPlayerAPIContextPlayerUpdateContextPage;
  updateContextTrack: PlatformTypesPlayerAPIContextPlayerUpdateContextTrack;
  updateViewUri: PlatformTypesPlayerAPIContextPlayerUpdateViewUri;
}

export type PlatformTypesPlayHistoryAPIPlayerOptions = Record<string, unknown>;

export interface PlatformTypesPlaylistAPI {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _events: PlatformTypesPlaylistAPIEvents;
  _getLensedPlaylistUri: PlatformTypesPlaylistAPIGetLensedPlaylistUri;
  _getPlaylistDecorationPolicies: PlatformTypesPlaylistAPIGetPlaylistDecorationPolicies;
  _isAuthorPageEnabled: boolean;
  _isTunaEnabled: boolean;
  _isWatchFeedEntityPagesEnabled: boolean;
  _playlistDataClient: PlatformTypesPlaylistAPIPlaylistDataClient;
  _playlistServiceClient: PlatformTypesPlaylistAPIPlaylistServiceClient;
  _resyncAPI: PlatformTypesPlaylistResyncAPI;
  _smartShuffleEligibilityAPI: PlatformTypesPlayerAPISmartShuffleEligibility;
  add: PlatformTypesPlaylistAPIAdd;
  clearAttributes: PlatformTypesPlaylistAPIClearAttributes;
  getCapabilities: PlatformTypesPlaylistAPIGetCapabilities;
  getContents: PlatformTypesPlaylistAPIGetContents;
  getEvents: PlatformTypesPlaylistAPIGetEvents;
  getMetadata: PlatformTypesPlaylistAPIGetMetadata;
  getPlaylist: PlatformTypesPlaylistAPIGetPlaylist;
  getRecommendedBookUris: PlatformTypesPlaylistAPIGetRecommendedBookUris;
  getRecommendedTracks: PlatformTypesPlaylistAPIGetRecommendedTracks;
  move: PlatformTypesPlaylistAPIMove;
  remove: PlatformTypesPlaylistAPIRemove;
  requestLenses: PlatformTypesPlaylistAPIRequestLenses;
  resolvePlaylistFormatURI: PlatformTypesPlaylistAPIResolvePlaylistFormatURI;
  resync: PlatformTypesPlaylistAPIResync;
  sendSignal: PlatformTypesPlaylistAPISendSignal;
  setAttributes: PlatformTypesPlaylistAPISetAttributes;
  updateDetails: PlatformTypesPlaylistAPIUpdateDetails;
  uploadImage: PlatformTypesPlaylistAPIUploadImage;
}

export type PlatformTypesPlaylistAPIAdd = (arg0: any, arg1: any, arg2: any, arg3: any) => unknown;

export type PlatformTypesPlaylistAPIClearAttributes = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlaylistAPIEvents {
  _aggregator: PlatformTypesPlaylistAPIEventsAggregator;
  _dataClient: PlatformTypesPlaylistAPIPlaylistDataClient;
  _emitter: PlatformTypesPlaylistAPIEventsEmitter;
  _subscriptions: Map<unknown, unknown>;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitAddComplete: PlatformTypesPlaylistAPIEventsEmitAddComplete;
  emitAddSync: PlatformTypesPlaylistAPIEventsEmitAddSync;
  emitMoveComplete: PlatformTypesPlaylistAPIEventsEmitMoveComplete;
  emitMoveSync: PlatformTypesPlaylistAPIEventsEmitMoveSync;
  emitRemoveComplete: PlatformTypesPlaylistAPIEventsEmitRemoveComplete;
  emitRemoveSync: PlatformTypesPlaylistAPIEventsEmitRemoveSync;
  emitSendSignalComplete: PlatformTypesPlaylistAPIEventsEmitSendSignalComplete;
  emitSendSignalSync: PlatformTypesPlaylistAPIEventsEmitSendSignalSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateComplete: PlatformTypesPlaylistAPIEventsEmitUpdateComplete;
  emitUpdateSync: PlatformTypesPlaylistAPIEventsEmitUpdateSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onBatchChanged: PlatformTypesPlaylistAPIEventsOnBatchChanged;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesPlaylistAPIEventsAggregator {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesPlaylistAPIEventsAggregatorOnAdd;
  _onBatch: PlatformTypesPlaylistAPIEventsAggregatorOnBatch;
  _onRemove: PlatformTypesPlaylistAPIEventsAggregatorOnRemove;
  _onUpdate: PlatformTypesPlaylistAPIEventsAggregatorOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesPlaylistAPIEventsAggregatorOnAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIEventsAggregatorOnBatch = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIEventsAggregatorOnRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIEventsAggregatorOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitAddComplete = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitAddSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitMoveComplete = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitMoveSync = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitRemoveComplete = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitRemoveSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitSendSignalComplete = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitSendSignalSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesPlaylistAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesPlaylistAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesPlaylistAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesPlaylistAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesPlaylistAPIEventsEmitterMetaListeners {
  add: PlatformTypesPlaylistAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesPlaylistAPIEventsEmitterMetaListenersAdd {
  update: Array<PlatformTypesPlaylistAPIEventsEmitterMetaListenersAddUpdateItem>;
}

export interface PlatformTypesPlaylistAPIEventsEmitterMetaListenersAddUpdateItem {
  listener: PlatformTypesPlaylistAPIEventsEmitterMetaListenersAddUpdateItemListener;
  options: PlatformTypesPlaylistAPIEventsEmitterMetaListenersAddUpdateItemOptions;
}

export type PlatformTypesPlaylistAPIEventsEmitterMetaListenersAddUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitterMetaListenersAddUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemove {
  update: Array<PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemoveUpdateItem>;
}

export interface PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemoveUpdateItem {
  listener: PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemoveUpdateItemListener;
  options: PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemoveUpdateItemOptions;
}

export type PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemoveUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitterMetaListenersRemoveUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesPlaylistAPIEventsEmitUpdateComplete = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIEventsEmitUpdateSync = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIEventsOnBatchChanged = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIGetCapabilities = () => unknown;

export type PlatformTypesPlaylistAPIGetContents = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIGetEvents = () => unknown;

export type PlatformTypesPlaylistAPIGetLensedPlaylistUri = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIGetMetadata = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIGetPlaylist = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesPlaylistAPIGetPlaylistDecorationPolicies = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistAPIGetRecommendedBookUris = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistAPIGetRecommendedTracks = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistAPIMove = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesPlaylistAPIPlaylistDataClient {
  find: PlatformTypesShuffleAPIPlaylistDataServiceClientFind;
  get: PlatformTypesShuffleAPIPlaylistDataServiceClientGet;
  multiGet: PlatformTypesShuffleAPIPlaylistDataServiceClientMultiGet;
  options: PlatformTypesPlaylistAPIPlaylistDataClientOptions;
  subscribe: PlatformTypesShuffleAPIPlaylistDataServiceClientSubscribe;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlaylistAPIPlaylistDataClientOptions = Record<string, unknown>;

export interface PlatformTypesPlaylistAPIPlaylistServiceClient {
  clearToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken;
  contains: PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains;
  emitItemSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals;
  emitSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals;
  getMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers;
  invalidateRevisions: PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions;
  modify: PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify;
  options: PlatformTypesPlaylistAPIPlaylistServiceClientOptions;
  requestLenses: PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses;
  resync: PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync;
  setBasePermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission;
  setMemberPermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission;
  setOfflineState: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState;
  setToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken;
  signal: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal;
  signalItem: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem;
  subscribeToMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlaylistAPIPlaylistServiceClientOptions = Record<string, unknown>;

export type PlatformTypesPlaylistAPIRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIRequestLenses = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesPlaylistAPIResolvePlaylistFormatURI = (arg0: any) => unknown;

export type PlatformTypesPlaylistAPIResync = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPISendSignal = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesPlaylistAPISetAttributes = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIUpdateDetails = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistAPIUploadImage = (arg0: any) => unknown;

export interface PlatformTypesPlaylistPermissionsAPI {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _client: PlatformTypesPlaylistPermissionsAPIClient;
  _events: PlatformTypesPlaylistPermissionsAPIEvents;
  claimPermissions: PlatformTypesPlaylistPermissionsAPIClaimPermissions;
  getCapabilities: PlatformTypesPlaylistPermissionsAPIGetCapabilities;
  getEvents: PlatformTypesPlaylistPermissionsAPIGetEvents;
  getMembers: PlatformTypesPlaylistPermissionsAPIGetMembers;
  getPermissionGrant: PlatformTypesPlaylistPermissionsAPIGetPermissionGrant;
  removeMember: PlatformTypesPlaylistPermissionsAPIRemoveMember;
  setBasePermission: PlatformTypesPlaylistPermissionsAPISetBasePermission;
  setMemberPermission: PlatformTypesPlaylistPermissionsAPISetMemberPermission;
  subscribeToMembers: PlatformTypesPlaylistPermissionsAPISubscribeToMembers;
}

export type PlatformTypesPlaylistPermissionsAPIClaimPermissions = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesPlaylistPermissionsAPIClient {
  clearToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken;
  contains: PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains;
  emitItemSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals;
  emitSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals;
  getMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers;
  invalidateRevisions: PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions;
  modify: PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify;
  options: PlatformTypesPlaylistPermissionsAPIClientOptions;
  requestLenses: PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses;
  resync: PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync;
  setBasePermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission;
  setMemberPermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission;
  setOfflineState: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState;
  setToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken;
  signal: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal;
  signalItem: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem;
  subscribeToMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlaylistPermissionsAPIClientOptions = Record<string, unknown>;

export interface PlatformTypesPlaylistPermissionsAPIEvents {
  _emitter: PlatformTypesPlaylistPermissionsAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitOperationComplete: PlatformTypesPlaylistPermissionsAPIEventsEmitOperationComplete;
  emitOperationSync: PlatformTypesPlaylistPermissionsAPIEventsEmitOperationSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export type PlatformTypesPlaylistPermissionsAPIEventsEmitOperationComplete = (arg0: any) => unknown;

export type PlatformTypesPlaylistPermissionsAPIEventsEmitOperationSync = (arg0: any) => unknown;

export interface PlatformTypesPlaylistPermissionsAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesPlaylistPermissionsAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesPlaylistPermissionsAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesPlaylistPermissionsAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesPlaylistPermissionsAPIEventsEmitterMetaListeners {
  add: PlatformTypesPlaylistPermissionsAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesPlaylistPermissionsAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesPlaylistPermissionsAPIEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesPlaylistPermissionsAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesPlaylistPermissionsAPIGetCapabilities = () => unknown;

export type PlatformTypesPlaylistPermissionsAPIGetEvents = () => unknown;

export type PlatformTypesPlaylistPermissionsAPIGetMembers = (arg0: any) => unknown;

export type PlatformTypesPlaylistPermissionsAPIGetPermissionGrant = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistPermissionsAPIRemoveMember = (arg0: any, arg1: any) => unknown;

export type PlatformTypesPlaylistPermissionsAPISetBasePermission = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistPermissionsAPISetMemberPermission = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesPlaylistPermissionsAPISubscribeToMembers = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesPlaylistResyncAPI {
  _playlistServiceClient: PlatformTypesPlaylistResyncAPIPlaylistServiceClient;
  lastSync: Map<unknown, unknown>;
  maybeResync: PlatformTypesPlaylistResyncAPIMaybeResync;
  resync: PlatformTypesPlaylistResyncAPIResync;
}

export type PlatformTypesPlaylistResyncAPIMaybeResync = (arg0: any) => unknown;

export interface PlatformTypesPlaylistResyncAPIPlaylistServiceClient {
  clearToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken;
  contains: PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains;
  emitItemSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals;
  emitSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals;
  getMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers;
  invalidateRevisions: PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions;
  modify: PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify;
  options: PlatformTypesPlaylistResyncAPIPlaylistServiceClientOptions;
  requestLenses: PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses;
  resync: PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync;
  setBasePermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission;
  setMemberPermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission;
  setOfflineState: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState;
  setToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken;
  signal: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal;
  signalItem: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem;
  subscribeToMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientOptions = Record<string, unknown>;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesPlaylistResyncAPIResync = (arg0: any) => unknown;

export interface PlatformTypesRecentlyPlayedAPI {
  _cancellable: null;
  _client: PlatformTypesRecentlyPlayedAPIClient;
  _contexts: null;
  _events: PlatformTypesRecentlyPlayedAPIEvents;
  _isAuthorPageEnabled: boolean;
  getContexts: PlatformTypesRecentlyPlayedAPIGetContexts;
  getEvents: PlatformTypesRecentlyPlayedAPIGetEvents;
  startListening: PlatformTypesRecentlyPlayedAPIStartListening;
}

export interface PlatformTypesRecentlyPlayedAPIClient {
  options: PlatformTypesRecentlyPlayedAPIClientOptions;
  stream: PlatformTypesRecentlyPlayedAPIClientStream;
  tracks: PlatformTypesRecentlyPlayedAPIClientTracks;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesRecentlyPlayedAPIClientOptions = Record<string, unknown>;

export type PlatformTypesRecentlyPlayedAPIClientStream = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRecentlyPlayedAPIClientTracks = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRecentlyPlayedAPIEvents {
  _emitter: PlatformTypesRecentlyPlayedAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesRecentlyPlayedAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRecentlyPlayedAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesRecentlyPlayedAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListeners {
  add: PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAdd {
  update: Array<PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAddUpdateItem>;
}

export interface PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAddUpdateItem {
  listener: PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAddUpdateItemListener;
  options: PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAddUpdateItemOptions;
}

export type PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAddUpdateItemListener =
  () => unknown;

export type PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersAddUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRecentlyPlayedAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesRecentlyPlayedAPIGetContexts = () => unknown;

export type PlatformTypesRecentlyPlayedAPIGetEvents = () => unknown;

export type PlatformTypesRecentlyPlayedAPIStartListening = () => unknown;

export interface PlatformTypesReduxStore {
  cleanActions: PlatformTypesReduxStoreCleanActions;
  storeAction: PlatformTypesReduxStoreStoreAction;
  triggerActions: PlatformTypesReduxStoreTriggerActions;
}

export type PlatformTypesReduxStoreCleanActions = () => unknown;

export type PlatformTypesReduxStoreStoreAction = () => unknown;

export type PlatformTypesReduxStoreTriggerActions = () => unknown;

export interface PlatformTypesRegistry {
  _map: Map<
    symbol,
    | PlatformTypesRegistryMapValue
    | PlatformTypesRegistryMapValue10
    | PlatformTypesRegistryMapValue2
    | PlatformTypesRegistryMapValue3
    | PlatformTypesRegistryMapValue4
    | PlatformTypesRegistryMapValue5
    | PlatformTypesRegistryMapValue6
    | PlatformTypesRegistryMapValue7
    | PlatformTypesRegistryMapValue8
    | PlatformTypesRegistryMapValue9
  >;
  _parents: Array<unknown>;
  _tree: PlatformTypesRegistryTree;
  getDependencyTree: PlatformTypesRegistryGetDependencyTree;
  registerFactory: PlatformTypesRegistryRegisterFactory;
  registerImpl: PlatformTypesRegistryRegisterImpl;
  registerValue: PlatformTypesRegistryRegisterValue;
  resolve: PlatformTypesRegistryResolve;
  resolveImpl: PlatformTypesRegistryResolveImpl;
  resolveNoThrow: PlatformTypesRegistryResolveNoThrow;
  wrap: PlatformTypesRegistryWrap;
  wrapImpl: PlatformTypesRegistryWrapImpl;
}

export type PlatformTypesRegistryGetDependencyTree = () => unknown;

export interface PlatformTypesRegistryMapValue {
  instance: PlatformTypesRegistryMapValueInstance;
}

export interface PlatformTypesRegistryMapValue10 {
  factory: PlatformTypesRegistryMapValueFactory8;
  instance: PlatformTypesRegistryMapValueInstance9;
}

export interface PlatformTypesRegistryMapValue2 {
  instance: PlatformTypesRegistryMapValueInstance2;
}

export interface PlatformTypesRegistryMapValue3 {
  factory: PlatformTypesRegistryMapValueFactory;
  instance: PlatformTypesRegistryMapValueInstance3;
}

export interface PlatformTypesRegistryMapValue4 {
  factory: PlatformTypesRegistryMapValueFactory2;
  instance: PlatformTypesRegistryMapValueInstance4;
}

export interface PlatformTypesRegistryMapValue5 {
  factory: PlatformTypesRegistryMapValueFactory3;
  instance: PlatformTypesRegistryMapValueInstance5;
}

export interface PlatformTypesRegistryMapValue6 {
  factory: PlatformTypesRegistryMapValueFactory4;
  instance: PlatformTypesRegistryMapValueInstance6;
}

export interface PlatformTypesRegistryMapValue7 {
  factory: PlatformTypesRegistryMapValueFactory5;
  instance: PlatformTypesRegistryMapValueInstanceTransport;
}

export interface PlatformTypesRegistryMapValue8 {
  factory: PlatformTypesRegistryMapValueFactory6;
  instance: PlatformTypesRegistryMapValueInstance7;
}

export interface PlatformTypesRegistryMapValue9 {
  factory: PlatformTypesRegistryMapValueFactory7;
  instance: PlatformTypesRegistryMapValueInstance8;
}

export type PlatformTypesRegistryMapValueFactory = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory2 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory3 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory4 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory5 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory6 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory7 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueFactory8 = (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstance {
  del: PlatformTypesRegistryMapValueInstanceDel;
  get: PlatformTypesRegistryMapValueInstanceGet;
  head: PlatformTypesRegistryMapValueInstanceHead;
  patch: PlatformTypesRegistryMapValueInstancePatch;
  post: PlatformTypesRegistryMapValueInstancePost;
  postSub: PlatformTypesRegistryMapValueInstancePostSub;
  put: PlatformTypesRegistryMapValueInstancePut;
  request: PlatformTypesRegistryMapValueInstanceRequest;
  requestFactory: PlatformTypesRegistryMapValueInstanceRequestFactory;
  resolve: PlatformTypesRegistryMapValueInstanceResolve;
  resolver: PlatformTypesRegistryMapValueInstanceResolver;
  sub: PlatformTypesRegistryMapValueInstanceSub;
}

export interface PlatformTypesRegistryMapValueInstance2 {
  _onCancel: PlatformTypesRegistryMapValueInstanceOnCancel;
  _onSend: PlatformTypesRegistryMapValueInstanceOnSend;
  call: PlatformTypesRegistryMapValueInstanceCall;
  callSingle: PlatformTypesRegistryMapValueInstanceCallSingle;
  callStream: PlatformTypesRegistryMapValueInstanceCallStream;
}

export interface PlatformTypesRegistryMapValueInstance3 {
  _callbackResponses: Array<unknown>;
  _callbacks: Array<PlatformTypesRegistryMapValueInstanceCallbacksItem>;
  _esperantoTransport: PlatformTypesRegistryMapValueInstance2;
  _promise: null;
  _token: PlatformTypesRegistryMapValueInstanceToken;
  addOnNewTokenResponse: PlatformTypesRegistryMapValueInstanceAddOnNewTokenResponse;
  addOnTokenChanged: PlatformTypesRegistryMapValueInstanceAddOnTokenChanged;
  getToken: PlatformTypesRegistryMapValueInstanceGetToken;
  loadToken: PlatformTypesRegistryMapValueInstanceLoadToken;
}

export interface PlatformTypesRegistryMapValueInstance4 {
  _cosmos: PlatformTypesRegistryMapValueInstance;
  getUser: PlatformTypesRegistryMapValueInstanceGetUser;
}

export interface PlatformTypesRegistryMapValueInstance5 {
  _inFlightCache: PlatformTypesRegistryMapValueInstanceInFlightCache;
  _subs: Set<
    | PlatformTypesRegistryMapValueInstanceSubsSetElement
    | PlatformTypesRegistryMapValueInstanceSubsSetElement10
    | PlatformTypesRegistryMapValueInstanceSubsSetElement2
    | PlatformTypesRegistryMapValueInstanceSubsSetElement3
    | PlatformTypesRegistryMapValueInstanceSubsSetElement4
    | PlatformTypesRegistryMapValueInstanceSubsSetElement5
    | PlatformTypesRegistryMapValueInstanceSubsSetElement6
    | PlatformTypesRegistryMapValueInstanceSubsSetElement7
    | PlatformTypesRegistryMapValueInstanceSubsSetElement8
    | PlatformTypesRegistryMapValueInstanceSubsSetElement9
  >;
  cache: PlatformTypesRegistryMapValueInstanceCache;
  getCachedValues: PlatformTypesRegistryMapValueInstanceGetCachedValues;
  getValues: PlatformTypesRegistryMapValueInstanceGetValues;
  mapKeys: PlatformTypesRegistryMapValueInstanceMapKeys;
  productStateApi: PlatformTypesRegistryMapValueInstanceProductStateApi;
  setValues: PlatformTypesRegistryMapValueInstanceSetValues;
  subValues: PlatformTypesRegistryMapValueInstanceSubValues;
}

export interface PlatformTypesRegistryMapValueInstance6 {
  _authAttempts: number;
  _authCounter: PlatformTypesRegistryMapValueInstanceAuthCounter;
  _authTimeoutId: null;
  _onAuthenticationFailed: Array<PlatformTypesRegistryMapValueInstanceOnAuthenticationFailedItem>;
  _transport: PlatformTypesRegistryMapValueInstanceTransport;
  addOnAuthenticationFailed: PlatformTypesRegistryMapValueInstanceAddOnAuthenticationFailed;
  attach: PlatformTypesRegistryMapValueInstanceAttach;
  detach: PlatformTypesRegistryMapValueInstanceDetach;
  name: string;
  onAuthenticated: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener;
  onAuthenticationFailed: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemListener;
  onBeforeProcessRequest: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItemListener;
  onBeforeSendRequest: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItemListener;
  onConnected: PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemListener;
  onDisconnected: PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItemListener;
  tryAuthenticate: PlatformTypesRegistryMapValueInstanceTryAuthenticate;
}

export interface PlatformTypesRegistryMapValueInstance7 {
  _authorizationPlugin: PlatformTypesRegistryMapValueInstance6;
  _cosmos: PlatformTypesRegistryMapValueInstance;
  _events: PlatformTypesRegistryMapValueInstanceEvents;
  _state: PlatformTypesRegistryMapValueInstanceState;
  _tokenProvider: PlatformTypesRegistryMapValueInstance3;
  getCapabilities: PlatformTypesRegistryMapValueInstanceGetCapabilities;
  getEvents: PlatformTypesRegistryMapValueInstanceGetEvents;
  getSessionTransferURL: PlatformTypesRegistryMapValueInstanceGetSessionTransferURL;
  getState: PlatformTypesRegistryMapValueInstanceGetState;
  onAuthenticationFailed: PlatformTypesRegistryMapValueInstanceOnAuthenticationFailedItem;
  onTokenChanged: PlatformTypesRegistryMapValueInstanceCallbacksItem;
  tryAuthorize: PlatformTypesRegistryMapValueInstanceTryAuthorize;
}

export interface PlatformTypesRegistryMapValueInstance8 {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRegistryMapValueInstanceListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  buildEvent: PlatformTypesRegistryMapValueInstanceBuildEvent;
  commitAndUploadESStats: PlatformTypesRegistryMapValueInstanceCommitAndUploadESStats;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  destroy: PlatformTypesRegistryMapValueInstanceDestroy;
  droppedEventsTracker: PlatformTypesRegistryMapValueInstanceDroppedEventsTracker;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  eventsManager: PlatformTypesRegistryMapValueInstanceEventsManager;
  finalFlush: PlatformTypesRegistryMapValueInstanceFinalFlush;
  flush: PlatformTypesRegistryMapValueInstanceFlush;
  getEvents: PlatformTypesRegistryMapValueInstanceGetEvents2;
  getSpecificContext: PlatformTypesRegistryMapValueInstanceGetSpecificContext;
  getStorageId: PlatformTypesRegistryMapValueInstanceGetStorageId;
  getStorageType: PlatformTypesRegistryMapValueInstanceGetStorageType;
  getVersion: PlatformTypesRegistryMapValueInstanceGetVersion;
  hasContext: PlatformTypesRegistryMapValueInstanceHasContext;
  initSendingEvents: PlatformTypesRegistryMapValueInstanceInitSendingEvents;
  initializeContexts: PlatformTypesRegistryMapValueInstanceInitializeContexts;
  installationId: string;
  instanceContexts: PlatformTypesRegistryMapValueInstanceInstanceContexts;
  isUsingESS2NAOptimization: PlatformTypesRegistryMapValueInstanceIsUsingESS2NAOptimization;
  lastFlush: PlatformTypesRegistryMapValueInstanceLastFlush;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onBeforeDisconnect: PlatformTypesRegistryMapValueInstanceOnBeforeDisconnect;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  onSuccessfullySentESStats: PlatformTypesRegistryMapValueInstanceOnSuccessfullySentESStats;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  ownerProvider: PlatformTypesRegistryMapValueInstanceOwnerProvider;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
  send: PlatformTypesRegistryMapValueInstanceSend;
  sendESS2NAWithOptimization: PlatformTypesRegistryMapValueInstanceSendESS2NAWithOptimization;
  sendESStats: PlatformTypesRegistryMapValueInstanceSendESStats;
  sendEvents: PlatformTypesRegistryMapValueInstanceSendEvents;
  sendToGabito: PlatformTypesRegistryMapValueInstanceSendToGabito;
  sequenceIdProvider: PlatformTypesRegistryMapValueInstanceSequenceIdProvider;
  sequenceNumberProvider: PlatformTypesRegistryMapValueInstanceSequenceNumberProvider;
  setupInstallationId: PlatformTypesRegistryMapValueInstanceSetupInstallationId;
  statsProvider: PlatformTypesRegistryMapValueInstanceStatsProvider;
  storageManager: PlatformTypesRegistryMapValueInstanceStorageManager;
  storeEvent: PlatformTypesRegistryMapValueInstanceStoreEvent;
  transport: PlatformTypesRegistryMapValueInstanceTransport;
  uploaders: PlatformTypesRegistryMapValueInstanceUploaders;
  uploadingInProgress: boolean;
  useOptimizedESS2NA: boolean;
  validateEventData: PlatformTypesRegistryMapValueInstanceValidateEventData;
}

export interface PlatformTypesRegistryMapValueInstance9 {
  buffer: Array<unknown>;
  builders: Map<unknown, unknown>;
  getMeasurementBuilderByCategory: PlatformTypesRegistryMapValueInstanceGetMeasurementBuilderByCategory;
  makeTimeMeasurementBuilder: PlatformTypesRegistryMapValueInstanceMakeTimeMeasurementBuilder;
  reporter: PlatformTypesRegistryMapValueInstanceReporter;
  send: PlatformTypesRegistryMapValueInstanceSend2;
  setTimeReporter: PlatformTypesRegistryMapValueInstanceSetTimeReporter;
}

export type PlatformTypesRegistryMapValueInstanceAddOnAuthenticationFailed = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceAddOnNewTokenResponse = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceAddOnTokenChanged = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceAttach = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceAuthCounter {
  _baseTime: number;
  _ceiling: number;
  _curve: string;
  _jitter: boolean;
  getTime: PlatformTypesRegistryMapValueInstanceAuthCounterGetTime;
}

export type PlatformTypesRegistryMapValueInstanceAuthCounterGetTime = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceBuildEvent = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceCache {
  _cache: Map<string, PlatformTypesRegistryMapValueInstanceCacheCacheValue>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesRegistryMapValueInstanceCacheCacheValue {
  expiry: number;
  value: PlatformTypesRegistryMapValueInstanceCacheCacheValueValue;
}

export interface PlatformTypesRegistryMapValueInstanceCacheCacheValueValue {
  "ab-ad-player-targeting": string;
  "ab-watch-now": string;
  "active-session-days": string;
  "ad-formats-preroll-video": string;
  "ad-session-persistence": string;
  "age-assurance-enabled-account-settings": string;
  "app-developer": string;
  "apply-child-content-restrictions": string;
  "audio-preview-url-template": string;
  "audio-quality": string;
  "audiobook-onboarding-completed": string;
  "audiobook-onboarding-dismissed": string;
  "browse-overview-enabled": string;
  "buffering-strategy-parameters": string;
  "capper-profile": string;
  "capping-bar-threshold": string;
  "com.spotify.madprops.delivered.by.ucs": string;
  "com.spotify.madprops.use.ucs.product.state": string;
  "dma-mode-available": string;
  "dma-mode-enabled": string;
  "dsa-mode-available": string;
  "dsa-mode-enabled": string;
  "employee-free-opt-in": string;
  "enable-annotations": string;
  "enable-annotations-read": string;
  "enable-crossfade": string;
  "estimated-age": string;
  "explicit-content": string;
  "fb-grant-permission-local-render": string;
  "fb-info-confirmation": string;
  "filter-explicit-content": string;
  "financial-product": string;
  "has-audiobooks-subscription": string;
  "head-file-caching": string;
  "head-files-url": string;
  "high-bitrate": string;
  "image-url": string;
  "is-cheetara": string;
  "is-pigeon": string;
  "is-puffin": string;
  "is-standalone-audiobooks": string;
  "is-tuna": string;
  "key-caching-auto-offline": string;
  "key-caching-max-count": string;
  "key-caching-max-offline-seconds": string;
  "key-memory-cache-mode": string;
  "license-acceptance-grace-days": string;
  "license-agreements": string;
  "list-private-by-default": string;
  "metadata-link-lookup-modes": string;
  "mobile-browse": string;
  "mobile-login": string;
  "mobile-payment": string;
  "network-operator-premium-activation": string;
  "nft-disabled": string;
  "obfuscate-restricted-tracks": string;
  "on-demand": string;
  "on-demand-trial": string;
  "on-demand-trial-in-progress": string;
  "payments-locked-state": string;
  "pick-and-shuffle": string;
  "player-license": string;
  "player-license-v2": string;
  "playlist-annotations-markup": string;
  "preferred-locale": string;
  "prefetch-keys": string;
  "prefetch-strategy": string;
  "prefetch-window-max": string;
  "public-toplist": string;
  "publish-activity": string;
  "publish-playlist": string;
  "rating-access": string;
  "remote-control": string;
  "restrict-branch-data-processing": string;
  "restrict-playlist-collaboration": string;
  "send-email": string;
  "setup-headphones-changes": string;
  "should-assure-age-content-playback": string;
  "should-assure-age-social": string;
  "shows-collection": string;
  "shows-collection-jam": string;
  "shuffle-algorithm": string;
  "sidebar-navigation-enabled": string;
  "social-session": string;
  "social-session-free-tier": string;
  "storage-size-config": string;
  "streaming-only-premium": string;
  "streaming-rules": string;
  "track-cap": string;
  "ugc-abuse-report": string;
  "ugc-abuse-report-url": string;
  "use-fb-publish-backend": string;
  "user-profile-show-invitation-codes": string;
  "video-cdn-sampling": string;
  "video-device-blacklisted": string;
  "video-initial-bitrate": string;
  "video-keyframe-url": string;
  "video-manifest-url": string;
  "video-wifi-initial-bitrate": string;
  "widevine-license-url": string;
  "yl-kids-restricted-content": string;
  ab_recently_played_feature_time_filter_threshold: string;
  ads: string;
  arsenal_country: string;
  autoplay: string;
  catalogue: string;
  collection: string;
  country: string;
  created_by_partner: string;
  incognito_mode_timeout: string;
  is_email_verified: string;
  is_maybe_in_social_session: string;
  jam: string;
  libspotify: string;
  mobile: string;
  name: string;
  offline: string;
  parrot: string;
  product: string;
  radio: string;
  shuffle: string;
  streaming: string;
}

export type PlatformTypesRegistryMapValueInstanceCacheCreate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceCacheSet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceCall = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceCallbacksItem = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceCallSingle = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceCallStream = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceCommitAndUploadESStats = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceDel = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceDestroy = () => unknown;

export type PlatformTypesRegistryMapValueInstanceDetach = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceDroppedEventsTracker {
  getDroppedEventCounters: PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerGetDroppedEventCounters;
  getDroppedEventsCountersPerSequenceId: PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerGetDroppedEventsCountersPerSequenceId;
  storageManager: PlatformTypesRegistryMapValueInstanceStorageManager;
  updateDroppedEventCount: PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerUpdateDroppedEventCount;
  updateReportedEventCounters: PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerUpdateReportedEventCounters;
}

export type PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerGetDroppedEventCounters = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerGetDroppedEventsCountersPerSequenceId =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerUpdateDroppedEventCount = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceDroppedEventsTrackerUpdateReportedEventCounters = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceEvents {
  _emitter: PlatformTypesRegistryMapValueInstanceEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export type PlatformTypesRegistryMapValueInstanceEventsAddListener = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsCreateEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsEmit = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsEmitSync = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRegistryMapValueInstanceEventsEmitterListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesRegistryMapValueInstanceEventsEmitterListeners {
  update: Array<PlatformTypesRegistryMapValueInstanceEventsEmitterListenersUpdateItem>;
}

export interface PlatformTypesRegistryMapValueInstanceEventsEmitterListenersUpdateItem {
  listener: PlatformTypesRegistryMapValueInstanceEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesRegistryMapValueInstanceEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceEventsEmitterMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceEventsEmitterMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceEventsEmitterMetaListenersRemove;
}

export type PlatformTypesRegistryMapValueInstanceEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceEventsManager {
  addEvent: PlatformTypesRegistryMapValueInstanceEventsManagerAddEvent;
  getEvent: PlatformTypesRegistryMapValueInstanceEventsManagerGetEvent;
  getEventKey: PlatformTypesRegistryMapValueInstanceEventsManagerGetEventKey;
  getEvents: PlatformTypesRegistryMapValueInstanceEventsManagerGetEvents;
  getEventsKeys: PlatformTypesRegistryMapValueInstanceEventsManagerGetEventsKeys;
  getEventsKeysPerSequenceId: PlatformTypesRegistryMapValueInstanceEventsManagerGetEventsKeysPerSequenceId;
  getGlobalSequenceNumberFromEventKey: PlatformTypesRegistryMapValueInstanceEventsManagerGetGlobalSequenceNumberFromEventKey;
  removeEvents: PlatformTypesRegistryMapValueInstanceEventsManagerRemoveEvents;
  storageManager: PlatformTypesRegistryMapValueInstanceStorageManager;
}

export type PlatformTypesRegistryMapValueInstanceEventsManagerAddEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerGetEvent = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerGetEventKey = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerGetEvents = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerGetEventsKeys = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerGetEventsKeysPerSequenceId = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerGetGlobalSequenceNumberFromEventKey =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsManagerRemoveEvents = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsOnAddListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceEventsRemoveListener = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceFinalFlush = () => unknown;

export type PlatformTypesRegistryMapValueInstanceFlush = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGet = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceGetCachedValues = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetCapabilities = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetEvents = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetEvents2 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceGetMeasurementBuilderByCategory = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceGetSessionTransferURL = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceGetSpecificContext = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceGetState = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetStorageId = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetStorageType = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetToken = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetUser = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetValues = () => unknown;

export type PlatformTypesRegistryMapValueInstanceGetVersion = () => unknown;

export type PlatformTypesRegistryMapValueInstanceHasContext = () => unknown;

export type PlatformTypesRegistryMapValueInstanceHead = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceInFlightCache {
  _cache: Map<unknown, unknown>;
  _ttl: null;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceInFlightCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  deleteOnSettle: PlatformTypesRegistryMapValueInstanceInFlightCacheDeleteOnSettle;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceInFlightCacheSet;
}

export type PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup = () => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheClear = () => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheCreate = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheDelete = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheDeleteOnSettle = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheEntries = () => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheGet = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry = () => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheHas = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCachePeek = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceInFlightCacheSet = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceInitializeContexts = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceInitSendingEvents = () => unknown;

export interface PlatformTypesRegistryMapValueInstanceInstanceContexts {
  context_application_desktop: PlatformTypesRegistryMapValueInstanceInstanceContextsContextApplicationDesktop;
  context_client_id: PlatformTypesRegistryMapValueInstanceInstanceContextsContextClientId;
  context_device_desktop: PlatformTypesRegistryMapValueInstanceInstanceContextsContextDeviceDesktop;
  context_installation_id: PlatformTypesRegistryMapValueInstanceInstanceContextsContextInstallationId;
}

export interface PlatformTypesRegistryMapValueInstanceInstanceContextsContextApplicationDesktop {
  version_code: number;
  version_string: string;
}

export interface PlatformTypesRegistryMapValueInstanceInstanceContextsContextClientId {
  value: string;
}

export interface PlatformTypesRegistryMapValueInstanceInstanceContextsContextDeviceDesktop {
  device_id: string;
  device_manufacturer: string;
  device_model: string;
  os_version: string;
  platform_type: string;
}

export interface PlatformTypesRegistryMapValueInstanceInstanceContextsContextInstallationId {
  value: string;
}

export type PlatformTypesRegistryMapValueInstanceIsUsingESS2NAOptimization = () => unknown;

export type PlatformTypesRegistryMapValueInstanceLastFlush = () => unknown;

export type PlatformTypesRegistryMapValueInstanceListeners = Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceLoadToken = () => unknown;

export type PlatformTypesRegistryMapValueInstanceMakeTimeMeasurementBuilder = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceMapKeys = (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceMetaListenersRemove;
}

export type PlatformTypesRegistryMapValueInstanceMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceOnAuthenticationFailedItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceOnBeforeDisconnect = () => unknown;

export type PlatformTypesRegistryMapValueInstanceOnCancel = () => unknown;

export type PlatformTypesRegistryMapValueInstanceOnSend = () => unknown;

export type PlatformTypesRegistryMapValueInstanceOnSuccessfullySentESStats = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceOwnerProvider = () => unknown;

export type PlatformTypesRegistryMapValueInstancePatch = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstancePost = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstancePostSub = (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceProductStateApi {
  delOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiDelOverridesValues;
  getValues: PlatformTypesRegistryMapValueInstanceProductStateApiGetValues;
  options: PlatformTypesRegistryMapValueInstanceProductStateApiOptions;
  putOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutOverridesValues;
  putValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutValues;
  putValuesSync: PlatformTypesRegistryMapValueInstanceProductStateApiPutValuesSync;
  subValues: PlatformTypesRegistryMapValueInstanceProductStateApiSubValues;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesRegistryMapValueInstanceProductStateApiDelOverridesValues = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceProductStateApiGetValues = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceProductStateApiOptions = Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceProductStateApiPutOverridesValues = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceProductStateApiPutValues = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceProductStateApiPutValuesSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceProductStateApiSubValues = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstancePut = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceReporter {
  enabled: boolean;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  isAuthenticated: boolean;
  send: PlatformTypesRegistryMapValueInstanceReporterSend;
  setAuthenticated: PlatformTypesRegistryMapValueInstanceReporterSetAuthenticated;
  setEnabled: PlatformTypesRegistryMapValueInstanceReporterSetEnabled;
}

export type PlatformTypesRegistryMapValueInstanceReporterSend = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceReporterSetAuthenticated = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceReporterSetEnabled = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceRequest = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceRequestFactory = () => unknown;

export type PlatformTypesRegistryMapValueInstanceResolve = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceResolver {
  cancel: PlatformTypesRegistryMapValueInstanceResolverCancel;
  onFailure: PlatformTypesRegistryMapValueInstanceResolverOnFailure;
  onSuccess: PlatformTypesRegistryMapValueInstanceResolverOnSuccess;
  resolve: PlatformTypesRegistryMapValueInstanceResolverResolve;
  send: PlatformTypesRegistryMapValueInstanceResolverSend;
}

export type PlatformTypesRegistryMapValueInstanceResolverCancel = () => unknown;

export type PlatformTypesRegistryMapValueInstanceResolverOnFailure = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceResolverOnSuccess = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceResolverResolve = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceResolverSend = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSend = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSend2 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSendESS2NAWithOptimization = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceSendESStats = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSendEvents = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSendToGabito = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceSequenceIdProvider {
  getId: PlatformTypesRegistryMapValueInstanceSequenceIdProviderGetId;
  getIdHash: PlatformTypesRegistryMapValueInstanceSequenceIdProviderGetIdHash;
  installationId: string;
}

export type PlatformTypesRegistryMapValueInstanceSequenceIdProviderGetId = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceIdProviderGetIdHash = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceSequenceNumberProvider {
  commitSequenceNumber: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderCommitSequenceNumber;
  generateNextEventSequenceNumber: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGenerateNextEventSequenceNumber;
  generateNextGlobalSequenceNumber: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGenerateNextGlobalSequenceNumber;
  generateNextSequenceNumber: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGenerateNextSequenceNumber;
  getEventsSequenceNumbers: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGetEventsSequenceNumbers;
  getNextSequenceNumber: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGetNextSequenceNumber;
  getSequenceNumbersPerSequenceId: PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGetSequenceNumbersPerSequenceId;
  storageManager: PlatformTypesRegistryMapValueInstanceStorageManager;
}

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderCommitSequenceNumber = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGenerateNextEventSequenceNumber =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGenerateNextGlobalSequenceNumber =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGenerateNextSequenceNumber =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGetEventsSequenceNumbers = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGetNextSequenceNumber = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceSequenceNumberProviderGetSequenceNumbersPerSequenceId =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSetTimeReporter = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSetupInstallationId = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSetValues = (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceState {
  isAuthorized: boolean;
  retryAt: null;
  retryAttempt: null;
  token: PlatformTypesRegistryMapValueInstanceToken;
}

export interface PlatformTypesRegistryMapValueInstanceStatsProvider {
  addDroppedEventsCounters: PlatformTypesRegistryMapValueInstanceStatsProviderAddDroppedEventsCounters;
  addDroppedEventsCountersData: PlatformTypesRegistryMapValueInstanceStatsProviderAddDroppedEventsCountersData;
  addEventsToESSData: PlatformTypesRegistryMapValueInstanceStatsProviderAddEventsToESSData;
  addLossStatsData: PlatformTypesRegistryMapValueInstanceStatsProviderAddLossStatsData;
  getInitialESSData: PlatformTypesRegistryMapValueInstanceStatsProviderGetInitialESSData;
  provideEventSenderStats: PlatformTypesRegistryMapValueInstanceStatsProviderProvideEventSenderStats;
}

export type PlatformTypesRegistryMapValueInstanceStatsProviderAddDroppedEventsCounters = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStatsProviderAddDroppedEventsCountersData = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStatsProviderAddEventsToESSData = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStatsProviderAddLossStatsData = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStatsProviderGetInitialESSData = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStatsProviderProvideEventSenderStats = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceStorageManager {
  addItemInDroppedCountersStorage: PlatformTypesRegistryMapValueInstanceStorageManagerAddItemInDroppedCountersStorage;
  addItemInEventsStorage: PlatformTypesRegistryMapValueInstanceStorageManagerAddItemInEventsStorage;
  canMakeDroppedCountersStorageFull: PlatformTypesRegistryMapValueInstanceStorageManagerCanMakeDroppedCountersStorageFull;
  canMakeEventsStorageFull: PlatformTypesRegistryMapValueInstanceStorageManagerCanMakeEventsStorageFull;
  clear: PlatformTypesRegistryMapValueInstanceStorageManagerClear;
  configureMaxStorageCapacity: PlatformTypesRegistryMapValueInstanceStorageManagerConfigureMaxStorageCapacity;
  createStorage: PlatformTypesRegistryMapValueInstanceStorageManagerCreateStorage;
  currentTotalSizeForDroppedCounters: number;
  currentTotalSizeForEvents: number;
  flushStrategy: PlatformTypesRegistryMapValueInstanceStorageManagerStorageFlushStrategy;
  getItem: PlatformTypesRegistryMapValueInstanceStorageManagerGetItem;
  getItemSizeInBytes: PlatformTypesRegistryMapValueInstanceStorageManagerGetItemSizeInBytes;
  getKeys: PlatformTypesRegistryMapValueInstanceStorageManagerGetKeys;
  getOrCreateId: PlatformTypesRegistryMapValueInstanceStorageManagerGetOrCreateId;
  maxStorageCapacityForDroppedCountersInBytes: number;
  maxStorageCapacityForEventsInBytes: number;
  removeItemInDroppedCountersStorage: PlatformTypesRegistryMapValueInstanceStorageManagerRemoveItemInDroppedCountersStorage;
  removeItemInEventsStorage: PlatformTypesRegistryMapValueInstanceStorageManagerRemoveItemInEventsStorage;
  setCounterItem: PlatformTypesRegistryMapValueInstanceStorageManagerSetCounterItem;
  setItem: PlatformTypesRegistryMapValueInstanceStorageManagerSetItem;
  setTotalDroppedCountersStorageSizeAtStartup: PlatformTypesRegistryMapValueInstanceStorageManagerSetTotalDroppedCountersStorageSizeAtStartup;
  setTotalEventStorageSizeAtStartup: PlatformTypesRegistryMapValueInstanceStorageManagerSetTotalEventStorageSizeAtStartup;
  storage: PlatformTypesRegistryMapValueInstanceStorageManagerStorage;
  storageAdapter: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapter;
  storageKeyPrefix: string;
  storageType: string;
  updateItemInDroppedCountersStorage: PlatformTypesRegistryMapValueInstanceStorageManagerUpdateItemInDroppedCountersStorage;
  updateItemInEventsStorage: PlatformTypesRegistryMapValueInstanceStorageManagerUpdateItemInEventsStorage;
}

export type PlatformTypesRegistryMapValueInstanceStorageManagerAddItemInDroppedCountersStorage = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerAddItemInEventsStorage = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerCanMakeDroppedCountersStorageFull = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerCanMakeEventsStorageFull = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerClear = () => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerConfigureMaxStorageCapacity = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerCreateStorage = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerGetItem = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerGetItemSizeInBytes = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerGetKeys = () => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerGetOrCreateId = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerRemoveItemInDroppedCountersStorage =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerRemoveItemInEventsStorage = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerSetCounterItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerSetItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerSetTotalDroppedCountersStorageSizeAtStartup =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerSetTotalEventStorageSizeAtStartup =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceStorageManagerStorage {
  adapter: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapter;
  flushStrategy: PlatformTypesRegistryMapValueInstanceStorageManagerStorageFlushStrategy;
  maxCapacityForDroppedInPercentage: number;
  maxCapacityInBytes: number;
}

export interface PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapter {
  clear: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterClear;
  getItem: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterGetItem;
  getKeys: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterGetKeys;
  removeItem: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterRemoveItem;
  setItem: PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterSetItem;
}

export type PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterClear = () => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterGetItem = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterGetKeys =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterRemoveItem = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerStorageAdapterSetItem = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceStorageManagerStorageFlushStrategy {
  interval: number;
  kind: string;
}

export type PlatformTypesRegistryMapValueInstanceStorageManagerUpdateItemInDroppedCountersStorage =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceStorageManagerUpdateItemInEventsStorage = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceStoreEvent = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSub = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement10 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement2 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement3 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement4 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement5 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement6 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement7 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement8 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubsSetElement9 = () => unknown;

export type PlatformTypesRegistryMapValueInstanceSubValues = (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceToken {
  accessToken: string;
  accessTokenExpirationTimestampMs: number;
  isAnonymous: boolean;
  tokenType: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransport {
  _Fetch: PlatformTypesRegistryMapValueInstanceTransportFetch;
  _XHR: PlatformTypesRegistryMapValueInstanceTransportXHR;
  _authenticate: PlatformTypesRegistryMapValueInstanceTransportAuthenticate2;
  _authenticateCalled: boolean;
  _authenticateWithToken: PlatformTypesRegistryMapValueInstanceTransportAuthenticateWithToken;
  _authenticationPromise: null;
  _connect: PlatformTypesRegistryMapValueInstanceTransportConnect;
  _connectCalled: boolean;
  _connectToEndpoints: PlatformTypesRegistryMapValueInstanceTransportConnectToEndpoints;
  _connectionObserver: PlatformTypesRegistryMapValueInstanceTransportConnectionObserver;
  _counter: PlatformTypesRegistryMapValueInstanceTransportCounter;
  _createReconnector: PlatformTypesRegistryMapValueInstanceTransportCreateReconnector;
  _disableAutoLogout: boolean;
  _disconnect: PlatformTypesRegistryMapValueInstanceTransportDisconnect;
  _disconnectBeforeUnload: boolean;
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _endpoints: PlatformTypesRegistryMapValueInstanceTransportEndpoints;
  _endpointsProvider: PlatformTypesRegistryMapValueInstanceTransportEndpointsProvider;
  _forcePolyfillTypes: PlatformTypesRegistryMapValueInstanceTransportForcePolyfillTypes;
  _getQuickDisconnectTimeout: PlatformTypesRegistryMapValueInstanceTransportGetQuickDisconnectTimeout;
  _handleRetriedRequestError: PlatformTypesRegistryMapValueInstanceTransportHandleRetriedRequestError;
  _init: PlatformTypesRegistryMapValueInstanceTransportInit;
  _initTime: number;
  _isReconnecting: boolean;
  _lastDisconnect: number;
  _lastToken: string;
  _lastTokenExpiry: number;
  _listeners: PlatformTypesRegistryMapValueInstanceTransportListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceTransportMetaListeners;
  _onAddListener: PlatformTypesRegistryMapValueInstanceTransportOnAddListener;
  _onAuthenticated: PlatformTypesRegistryMapValueInstanceTransportOnAuthenticated;
  _onAuthenticationFailed: PlatformTypesRegistryMapValueInstanceTransportOnAuthenticationFailed;
  _onConnected: PlatformTypesRegistryMapValueInstanceTransportOnConnected;
  _onLogout: PlatformTypesRegistryMapValueInstanceTransportOnLogout;
  _onOffline: PlatformTypesRegistryMapValueInstanceTransportOnOffline;
  _onOnline: PlatformTypesRegistryMapValueInstanceTransportOnOnline;
  _onPluginDisconnected: PlatformTypesRegistryMapValueInstanceTransportOnPluginDisconnected;
  _onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportOnRemoveListener;
  _ownerRef: PlatformTypesRegistryMapValueInstanceTransportOwnerRef;
  _parseProvidedToken: PlatformTypesRegistryMapValueInstanceTransportParseProvidedToken;
  _performConnect: PlatformTypesRegistryMapValueInstanceTransportPerformConnect;
  _performDisconnect: PlatformTypesRegistryMapValueInstanceTransportPerformDisconnect;
  _pluginMediator: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediator;
  _plugins: PlatformTypesRegistryMapValueInstanceTransportPlugins;
  _processRequestArgs: PlatformTypesRegistryMapValueInstanceTransportProcessRequestArgs;
  _quickDisconnectCount: number;
  _reconnectTimeout: number;
  _reconnectionRetries: number;
  _refreshToken: PlatformTypesRegistryMapValueInstanceTransportRefreshToken;
  _refreshTokenPromise: null;
  _requestMode: string;
  _runStateAwareQueues: PlatformTypesRegistryMapValueInstanceTransportRunStateAwareQueues;
  _sendFireAndForgetRequest: PlatformTypesRegistryMapValueInstanceTransportSendFireAndForgetRequest;
  _sendRequest: PlatformTypesRegistryMapValueInstanceTransportSendRequest;
  _sendRetriedRequest: PlatformTypesRegistryMapValueInstanceTransportSendRetriedRequest;
  _setAuthHeader: PlatformTypesRegistryMapValueInstanceTransportSetAuthHeader;
  _stateAwareListeners: PlatformTypesRegistryMapValueInstanceTransportStateAwareListeners;
  _stateAwareOperationMetrics: PlatformTypesRegistryMapValueInstanceTransportStateAwareOperationMetrics;
  _stateAwareRunners: PlatformTypesRegistryMapValueInstanceTransportStateAwareRunners;
  _stateMask: number;
  _tokenProvider: PlatformTypesRegistryMapValueInstanceTransportTokenProvider;
  _tryExpandSpecialURL: PlatformTypesRegistryMapValueInstanceTransportTryExpandSpecialURL;
  _tryToReconnect: PlatformTypesRegistryMapValueInstanceTransportTryToReconnect;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  addPlugin: PlatformTypesRegistryMapValueInstanceTransportAddPlugin;
  appendLastTokenQuery: PlatformTypesRegistryMapValueInstanceTransportAppendLastTokenQuery;
  appendTokenQuery: PlatformTypesRegistryMapValueInstanceTransportAppendTokenQuery;
  authenticate: PlatformTypesRegistryMapValueInstanceTransportAuthenticate;
  connect: PlatformTypesRegistryMapValueInstanceTransportConnect2;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  disconnect: PlatformTypesRegistryMapValueInstanceTransportDisconnect2;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  forceDisconnect: PlatformTypesRegistryMapValueInstanceTransportForceDisconnect;
  forceTokenRefresh: PlatformTypesRegistryMapValueInstanceTransportForceTokenRefresh;
  getConnectionId: PlatformTypesRegistryMapValueInstanceTransportGetConnectionId;
  getEndpoints: PlatformTypesRegistryMapValueInstanceTransportGetEndpoints;
  getInitTime: PlatformTypesRegistryMapValueInstanceTransportGetInitTime;
  getLastToken: PlatformTypesRegistryMapValueInstanceTransportGetLastToken;
  getPluginAPI: PlatformTypesRegistryMapValueInstanceTransportGetPluginAPI;
  handlePushRequests: PlatformTypesRegistryMapValueInstanceTransportHandlePushRequests;
  hasOwnerRef: PlatformTypesRegistryMapValueInstanceTransportHasOwnerRef;
  hasPlugin: PlatformTypesRegistryMapValueInstanceTransportHasPlugin;
  isAuthenticated: PlatformTypesRegistryMapValueInstanceTransportIsAuthenticated;
  isConnected: PlatformTypesRegistryMapValueInstanceTransportIsConnected;
  isOnline: PlatformTypesRegistryMapValueInstanceTransportIsOnline;
  isReconnecting: PlatformTypesRegistryMapValueInstanceTransportIsReconnecting;
  matchMessages: PlatformTypesRegistryMapValueInstanceTransportMatchMessages;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
  removePlugin: PlatformTypesRegistryMapValueInstanceTransportRemovePlugin;
  request: PlatformTypesRegistryMapValueInstanceTransportRequest;
  toPublic: PlatformTypesRegistryMapValueInstanceTransportToPublic;
  unhandlePushRequests: PlatformTypesRegistryMapValueInstanceTransportUnhandlePushRequests;
  unmatchMessages: PlatformTypesRegistryMapValueInstanceTransportUnmatchMessages;
}

export type PlatformTypesRegistryMapValueInstanceTransportAddPlugin = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportAppendLastTokenQuery = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportAppendTokenQuery = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportAuthenticate = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportAuthenticate2 = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportAuthenticateWithToken = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnect = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnect2 = () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserver {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverMetaListeners;
  _navigator: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigator;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  isOnline: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverIsOnline;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverIsOnline =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListeners {
  beforeunload: Array<PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersBeforeunloadItem>;
  offline: Array<PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOfflineItem>;
  online: Array<PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOnlineItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersBeforeunloadItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersBeforeunloadItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersBeforeunloadItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersBeforeunloadItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersBeforeunloadItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOfflineItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOfflineItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOfflineItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOfflineItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOfflineItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOnlineItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOnlineItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOnlineItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOnlineItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverListenersOnlineItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverMetaListenersRemove;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverMetaListenersAdd =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverMetaListenersRemove =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigator {
  adAuctionComponents: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorAdAuctionComponents;
  appCodeName: string;
  appName: string;
  appVersion: string;
  bluetooth: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorBluetooth;
  canLoadAdAuctionFencedFrame: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCanLoadAdAuctionFencedFrame;
  canShare: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCanShare;
  clearAppBadge: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClearAppBadge;
  clearOriginJoinedAdInterestGroups: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClearOriginJoinedAdInterestGroups;
  clipboard: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboard;
  connection: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorConnection;
  cookieEnabled: boolean;
  createAuctionNonce: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCreateAuctionNonce;
  credentials: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentials;
  deprecatedReplaceInURN: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorDeprecatedReplaceInURN;
  deprecatedRunAdAuctionEnforcesKAnonymity: boolean;
  deprecatedURNToURL: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorDeprecatedURNToURL;
  deviceMemory: number;
  devicePosture: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorDevicePosture;
  doNotTrack: null;
  geolocation: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocation;
  getBattery: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetBattery;
  getGamepads: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetGamepads;
  getInstalledRelatedApps: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetInstalledRelatedApps;
  getInterestGroupAdAuctionData: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetInterestGroupAdAuctionData;
  getUserMedia: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetUserMedia;
  gpu: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpu;
  hardwareConcurrency: number;
  hid: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorHid;
  ink: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorInk;
  javaEnabled: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorJavaEnabled;
  joinAdInterestGroup: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorJoinAdInterestGroup;
  keyboard: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboard;
  language: string;
  languages: Array<string>;
  leaveAdInterestGroup: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLeaveAdInterestGroup;
  locks: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLocks;
  login: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLogin;
  managed: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorManaged;
  maxTouchPoints: number;
  mediaCapabilities: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaCapabilities;
  mediaDevices: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevices;
  mediaSession: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSession;
  mimeTypes: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes;
  onLine: boolean;
  pdfViewerEnabled: boolean;
  permissions: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPermissions;
  platform: string;
  plugins: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins;
  presentation: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPresentation;
  product: string;
  productSub: string;
  protectedAudience: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorProtectedAudience;
  registerProtocolHandler: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRegisterProtocolHandler;
  requestMIDIAccess: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRequestMIDIAccess;
  requestMediaKeySystemAccess: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRequestMediaKeySystemAccess;
  runAdAuction: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRunAdAuction;
  scheduling: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorScheduling;
  sendBeacon: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSendBeacon;
  serial: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSerial;
  serviceWorker: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorker;
  setAppBadge: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSetAppBadge;
  share: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorShare;
  storage: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorage;
  storageBuckets: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBuckets;
  unregisterProtocolHandler: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUnregisterProtocolHandler;
  updateAdInterestGroups: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUpdateAdInterestGroups;
  usb: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUsb;
  userActivation: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserActivation;
  userAgent: string;
  userAgentData: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentData;
  vendor: string;
  vendorSub: string;
  vibrate: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVibrate;
  virtualKeyboard: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboard;
  wakeLock: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWakeLock;
  webdriver: boolean;
  webkitGetUserMedia: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitGetUserMedia;
  webkitPersistentStorage: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorage;
  webkitTemporaryStorage: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorage;
  windowControlsOverlay: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWindowControlsOverlay;
  xr: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXr;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorAdAuctionComponents =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorBluetooth {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getAvailability: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorBluetoothGetAvailability;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  requestDevice: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorBluetoothRequestDevice;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorBluetoothGetAvailability =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorBluetoothRequestDevice =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCanLoadAdAuctionFencedFrame =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCanShare =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClearAppBadge =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClearOriginJoinedAdInterestGroups =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboard {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  read: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardRead;
  readText: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardReadText;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  write: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardWrite;
  writeText: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardWriteText;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardRead =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardReadText =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardWrite =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorClipboardWriteText =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorConnection {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  downlink: number;
  effectiveType: string;
  onchange: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  rtt: number;
  saveData: boolean;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCreateAuctionNonce =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentials {
  create: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsCreate;
  get: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsGet;
  preventSilentAccess: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsPreventSilentAccess;
  store: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsStore;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsCreate =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsGet =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsPreventSilentAccess =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorCredentialsStore =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorDeprecatedReplaceInURN =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorDeprecatedURNToURL =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorDevicePosture {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  onchange: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocation {
  clearWatch: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocationClearWatch;
  getCurrentPosition: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocationGetCurrentPosition;
  watchPosition: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocationWatchPosition;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocationClearWatch =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocationGetCurrentPosition =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGeolocationWatchPosition =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetBattery =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetGamepads =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetInstalledRelatedApps =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetInterestGroupAdAuctionData =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGetUserMedia =
  (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpu {
  getPreferredCanvasFormat: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuGetPreferredCanvasFormat;
  requestAdapter: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuRequestAdapter;
  wgslLanguageFeatures: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeatures;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuGetPreferredCanvasFormat =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuRequestAdapter =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeatures {
  entries: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesEntries;
  forEach: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesForEach;
  has: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesHas;
  keys: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesKeys;
  size: number;
  values: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesValues;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesEntries =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesForEach =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesHas =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesKeys =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorGpuWgslLanguageFeaturesValues =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorHid {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getDevices: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorHidGetDevices;
  onconnect: null;
  ondisconnect: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  requestDevice: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorHidRequestDevice;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorHidGetDevices =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorHidRequestDevice =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorInk {
  requestPresenter: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorInkRequestPresenter;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorInkRequestPresenter =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorJavaEnabled =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorJoinAdInterestGroup =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboard {
  getLayoutMap: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboardGetLayoutMap;
  lock: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboardLock;
  unlock: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboardUnlock;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboardGetLayoutMap =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboardLock =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorKeyboardUnlock =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLeaveAdInterestGroup =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLocks {
  query: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLocksQuery;
  request: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLocksRequest;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLocksQuery =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLocksRequest =
  (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLogin {
  setStatus: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLoginSetStatus;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorLoginSetStatus =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorManaged {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getManagedConfiguration: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorManagedGetManagedConfiguration;
  onmanagedconfigurationchange: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorManagedGetManagedConfiguration =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaCapabilities {
  decodingInfo: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaCapabilitiesDecodingInfo;
  encodingInfo: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaCapabilitiesEncodingInfo;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaCapabilitiesDecodingInfo =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaCapabilitiesEncodingInfo =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevices {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  enumerateDevices: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesEnumerateDevices;
  getDisplayMedia: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesGetDisplayMedia;
  getSupportedConstraints: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesGetSupportedConstraints;
  getUserMedia: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesGetUserMedia;
  ondevicechange: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  setCaptureHandleConfig: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesSetCaptureHandleConfig;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesEnumerateDevices =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesGetDisplayMedia =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesGetSupportedConstraints =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesGetUserMedia =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaDevicesSetCaptureHandleConfig =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSession {
  metadata: null;
  playbackState: string;
  setActionHandler: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetActionHandler;
  setCameraActive: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetCameraActive;
  setMicrophoneActive: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetMicrophoneActive;
  setPositionState: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetPositionState;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetActionHandler =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetCameraActive =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetMicrophoneActive =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMediaSessionSetPositionState =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes0;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes1;
  "application/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes0;
  "text/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes1;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypesItem;
  length: number;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypesNamedItem;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes0 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypes1 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  suffixes: string;
  type: string;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypesItem =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorMimeTypesNamedItem =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPermissions {
  query: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPermissionsQuery;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPermissionsQuery =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1;
  "2": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2;
  "3": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3;
  "4": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4;
  "Chrome PDF Viewer": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1;
  "Chromium PDF Viewer": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2;
  "Microsoft Edge PDF Viewer": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3;
  "PDF Viewer": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  "WebKit built-in PDF": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPluginsItem;
  length: number;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPluginsNamedItem;
  refresh: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPluginsRefresh;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0 {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins00;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins01;
  "application/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Applicationpdf;
  "text/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Textpdf;
  description: string;
  filename: string;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Item;
  length: number;
  name: string;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0NamedItem;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins00 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins01 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Applicationpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  suffixes: string;
  type: string;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Item =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0NamedItem =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Textpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1 {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins10;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins11;
  "application/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1Applicationpdf;
  "text/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1Textpdf;
  description: string;
  filename: string;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Item;
  length: number;
  name: string;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0NamedItem;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins10 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins11 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1Applicationpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1Textpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins1;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2 {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins20;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins21;
  "application/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2Applicationpdf;
  "text/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2Textpdf;
  description: string;
  filename: string;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Item;
  length: number;
  name: string;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0NamedItem;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins20 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins21 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2Applicationpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2Textpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins2;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3 {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins30;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins31;
  "application/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3Applicationpdf;
  "text/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3Textpdf;
  description: string;
  filename: string;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Item;
  length: number;
  name: string;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0NamedItem;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins30 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins31 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3Applicationpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3Textpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins3;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4 {
  "0": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins40;
  "1": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins41;
  "application/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4Applicationpdf;
  "text/pdf": PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4Textpdf;
  description: string;
  filename: string;
  item: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0Item;
  length: number;
  name: string;
  namedItem: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins0NamedItem;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins40 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins41 {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4Applicationpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4;
  suffixes: string;
  type: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4Textpdf {
  description: string;
  enabledPlugin: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPlugins4;
  suffixes: string;
  type: string;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPluginsItem = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPluginsNamedItem =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPluginsRefresh =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorPresentation {
  defaultRequest: null;
  receiver: null;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorProtectedAudience {
  queryFeatureSupport: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorProtectedAudienceQueryFeatureSupport;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorProtectedAudienceQueryFeatureSupport =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRegisterProtocolHandler =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRequestMediaKeySystemAccess =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRequestMIDIAccess =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorRunAdAuction =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorScheduling {
  isInputPending: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSchedulingIsInputPending;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSchedulingIsInputPending =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSendBeacon = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSerial {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getPorts: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSerialGetPorts;
  onconnect: null;
  ondisconnect: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  requestPort: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSerialRequestPort;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSerialGetPorts =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSerialRequestPort =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorker {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  controller: null;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getRegistration: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerGetRegistration;
  getRegistrations: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerGetRegistrations;
  oncontrollerchange: null;
  onmessage: null;
  onmessageerror: null;
  ready: Promise<unknown>;
  register: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerRegister;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  startMessages: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerStartMessages;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerGetRegistration =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerGetRegistrations =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerRegister =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorServiceWorkerStartMessages =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorSetAppBadge =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorShare =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorage {
  estimate: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageEstimate;
  getDirectory: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageGetDirectory;
  persist: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStoragePersist;
  persisted: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStoragePersisted;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBuckets {
  delete: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBucketsDelete;
  keys: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBucketsKeys;
  open: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBucketsOpen;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBucketsDelete =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBucketsKeys =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageBucketsOpen =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageEstimate =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStorageGetDirectory =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStoragePersist =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorStoragePersisted =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUnregisterProtocolHandler =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUpdateAdInterestGroups =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUsb {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getDevices: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUsbGetDevices;
  onconnect: null;
  ondisconnect: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  requestDevice: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUsbRequestDevice;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUsbGetDevices =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUsbRequestDevice =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserActivation {
  hasBeenActive: boolean;
  isActive: boolean;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentData {
  brands: Array<
    | PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataBrandsItem
    | PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataBrandsItem2
  >;
  getHighEntropyValues: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataGetHighEntropyValues;
  mobile: boolean;
  platform: string;
  toJSON: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataToJSON;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataBrandsItem {
  brand: string;
  version: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataBrandsItem2 {
  brand: string;
  version: string;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataGetHighEntropyValues =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorUserAgentDataToJSON =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVibrate = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboard {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  boundingRect: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardBoundingRect;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  hide: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardHide;
  ongeometrychange: null;
  overlaysContent: boolean;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  show: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardShow;
}

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardBoundingRect {
  bottom: number;
  height: number;
  left: number;
  right: number;
  toJSON: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardBoundingRectToJSON;
  top: number;
  width: number;
  x: number;
  y: number;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardBoundingRectToJSON =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardHide =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorVirtualKeyboardShow =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWakeLock {
  request: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWakeLockRequest;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWakeLockRequest =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitGetUserMedia =
  (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorage {
  queryUsageAndQuota: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorageQueryUsageAndQuota;
  requestQuota: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorageRequestQuota;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorageQueryUsageAndQuota =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWebkitTemporaryStorageRequestQuota =
  (arg0: any) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWindowControlsOverlay {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  getTitlebarAreaRect: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWindowControlsOverlayGetTitlebarAreaRect;
  ongeometrychange: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  visible: boolean;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorWindowControlsOverlayGetTitlebarAreaRect =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXr {
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  isSessionSupported: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXrIsSessionSupported;
  ondevicechange: null;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  requestSession: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXrRequestSession;
  supportsSession: PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXrSupportsSession;
}

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXrIsSessionSupported =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXrRequestSession =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectionObserverNavigatorXrSupportsSession =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportConnectToEndpoints = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportCounter {
  _baseTime: number;
  _ceiling: number;
  _curve: string;
  _jitter: boolean;
  getTime: PlatformTypesRegistryMapValueInstanceTransportCounterGetTime;
}

export type PlatformTypesRegistryMapValueInstanceTransportCounterGetTime = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportCreateReconnector = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportDisconnect = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportDisconnect2 = () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportEndpoints {
  dealer: string;
  webapi: string;
  webgate: string;
}

export type PlatformTypesRegistryMapValueInstanceTransportEndpointsProvider = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportFetch {
  __esModule: boolean;
  isSupported: PlatformTypesRegistryMapValueInstanceTransportFetchIsSupported;
  request: PlatformTypesRegistryMapValueInstanceTransportFetchRequest;
}

export type PlatformTypesRegistryMapValueInstanceTransportFetchIsSupported = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportFetchRequest = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportForceDisconnect = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportForcePolyfillTypes = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportForceTokenRefresh = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportGetConnectionId = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportGetEndpoints = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportGetInitTime = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportGetLastToken = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportGetPluginAPI = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportGetQuickDisconnectTimeout = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportHandlePushRequests = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportHandleRetriedRequestError = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportHasOwnerRef = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportHasPlugin = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportInit = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportIsAuthenticated = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportIsConnected = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportIsOnline = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportIsReconnecting = () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportListeners {
  access_token: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItem2
    | PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItem3
  >;
  authenticated: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem2
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem3
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem4
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem5
  >;
  authentication_failed: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItem2
  >;
  connected: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItem2
  >;
  disconnected: Array<PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItem>;
  endpoints_resolved: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItem2
  >;
  logged_out: Array<PlatformTypesRegistryMapValueInstanceTransportListenersLoggedOutItem>;
  offline: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItem2
  >;
  online: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItem2
  >;
  reconnected: Array<
    | PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItem
    | PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItem2
  >;
  reconnecting: Array<PlatformTypesRegistryMapValueInstanceTransportListenersReconnectingItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemOptions2;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItem3 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemListener3;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemOptions3;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemListener2 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemListener3 = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemOptions2 = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAccessTokenItemOptions3 = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions2;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem3 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener3;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions3;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem4 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener4;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions4;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItem5 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener5;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions5;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener2 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener3 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener4 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemListener5 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions2 {
  once: boolean;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions3 {
  once: boolean;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions4 {
  once: boolean;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticatedItemOptions5 {
  once: boolean;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemOptions2;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemListener2 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemOptions =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersAuthenticationFailedItemOptions2 =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemOptions2;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemListener2 =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemOptions2 = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersDisconnectedItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemOptions2;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemListener2 =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemOptions =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersEndpointsResolvedItemOptions2 =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersLoggedOutItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersLoggedOutItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersLoggedOutItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersLoggedOutItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersLoggedOutItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemOptions2;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersOfflineItemOptions2 = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemOptions2;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemListener2 = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersOnlineItemOptions2 = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersConnectedItemListener2;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItemOptions;
}

export interface PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItem2 {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItemOptions2;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportListenersReconnectedItemOptions2 = Record<
  string,
  unknown
>;

export interface PlatformTypesRegistryMapValueInstanceTransportListenersReconnectingItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportListenersReconnectingItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportListenersReconnectingItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportListenersReconnectingItemListener =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportListenersReconnectingItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceTransportMatchMessages = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemove;
}

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersAdd {
  authenticated: Array<PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddAuthenticatedItem>;
  connected: Array<PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectedItem>;
  connection_id: Array<PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectionIdItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddAuthenticatedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddAuthenticatedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddAuthenticatedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddAuthenticatedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddAuthenticatedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectedItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectionIdItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectionIdItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectionIdItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectionIdItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersAddConnectionIdItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemove {
  authenticated: Array<PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveAuthenticatedItem>;
  connected: Array<PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectedItem>;
  connection_id: Array<PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectionIdItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveAuthenticatedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveAuthenticatedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveAuthenticatedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveAuthenticatedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveAuthenticatedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectionIdItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectionIdItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectionIdItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectionIdItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportMetaListenersRemoveConnectionIdItemOptions =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportOnAddListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnAuthenticated = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnAuthenticationFailed = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnConnected = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnLogout = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnOffline = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnOnline = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnPluginDisconnected = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOnRemoveListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportOwnerRef = Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportParseProvidedToken = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPerformConnect = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPerformDisconnect = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportPlugins {
  "desktop-lifecycle-plugin": PlatformTypesRegistryMapValueInstance6;
  dealer: PlatformTypesRegistryMapValueInstanceTransportPluginsDealer;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealer {
  _dealer: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealer;
  _mediator: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediator;
  _onDealerConnectionId: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItemListener;
  _onDealerDisconnected: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItemListener;
  _onDealerError: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItemListener;
  _onDealerMessage: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItemListener;
  _onDealerRequest: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItemListener;
  _onTransportAuthenticate: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportAuthenticate;
  _onTransportConnect: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportConnect;
  _onTransportDisconnect: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportDisconnect;
  api: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerApi;
  attach: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerAttach;
  detach: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDetach;
  name: string;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerApi {
  getConnectionInfo: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerApiGetConnectionInfo;
  hasConnectionInfo: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerApiHasConnectionInfo;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerApiGetConnectionInfo =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerApiHasConnectionInfo =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerAttach = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealer {
  _WebSocket: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerWebSocket;
  _closeBeforeEventsRejector: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCloseBeforeEventsRejector;
  _connected: boolean;
  _connectionId: null;
  _connectionURI: null;
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _endpoint: string;
  _handleClose: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleClose;
  _handleDisconnectBeforeEvents: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleDisconnectBeforeEvents;
  _handleError: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleError;
  _handleMessage: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleMessage;
  _handleOpen: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleOpen;
  _heartbeatTimeout: number;
  _heartbeatTimeoutToken: number;
  _heartbeatToken: number;
  _lastPingDeferred: null;
  _listeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerMetaListeners;
  _onHeartbeatError: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnHeartbeatError;
  _onHeartbeatSuccess: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnHeartbeatSuccess;
  _parseMessage: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerParseMessage;
  _prepareConnectionId: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerPrepareConnectionId;
  _reply: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerReply;
  _socket: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocket;
  _startHeartbeat: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerStartHeartbeat;
  _stopHeartbeat: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerStopHeartbeat;
  _waitingForConnectionId: boolean;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  authenticate: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAuthenticate;
  connect: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerConnect;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  disconnect: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDisconnect;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  getConnectionId: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerGetConnectionId;
  getConnectionInfo: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerGetConnectionInfo;
  hasConnectionId: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHasConnectionId;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  ping: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerPing;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAuthenticate = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCloseBeforeEventsRejector =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerConnect = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDisconnect =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerGetConnectionId =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerGetConnectionInfo =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleClose = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleDisconnectBeforeEvents =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleError = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleMessage = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHandleOpen = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerHasConnectionId =
  () => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListeners {
  connection_id: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItem>;
  disconnected: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItem>;
  error: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItem>;
  message: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItem>;
  request: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersConnectionIdItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersDisconnectedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersErrorItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersMessageItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerListenersRequestItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerMetaListenersRemove;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerMetaListenersAdd =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerMetaListenersRemove =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnHeartbeatError =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnHeartbeatSuccess =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerParseMessage = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerPing = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerPrepareConnectionId = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerReply = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocket {
  CLOSED: number;
  CLOSING: number;
  CONNECTING: number;
  OPEN: number;
  addEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener;
  binaryType: string;
  bufferedAmount: number;
  close: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketClose;
  dispatchEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent;
  extensions: string;
  onclose: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnclose;
  onerror: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnerror;
  onmessage: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnmessage;
  onopen: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnopen;
  protocol: string;
  readyState: number;
  removeEventListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener;
  send: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketSend;
  url: string;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketAddEventListener =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketClose =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketDispatchEvent = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnclose = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnerror =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnmessage = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketOnopen =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketRemoveEventListener =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerSocketSend = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerStartHeartbeat = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerStopHeartbeat =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerWebSocket = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDetach = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediator {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListeners {
  plugin_connection_info: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginConnectionInfoItem>;
  plugin_disconnected: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginDisconnectedItem>;
  plugin_message: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginMessageItem>;
  transport_authenticate: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportAuthenticateItem>;
  transport_before_process_request: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItem>;
  transport_before_send_request: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItem>;
  transport_connect: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportConnectItem>;
  transport_disconnect: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportDisconnectItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginConnectionInfoItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginConnectionInfoItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginConnectionInfoItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginConnectionInfoItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginConnectionInfoItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginDisconnectedItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginDisconnectedItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginDisconnectedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginDisconnectedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginDisconnectedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginMessageItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginMessageItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginMessageItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginMessageItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersPluginMessageItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportAuthenticateItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportAuthenticate;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportAuthenticateItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportAuthenticateItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeProcessRequestItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportBeforeSendRequestItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportConnectItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportConnect;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportConnectItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportConnectItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportDisconnectItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportDisconnect;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportDisconnectItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorListenersTransportDisconnectItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemove;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAdd {
  transport_authenticate: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportAuthenticateItem>;
  transport_connect: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportConnectItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportAuthenticateItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportAuthenticateItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportAuthenticateItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportAuthenticateItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportAuthenticateItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportConnectItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportConnectItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportConnectItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportConnectItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersAddTransportConnectItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemove {
  transport_authenticate: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportAuthenticateItem>;
  transport_connect: Array<PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportConnectItem>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportAuthenticateItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportAuthenticateItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportAuthenticateItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportAuthenticateItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportAuthenticateItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportConnectItem {
  listener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportConnectItemListener;
  options: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportConnectItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportConnectItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerMediatorMetaListenersRemoveTransportConnectItemOptions =
  Record<string, unknown>;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportAuthenticate = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportConnect = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportPluginsDealerOnTransportDisconnect =
  () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportProcessRequestArgs = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportRefreshToken = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportRemoveAllListeners = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportRemovePlugin = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportRequest = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportRunStateAwareQueues = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportSendFireAndForgetRequest = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportSendRequest = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportSendRetriedRequest = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportSetAuthHeader = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportStateAwareListeners {
  authenticated: Array<unknown>;
  connected: Array<unknown>;
  connection_id: Array<unknown>;
  transport_authenticate: Array<unknown>;
  transport_connect: Array<unknown>;
}

export interface PlatformTypesRegistryMapValueInstanceTransportStateAwareOperationMetrics {
  authenticated: PlatformTypesRegistryMapValueInstanceTransportStateAwareOperationMetricsAuthenticated;
}

export interface PlatformTypesRegistryMapValueInstanceTransportStateAwareOperationMetricsAuthenticated {
  end_time: number;
  start_time: number;
}

export interface PlatformTypesRegistryMapValueInstanceTransportStateAwareRunners {
  authenticated: null;
  connected: null;
  connection_id: null;
  transport_authenticate: null;
  transport_connect: null;
}

export type PlatformTypesRegistryMapValueInstanceTransportTokenProvider = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportToPublic = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportTryExpandSpecialURL = (
  arg0: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportTryToReconnect = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportUnhandlePushRequests = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceTransportUnmatchMessages = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceTransportXHR {
  __esModule: boolean;
  request: PlatformTypesRegistryMapValueInstanceTransportXHRRequest;
}

export type PlatformTypesRegistryMapValueInstanceTransportXHRRequest = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceTryAuthenticate = () => unknown;

export type PlatformTypesRegistryMapValueInstanceTryAuthorize = () => unknown;

export interface PlatformTypesRegistryMapValueInstanceUploaders {
  authorized: PlatformTypesRegistryMapValueInstanceUploadersAuthorized;
  unauthorized: PlatformTypesRegistryMapValueInstanceUploadersUnauthorized;
}

export interface PlatformTypesRegistryMapValueInstanceUploadersAuthorized {
  _authorize: boolean;
  _backoff: boolean;
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _endpoint: string;
  _listeners: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedMetaListeners;
  _parseUploadResponse: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedParseUploadResponse;
  _suppressPersist: boolean;
  _transport: PlatformTypesRegistryMapValueInstanceTransport;
  _uploadBatch: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedUploadBatch;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  lastUpload: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedLastUpload;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
  shouldBackoff: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedShouldBackoff;
  upload: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedUpload;
}

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedLastUpload = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListeners {
  upload_failed: Array<PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadFailedItem>;
  upload_request_failed: Array<PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadRequestFailedItem>;
  upload_succeeded: Array<PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadSucceededItem>;
}

export interface PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadFailedItem {
  listener: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadFailedItemListener;
  options: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadFailedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadFailedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadFailedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadRequestFailedItem {
  listener: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadRequestFailedItemListener;
  options: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadRequestFailedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadRequestFailedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadRequestFailedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadSucceededItem {
  listener: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadSucceededItemListener;
  options: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadSucceededItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadSucceededItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedListenersUploadSucceededItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceUploadersAuthorizedMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedMetaListenersRemove;
}

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedParseUploadResponse = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedShouldBackoff = () => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedUpload = (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersAuthorizedUploadBatch = (
  arg0: any,
) => unknown;

export interface PlatformTypesRegistryMapValueInstanceUploadersUnauthorized {
  _authorize: boolean;
  _backoff: boolean;
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _endpoint: string;
  _listeners: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListeners;
  _metaListeners: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedMetaListeners;
  _parseUploadResponse: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedParseUploadResponse;
  _suppressPersist: boolean;
  _transport: PlatformTypesRegistryMapValueInstanceTransport;
  _uploadBatch: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedUploadBatch;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  lastUpload: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedLastUpload;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
  shouldBackoff: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedShouldBackoff;
  upload: PlatformTypesRegistryMapValueInstanceUploadersAuthorizedUpload;
}

export interface PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListeners {
  upload_failed: Array<PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadFailedItem>;
  upload_request_failed: Array<PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadRequestFailedItem>;
  upload_succeeded: Array<PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadSucceededItem>;
}

export interface PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadFailedItem {
  listener: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadFailedItemListener;
  options: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadFailedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadFailedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadFailedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadRequestFailedItem {
  listener: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadRequestFailedItemListener;
  options: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadRequestFailedItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadRequestFailedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadRequestFailedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadSucceededItem {
  listener: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadSucceededItemListener;
  options: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadSucceededItemOptions;
}

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadSucceededItemListener =
  (arg0: any) => unknown;

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedListenersUploadSucceededItemOptions =
  Record<string, unknown>;

export interface PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedMetaListeners {
  add: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedMetaListenersAdd;
  remove: PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedMetaListenersRemove;
}

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceUploadersUnauthorizedMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesRegistryMapValueInstanceValidateEventData = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRegistryRegisterFactory = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryRegisterImpl = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryRegisterValue = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryResolve = (arg0: any) => unknown;

export type PlatformTypesRegistryResolveImpl = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryResolveNoThrow = (arg0: any) => unknown;

export interface PlatformTypesRegistryTree {
  addChild: PlatformTypesRegistryTreeAddChild;
  getChildren: PlatformTypesRegistryTreeGetChildren;
  getKey: PlatformTypesRegistryTreeGetKey;
  getNodes: PlatformTypesRegistryTreeGetNodes;
  getParents: PlatformTypesRegistryTreeGetParents;
  getValue: PlatformTypesRegistryTreeGetValue;
  isRoot: PlatformTypesRegistryTreeIsRoot;
  removeChild: PlatformTypesRegistryTreeRemoveChild;
}

export type PlatformTypesRegistryTreeAddChild = () => unknown;

export type PlatformTypesRegistryTreeGetChildren = () => unknown;

export type PlatformTypesRegistryTreeGetKey = () => unknown;

export type PlatformTypesRegistryTreeGetNodes = () => unknown;

export type PlatformTypesRegistryTreeGetParents = () => unknown;

export type PlatformTypesRegistryTreeGetValue = () => unknown;

export type PlatformTypesRegistryTreeIsRoot = () => unknown;

export type PlatformTypesRegistryTreeRemoveChild = () => unknown;

export type PlatformTypesRegistryWrap = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRegistryWrapImpl = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesRemoteConfigDebugAPI {
  _client: PlatformTypesRemoteConfigDebugAPIClient;
  _configuration: PlatformTypesRemoteConfiguration;
  _definitions: Array<
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem10
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem2
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem3
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem4
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem5
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem6
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem7
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem8
    | PlatformTypesRemoteConfigDebugAPIDefinitionsItem9
  >;
  _events: PlatformTypesRemoteConfigDebugAPIEvents;
  _localConfiguration: PlatformTypesRemoteConfigDebugAPILocalConfiguration;
  _localStorageAPI: PlatformTypesEqualizerAPILocalStorageAPI;
  _overrides: PlatformTypesRemoteConfigDebugAPIOverrides;
  _properties: Array<
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem10
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem2
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem3
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem4
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem5
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem6
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem7
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem8
    | PlatformTypesRemoteConfigDebugAPIPropertiesItem9
  >;
  clearOverrides: PlatformTypesRemoteConfigDebugAPIClearOverrides;
  getEvents: PlatformTypesRemoteConfigDebugAPIGetEvents;
  getLocalConfiguration: PlatformTypesRemoteConfigDebugAPIGetLocalConfiguration;
  getProperties: PlatformTypesRemoteConfigDebugAPIGetProperties;
  setOverride: PlatformTypesRemoteConfigDebugAPISetOverride;
  update: PlatformTypesRemoteConfigDebugAPIUpdate;
}

export type PlatformTypesRemoteConfigDebugAPIClearOverrides = () => unknown;

export interface PlatformTypesRemoteConfigDebugAPIClient {
  clearOverrides: PlatformTypesRemoteConfigDebugAPIClientClearOverrides;
  getConfiguration: PlatformTypesRemoteConfigDebugAPIClientGetConfiguration;
  getOverrides: PlatformTypesRemoteConfigDebugAPIClientGetOverrides;
  getProperties: PlatformTypesRemoteConfigDebugAPIClientGetProperties;
  options: PlatformTypesRemoteConfigDebugAPIClientOptions;
  setOverride: PlatformTypesRemoteConfigDebugAPIClientSetOverride;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesRemoteConfigDebugAPIClientClearOverrides = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRemoteConfigDebugAPIClientGetConfiguration = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRemoteConfigDebugAPIClientGetOverrides = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRemoteConfigDebugAPIClientGetProperties = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRemoteConfigDebugAPIClientOptions = Record<string, unknown>;

export type PlatformTypesRemoteConfigDebugAPIClientSetOverride = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem10 {
  default: number;
  description: string;
  lower: number;
  name: string;
  type: string;
  upper: number;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem2 {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem3 {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem4 {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem5 {
  default: number;
  description: string;
  lower: number;
  name: string;
  type: string;
  upper: number;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem6 {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem7 {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem8 {
  default: boolean;
  description: string;
  name: string;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIDefinitionsItem9 {
  default: number;
  description: string;
  lower: number;
  name: string;
  type: string;
  upper: number;
}

export interface PlatformTypesRemoteConfigDebugAPIEvents {
  _emitter: PlatformTypesRemoteConfigDebugAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesRemoteConfigDebugAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRemoteConfigDebugAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesRemoteConfigDebugAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesRemoteConfigDebugAPIEventsEmitterListeners {
  update: Array<PlatformTypesRemoteConfigDebugAPIEventsEmitterListenersUpdateItem>;
}

export interface PlatformTypesRemoteConfigDebugAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesRemoteConfigDebugAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesRemoteConfigDebugAPIEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesRemoteConfigDebugAPIEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRemoteConfigDebugAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesRemoteConfigDebugAPIEventsEmitterMetaListeners {
  add: PlatformTypesRemoteConfigDebugAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesRemoteConfigDebugAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesRemoteConfigDebugAPIEventsEmitterMetaListenersAdd = Record<
  string,
  unknown
>;

export type PlatformTypesRemoteConfigDebugAPIEventsEmitterMetaListenersRemove = Record<
  string,
  unknown
>;

export type PlatformTypesRemoteConfigDebugAPIGetEvents = () => unknown;

export type PlatformTypesRemoteConfigDebugAPIGetLocalConfiguration = () => unknown;

export type PlatformTypesRemoteConfigDebugAPIGetProperties = () => unknown;

export interface PlatformTypesRemoteConfigDebugAPILocalConfiguration {
  accessListeners: Set<PlatformTypesRemoteConfigurationAccessListenersSetElement>;
  getValue: PlatformTypesRemoteConfigurationGetValue;
  toBuilder: PlatformTypesRemoteConfigurationToBuilder;
  toJSON: PlatformTypesRemoteConfigurationToJSON;
  values: Map<string, boolean>;
}

export interface PlatformTypesRemoteConfigDebugAPIOverrides {
  accessListeners: Set<unknown>;
  getValue: PlatformTypesRemoteConfigurationGetValue;
  toBuilder: PlatformTypesRemoteConfigurationToBuilder;
  toJSON: PlatformTypesRemoteConfigurationToJSON;
  values: Map<string, boolean>;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem10 {
  description: string;
  localValue: number;
  name: string;
  remoteValue: number;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec10;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem2 {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec2;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem3 {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec3;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem4 {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec4;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem5 {
  description: string;
  localValue: number;
  name: string;
  remoteValue: number;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec5;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem6 {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec6;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem7 {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec7;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem8 {
  description: string;
  localValue: boolean;
  name: string;
  remoteValue: boolean;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec8;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItem9 {
  description: string;
  localValue: number;
  name: string;
  remoteValue: number;
  source: string;
  spec: PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec9;
  type: string;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec10 {
  defaultValue: number;
  lower: number;
  upper: number;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec2 {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec3 {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec4 {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec5 {
  defaultValue: number;
  lower: number;
  upper: number;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec6 {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec7 {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec8 {
  defaultValue: boolean;
}

export interface PlatformTypesRemoteConfigDebugAPIPropertiesItemSpec9 {
  defaultValue: number;
  lower: number;
  upper: number;
}

export type PlatformTypesRemoteConfigDebugAPISetOverride = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRemoteConfigDebugAPIUpdate = (arg0: any) => unknown;

export interface PlatformTypesRemoteConfiguration {
  accessListeners: Set<PlatformTypesRemoteConfigurationAccessListenersSetElement>;
  getValue: PlatformTypesRemoteConfigurationGetValue;
  toBuilder: PlatformTypesRemoteConfigurationToBuilder;
  toJSON: PlatformTypesRemoteConfigurationToJSON;
  values: Map<string, boolean>;
}

export type PlatformTypesRemoteConfigurationAccessListenersSetElement = () => unknown;

export type PlatformTypesRemoteConfigurationGetValue = (arg0: any) => unknown;

export type PlatformTypesRemoteConfigurationToBuilder = () => unknown;

export type PlatformTypesRemoteConfigurationToJSON = () => unknown;

export interface PlatformTypesRemoteConfigurationWithLocalOverrides {
  accessListeners: Set<PlatformTypesRemoteConfigurationAccessListenersSetElement>;
  getValue: PlatformTypesRemoteConfigurationGetValue;
  toBuilder: PlatformTypesRemoteConfigurationToBuilder;
  toJSON: PlatformTypesRemoteConfigurationToJSON;
  values: Map<string, boolean>;
}

export interface PlatformTypesReportAPI {
  _playlistAPI: PlatformTypesPlaylistAPI;
  _productState: PlatformTypesReportAPIProductState;
  canReportPlaylist: PlatformTypesReportAPICanReportPlaylist;
  getReportURL: PlatformTypesReportAPIGetReportURL;
  isURIReportable: PlatformTypesReportAPIIsURIReportable;
}

export type PlatformTypesReportAPICanReportPlaylist = (arg0: any, arg1: any) => unknown;

export type PlatformTypesReportAPIGetReportURL = (arg0: any, arg1: any) => unknown;

export type PlatformTypesReportAPIIsURIReportable = (arg0: any) => unknown;

export interface PlatformTypesReportAPIProductState {
  delOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiDelOverridesValues;
  getValues: PlatformTypesRegistryMapValueInstanceProductStateApiGetValues;
  options: PlatformTypesReportAPIProductStateOptions;
  putOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutOverridesValues;
  putValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutValues;
  putValuesSync: PlatformTypesRegistryMapValueInstanceProductStateApiPutValuesSync;
  subValues: PlatformTypesRegistryMapValueInstanceProductStateApiSubValues;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesReportAPIProductStateOptions = Record<string, unknown>;

export interface PlatformTypesRootlistAPI {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _cache: null;
  _decorationCache: PlatformTypesRootlistAPIDecorationCache;
  _events: PlatformTypesRootlistAPIEvents;
  _playlistDataClient: PlatformTypesRootlistAPIPlaylistDataClient;
  _rootlistDataClient: PlatformTypesRootlistAPIRootlistDataClient;
  _rootlistModificationClient: PlatformTypesRootlistAPIRootlistModificationClient;
  add: PlatformTypesRootlistAPIAdd;
  applyModification: PlatformTypesRootlistAPIApplyModification;
  contains: PlatformTypesRootlistAPIContains;
  containsSync: PlatformTypesRootlistAPIContainsSync;
  createFolder: PlatformTypesRootlistAPICreateFolder;
  createPlaylist: PlatformTypesRootlistAPICreatePlaylist;
  getCapabilities: PlatformTypesRootlistAPIGetCapabilities;
  getContents: PlatformTypesRootlistAPIGetContents;
  getEvents: PlatformTypesRootlistAPIGetEvents;
  getMetadata: PlatformTypesRootlistAPIGetMetadata;
  getPublishedState: PlatformTypesRootlistAPIGetPublishedState;
  move: PlatformTypesRootlistAPIMove;
  moveFolder: PlatformTypesRootlistAPIMoveFolder;
  onUpdateItems: PlatformTypesRootlistAPIOnUpdateItems;
  remove: PlatformTypesRootlistAPIRemove;
  removeFolder: PlatformTypesRootlistAPIRemoveFolder;
  renameFolder: PlatformTypesRootlistAPIRenameFolder;
  setPublishedState: PlatformTypesRootlistAPISetPublishedState;
}

export type PlatformTypesRootlistAPIAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIApplyModification = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIContains = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIContainsSync = (arg0: any) => unknown;

export type PlatformTypesRootlistAPICreateFolder = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPICreatePlaylist = (arg0: any, arg1: any, arg2: any) => unknown;

export interface PlatformTypesRootlistAPIDecorationCache {
  _cache: Map<unknown, unknown>;
  _ttl: number;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesRootlistAPIEvents {
  _aggregator: PlatformTypesRootlistAPIEventsAggregator;
  _contains: PlatformTypesRootlistAPIEventsContains;
  _dataClient: PlatformTypesRootlistAPIRootlistDataClient;
  _emitter: PlatformTypesRootlistAPIEventsEmitter;
  _numListeners: number;
  _subscription: null;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitAddComplete: PlatformTypesRootlistAPIEventsEmitAddComplete;
  emitAddSync: PlatformTypesRootlistAPIEventsEmitAddSync;
  emitCreatePlaylistComplete: PlatformTypesRootlistAPIEventsEmitCreatePlaylistComplete;
  emitCreatePlaylistSync: PlatformTypesRootlistAPIEventsEmitCreatePlaylistSync;
  emitMoveComplete: PlatformTypesRootlistAPIEventsEmitMoveComplete;
  emitMoveSync: PlatformTypesRootlistAPIEventsEmitMoveSync;
  emitRemoveComplete: PlatformTypesRootlistAPIEventsEmitRemoveComplete;
  emitRemoveSync: PlatformTypesRootlistAPIEventsEmitRemoveSync;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateItems: PlatformTypesRootlistAPIEventsEmitUpdateItems;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onContainsItems: PlatformTypesRootlistAPIEventsOnContainsItems;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  onUpdate: PlatformTypesRootlistAPIEventsOnUpdate;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
  subscribeToUpdates: PlatformTypesRootlistAPIEventsSubscribeToUpdates;
  unsubscribeFromUpdates: PlatformTypesRootlistAPIEventsUnsubscribeFromUpdates;
}

export interface PlatformTypesRootlistAPIEventsAggregator {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesRootlistAPIEventsAggregatorOnAdd;
  _onBatch: PlatformTypesRootlistAPIEventsAggregatorOnBatch;
  _onRemove: PlatformTypesRootlistAPIEventsAggregatorOnRemove;
  _onUpdate: PlatformTypesRootlistAPIEventsAggregatorOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesRootlistAPIEventsAggregatorOnAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIEventsAggregatorOnBatch = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIEventsAggregatorOnRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIEventsAggregatorOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsContains = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIEventsEmitAddComplete = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIEventsEmitAddSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsEmitCreatePlaylistComplete = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsEmitCreatePlaylistSync = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsEmitMoveComplete = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIEventsEmitMoveSync = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIEventsEmitRemoveComplete = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIEventsEmitRemoveSync = (arg0: any) => unknown;

export interface PlatformTypesRootlistAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesRootlistAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesRootlistAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesRootlistAPIEventsEmitterListeners {
  operation: Array<PlatformTypesRootlistAPIEventsEmitterListenersOperationItem>;
  update: Array<
    | PlatformTypesRootlistAPIEventsEmitterListenersUpdateItem
    | PlatformTypesRootlistAPIEventsEmitterListenersUpdateItem2
  >;
}

export interface PlatformTypesRootlistAPIEventsEmitterListenersOperationItem {
  listener: PlatformTypesRootlistAPIEventsEmitterListenersOperationItemListener;
  options: PlatformTypesRootlistAPIEventsEmitterListenersOperationItemOptions;
}

export type PlatformTypesRootlistAPIEventsEmitterListenersOperationItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsEmitterListenersOperationItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesRootlistAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemOptions;
}

export interface PlatformTypesRootlistAPIEventsEmitterListenersUpdateItem2 {
  listener: PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemListener2;
  options: PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemOptions2;
}

export type PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemListener = () => unknown;

export type PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemListener2 = () => unknown;

export type PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRootlistAPIEventsEmitterListenersUpdateItemOptions2 = Record<
  string,
  unknown
>;

export interface PlatformTypesRootlistAPIEventsEmitterMetaListeners {
  add: PlatformTypesRootlistAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesRootlistAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesRootlistAPIEventsEmitterMetaListenersAdd {
  update: Array<PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItem>;
  update_item: Array<PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemItem>;
}

export interface PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItem {
  listener: PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemListener;
  options: PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemOptions;
}

export interface PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemItem {
  listener: PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemItemListener;
  options: PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemItemOptions;
}

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemListener = () => unknown;

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersAddUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesRootlistAPIEventsEmitterMetaListenersRemove {
  update: Array<PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItem>;
  update_item: Array<PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemItem>;
}

export interface PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItem {
  listener: PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemListener;
  options: PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemOptions;
}

export interface PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemItem {
  listener: PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemItemListener;
  options: PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemItemOptions;
}

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemListener =
  () => unknown;

export type PlatformTypesRootlistAPIEventsEmitterMetaListenersRemoveUpdateItemOptions = Record<
  string,
  unknown
>;

export type PlatformTypesRootlistAPIEventsEmitUpdateItems = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIEventsOnContainsItems = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIEventsOnUpdate = () => unknown;

export type PlatformTypesRootlistAPIEventsSubscribeToUpdates = () => unknown;

export type PlatformTypesRootlistAPIEventsUnsubscribeFromUpdates = () => unknown;

export type PlatformTypesRootlistAPIGetCapabilities = () => unknown;

export type PlatformTypesRootlistAPIGetContents = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIGetEvents = () => unknown;

export type PlatformTypesRootlistAPIGetMetadata = () => unknown;

export type PlatformTypesRootlistAPIGetPublishedState = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIMove = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesRootlistAPIMoveFolder = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIOnUpdateItems = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRootlistAPIPlaylistDataClient {
  find: PlatformTypesShuffleAPIPlaylistDataServiceClientFind;
  get: PlatformTypesShuffleAPIPlaylistDataServiceClientGet;
  multiGet: PlatformTypesShuffleAPIPlaylistDataServiceClientMultiGet;
  options: PlatformTypesRootlistAPIPlaylistDataClientOptions;
  subscribe: PlatformTypesShuffleAPIPlaylistDataServiceClientSubscribe;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesRootlistAPIPlaylistDataClientOptions = Record<string, unknown>;

export type PlatformTypesRootlistAPIRemove = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIRemoveFolder = (arg0: any) => unknown;

export type PlatformTypesRootlistAPIRenameFolder = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRootlistAPIRootlistDataClient {
  contains: PlatformTypesRootlistAPIRootlistDataClientContains;
  get: PlatformTypesRootlistAPIRootlistDataClientGet;
  getOfflinePlaylistsContainingItem: PlatformTypesRootlistAPIRootlistDataClientGetOfflinePlaylistsContainingItem;
  options: PlatformTypesRootlistAPIRootlistDataClientOptions;
  subscribe: PlatformTypesRootlistAPIRootlistDataClientSubscribe;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesRootlistAPIRootlistDataClientContains = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIRootlistDataClientGet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesRootlistAPIRootlistDataClientGetOfflinePlaylistsContainingItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRootlistAPIRootlistDataClientOptions = Record<string, unknown>;

export type PlatformTypesRootlistAPIRootlistDataClientSubscribe = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesRootlistAPIRootlistModificationClient {
  modify: PlatformTypesRootlistAPIRootlistModificationClientModify;
  options: PlatformTypesRootlistAPIRootlistModificationClientOptions;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesRootlistAPIRootlistModificationClientModify = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesRootlistAPIRootlistModificationClientOptions = Record<string, unknown>;

export type PlatformTypesRootlistAPISetPublishedState = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesSegmentsAPI {
  _client: PlatformTypesSegmentsAPIClient;
  getArtists: PlatformTypesSegmentsAPIGetArtists;
  getCapabilities: PlatformTypesSegmentsAPIGetCapabilities;
  getSegments: PlatformTypesSegmentsAPIGetSegments;
}

export interface PlatformTypesSegmentsAPIClient {
  getDisplaySegments: PlatformTypesSegmentsAPIClientGetDisplaySegments;
  options: PlatformTypesSegmentsAPIClientOptions;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSegmentsAPIClientGetDisplaySegments = (arg0: any, arg1: any) => unknown;

export type PlatformTypesSegmentsAPIClientOptions = Record<string, unknown>;

export type PlatformTypesSegmentsAPIGetArtists = () => unknown;

export type PlatformTypesSegmentsAPIGetCapabilities = () => unknown;

export type PlatformTypesSegmentsAPIGetSegments = (arg0: any, arg1: any, arg2: any) => unknown;

export type PlatformTypesSEOExperiments = Record<string, unknown>;

export interface PlatformTypesSession {
  accessToken: string;
  accessTokenExpirationTimestampMs: number;
  isAnonymous: boolean;
  locale: string;
  market: string;
  tokenType: string;
  valid: boolean;
}

export interface PlatformTypesSettingsAPI {
  autoPlay: PlatformTypesSettingsAPIAutoPlay;
  contentPreferences: PlatformTypesSettingsAPIContentPreferences;
  display: PlatformTypesSettingsAPIDisplay;
  employee: PlatformTypesSettingsAPIEmployee;
  hardwareAcceleration: PlatformTypesSettingsAPIHardwareAcceleration;
  language: PlatformTypesSettingsAPILanguage;
  playback: PlatformTypesSettingsAPIPlayback;
  proxySettings: PlatformTypesSettingsAPIProxySettings;
  quality: PlatformTypesSettingsAPIQuality;
  social: PlatformTypesSettingsAPISocial;
  startupBehaviour: PlatformTypesSettingsAPIStartupBehaviour;
  storage: PlatformTypesSettingsAPIStorage;
  viewportZoom: PlatformTypesSettingsAPIViewportZoom;
}

export interface PlatformTypesSettingsAPIAutoPlay {
  autoPlaySupported: PlatformTypesSettingsAPIAutoPlayAutoPlaySupported;
  deserialize: PlatformTypesSettingsAPIAutoPlayDeserialize;
  getValue: PlatformTypesSettingsAPIAutoPlayGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  serialize: PlatformTypesSettingsAPISocialAutoPublishPlaylistSerialize;
  setValue: PlatformTypesSettingsAPIAutoPlaySetValue;
  subValue: PlatformTypesSettingsAPIAutoPlaySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export interface PlatformTypesSettingsAPIAutoPlayAutoPlaySupported {
  deserializeValue: PlatformTypesSettingsAPIAutoPlayAutoPlaySupportedDeserializeValue;
  getValue: PlatformTypesSettingsAPIAutoPlayAutoPlaySupportedGetValue;
  identifier: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  subValue: PlatformTypesSettingsAPIAutoPlayAutoPlaySupportedSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIAutoPlayAutoPlaySupportedDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIAutoPlayAutoPlaySupportedGetValue = () => unknown;

export type PlatformTypesSettingsAPIAutoPlayAutoPlaySupportedSubValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIAutoPlayDeserialize = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIAutoPlayGetValue = () => unknown;

export type PlatformTypesSettingsAPIAutoPlaySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIAutoPlaySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIContentPreferences {
  allowExplicitContent: PlatformTypesSettingsAPIContentPreferencesAllowExplicitContent;
  explicitContentForceDisallowed: PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowed;
}

export interface PlatformTypesSettingsAPIContentPreferencesAllowExplicitContent {
  deserialize: PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentDeserialize;
  getValue: PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  serialize: PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentSerialize;
  setValue: PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentSetValue;
  subValue: PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentDeserialize = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentGetValue = () => unknown;

export type PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentSerialize = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentSetValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIContentPreferencesAllowExplicitContentSubValue = (
  arg0: any,
) => unknown;

export interface PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowed {
  deserialize: PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowedDeserialize;
  getValue: PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowedGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  subValue: PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowedSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowedDeserialize = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowedGetValue =
  () => unknown;

export type PlatformTypesSettingsAPIContentPreferencesExplicitContentForceDisallowedSubValue = (
  arg0: any,
) => unknown;

export interface PlatformTypesSettingsAPIDisplay {
  nativeNotificationOnPlayerTransition: PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransition;
  nativeOverlayOnMediaKeys: PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeys;
  newReleasesAnnoucements: PlatformTypesSettingsAPIDisplayNewReleasesAnnoucements;
}

export interface PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransition {
  deserializeValue: PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionDeserializeValue;
  getValue: PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionSetValue;
  subValue: PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionGetValue =
  () => unknown;

export type PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionSetValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIDisplayNativeNotificationOnPlayerTransitionSubValue = (
  arg0: any,
) => unknown;

export interface PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeys {
  deserializeValue: PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysDeserializeValue;
  getValue: PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysSetValue;
  subValue: PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysGetValue = () => unknown;

export type PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysSetValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIDisplayNativeOverlayOnMediaKeysSubValue = (
  arg0: any,
) => unknown;

export interface PlatformTypesSettingsAPIDisplayNewReleasesAnnoucements {
  deserializeValue: PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsDeserializeValue;
  getValue: PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsSerializeValue;
  setValue: PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsSetValue;
  subValue: PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsGetValue = () => unknown;

export type PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsSerializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIDisplayNewReleasesAnnoucementsSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIEmployee {
  developerMode: PlatformTypesSettingsAPIEmployeeDeveloperMode;
  isEmployee: PlatformTypesSettingsAPIEmployeeIsEmployee;
  jayApi: PlatformTypesSettingsAPIEmployeeJayApi;
  showChromeToolbar: PlatformTypesSettingsAPIEmployeeShowChromeToolbar;
}

export interface PlatformTypesSettingsAPIEmployeeDeveloperMode {
  deserializeValue: PlatformTypesSettingsAPIEmployeeDeveloperModeDeserializeValue;
  getValue: PlatformTypesSettingsAPIEmployeeDeveloperModeGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIEmployeeDeveloperModeSetValue;
  subValue: PlatformTypesSettingsAPIEmployeeDeveloperModeSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIEmployeeDeveloperModeDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIEmployeeDeveloperModeGetValue = () => unknown;

export type PlatformTypesSettingsAPIEmployeeDeveloperModeSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIEmployeeDeveloperModeSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIEmployeeIsEmployee {
  deserialize: PlatformTypesSettingsAPIEmployeeIsEmployeeDeserialize;
  getValue: PlatformTypesSettingsAPIEmployeeIsEmployeeGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  subValue: PlatformTypesSettingsAPIEmployeeIsEmployeeSubValue;
  subs: Set<PlatformTypesSettingsAPIEmployeeIsEmployeeSubsSetElement>;
  subscription: PlatformTypesSettingsAPIEmployeeIsEmployeeSubscription;
  value: null;
}

export type PlatformTypesSettingsAPIEmployeeIsEmployeeDeserialize = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIEmployeeIsEmployeeGetValue = () => unknown;

export type PlatformTypesSettingsAPIEmployeeIsEmployeeSubscription = () => unknown;

export type PlatformTypesSettingsAPIEmployeeIsEmployeeSubsSetElement = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIEmployeeIsEmployeeSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIEmployeeJayApi {
  getServerAddress: PlatformTypesSettingsAPIEmployeeJayApiGetServerAddress;
}

export type PlatformTypesSettingsAPIEmployeeJayApiGetServerAddress = () => unknown;

export interface PlatformTypesSettingsAPIEmployeeShowChromeToolbar {
  deserializeValue: PlatformTypesSettingsAPIEmployeeShowChromeToolbarDeserializeValue;
  getValue: PlatformTypesSettingsAPIEmployeeShowChromeToolbarGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIEmployeeShowChromeToolbarSetValue;
  subValue: PlatformTypesSettingsAPIEmployeeShowChromeToolbarSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIEmployeeShowChromeToolbarDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIEmployeeShowChromeToolbarGetValue = () => unknown;

export type PlatformTypesSettingsAPIEmployeeShowChromeToolbarSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIEmployeeShowChromeToolbarSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIHardwareAcceleration {
  deserializeValue: PlatformTypesSettingsAPIHardwareAccelerationDeserializeValue;
  getValue: PlatformTypesSettingsAPIHardwareAccelerationGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIHardwareAccelerationSetValue;
  subValue: PlatformTypesSettingsAPIHardwareAccelerationSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIHardwareAccelerationDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIHardwareAccelerationGetValue = () => unknown;

export type PlatformTypesSettingsAPIHardwareAccelerationSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIHardwareAccelerationSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPILanguage {
  deserializeValue: PlatformTypesSettingsAPILanguageDeserializeValue;
  getValue: PlatformTypesSettingsAPILanguageGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPILanguageSerializeValue;
  setValue: PlatformTypesSettingsAPILanguageSetValue;
  subValue: PlatformTypesSettingsAPILanguageSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPILanguageDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPILanguageGetValue = () => unknown;

export interface PlatformTypesSettingsAPILanguagePrefsApi {
  create: PlatformTypesEqualizerAPIPrefsCreate;
  get: PlatformTypesEqualizerAPIPrefsGet;
  getAll: PlatformTypesEqualizerAPIPrefsGetAll;
  options: PlatformTypesSettingsAPILanguagePrefsApiOptions;
  set: PlatformTypesEqualizerAPIPrefsSet;
  sub: PlatformTypesEqualizerAPIPrefsSub;
  subAll: PlatformTypesEqualizerAPIPrefsSubAll;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSettingsAPILanguagePrefsApiOptions = Record<string, unknown>;

export type PlatformTypesSettingsAPILanguageSerializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPILanguageSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPILanguageSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIPlayback {
  audioCrossfade: PlatformTypesSettingsAPIPlaybackAudioCrossfade;
  audioCrossfadeMs: PlatformTypesSettingsAPIPlaybackAudioCrossfadeMs;
  autoMix: PlatformTypesSettingsAPIPlaybackAutoMix;
  loudnessBalancePodcasts: PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcasts;
  monoAudio: PlatformTypesSettingsAPIPlaybackMonoAudio;
  smartShuffle: PlatformTypesSettingsAPIPlaybackSmartShuffle;
}

export interface PlatformTypesSettingsAPIPlaybackAudioCrossfade {
  deserializeValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeDeserializeValue;
  getValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeSetValue;
  subValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeGetValue = () => unknown;

export interface PlatformTypesSettingsAPIPlaybackAudioCrossfadeMs {
  deserializeValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsDeserializeValue;
  getValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityStreamingQualitySerializeValue;
  setValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsSetValue;
  subValue: PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsGetValue = () => unknown;

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeMsSubValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackAudioCrossfadeSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIPlaybackAutoMix {
  deserializeValue: PlatformTypesSettingsAPIPlaybackAutoMixDeserializeValue;
  getValue: PlatformTypesSettingsAPIPlaybackAutoMixGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIPlaybackAutoMixSetValue;
  subValue: PlatformTypesSettingsAPIPlaybackAutoMixSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIPlaybackAutoMixDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackAutoMixGetValue = () => unknown;

export type PlatformTypesSettingsAPIPlaybackAutoMixSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackAutoMixSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcasts {
  deserializeValue: PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsDeserializeValue;
  getValue: PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsSetValue;
  subValue: PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsGetValue = () => unknown;

export type PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsSetValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIPlaybackLoudnessBalancePodcastsSubValue = (
  arg0: any,
) => unknown;

export interface PlatformTypesSettingsAPIPlaybackMonoAudio {
  deserializeValue: PlatformTypesSettingsAPIPlaybackMonoAudioDeserializeValue;
  getValue: PlatformTypesSettingsAPIPlaybackMonoAudioGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIPlaybackMonoAudioSetValue;
  subValue: PlatformTypesSettingsAPIPlaybackMonoAudioSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIPlaybackMonoAudioDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackMonoAudioGetValue = () => unknown;

export type PlatformTypesSettingsAPIPlaybackMonoAudioSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackMonoAudioSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIPlaybackSmartShuffle {
  getValue: PlatformTypesSettingsAPIPlaybackSmartShuffleGetValue;
  key: string;
  playbackSettingsAPI: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPI;
  setValue: PlatformTypesSettingsAPIPlaybackSmartShuffleSetValue;
  subValue: PlatformTypesSettingsAPIPlaybackSmartShuffleSubValue;
  subs: Set<unknown>;
  unsubscribeFromDisableSmartShuffle: null;
  value: boolean;
}

export type PlatformTypesSettingsAPIPlaybackSmartShuffleGetValue = () => unknown;

export interface PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPI {
  disableSmartShuffle: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIDisableSmartShuffle;
  getDisableSmartShuffle: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIGetDisableSmartShuffle;
  getShuffleState: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIGetShuffleState;
  options: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIOptions;
  setDisableSmartShuffle: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPISetDisableSmartShuffle;
  setShuffleState: PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPISetShuffleState;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIDisableSmartShuffle = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIGetDisableSmartShuffle =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIGetShuffleState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPIOptions = Record<
  string,
  unknown
>;

export type PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPISetDisableSmartShuffle =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackSmartShufflePlaybackSettingsAPISetShuffleState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIPlaybackSmartShuffleSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIPlaybackSmartShuffleSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIProxySettings {
  address: PlatformTypesSettingsAPIProxySettingsAddress;
  mode: PlatformTypesSettingsAPIProxySettingsMode;
  password: PlatformTypesSettingsAPIProxySettingsPassword;
  username: PlatformTypesSettingsAPIProxySettingsUsername;
}

export interface PlatformTypesSettingsAPIProxySettingsAddress {
  deserializeValue: PlatformTypesSettingsAPIProxySettingsAddressDeserializeValue;
  getValue: PlatformTypesSettingsAPIProxySettingsAddressGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPILanguageSerializeValue;
  setValue: PlatformTypesSettingsAPIProxySettingsAddressSetValue;
  subValue: PlatformTypesSettingsAPIProxySettingsAddressSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIProxySettingsAddressDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsAddressGetValue = () => unknown;

export type PlatformTypesSettingsAPIProxySettingsAddressSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsAddressSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIProxySettingsMode {
  deserializeValue: PlatformTypesSettingsAPIProxySettingsModeDeserializeValue;
  getValue: PlatformTypesSettingsAPIProxySettingsModeGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityStreamingQualitySerializeValue;
  setValue: PlatformTypesSettingsAPIProxySettingsModeSetValue;
  subValue: PlatformTypesSettingsAPIProxySettingsModeSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIProxySettingsModeDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsModeGetValue = () => unknown;

export type PlatformTypesSettingsAPIProxySettingsModeSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsModeSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIProxySettingsPassword {
  deserializeValue: PlatformTypesSettingsAPIProxySettingsPasswordDeserializeValue;
  getValue: PlatformTypesSettingsAPIProxySettingsPasswordGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPILanguageSerializeValue;
  setValue: PlatformTypesSettingsAPIProxySettingsPasswordSetValue;
  subValue: PlatformTypesSettingsAPIProxySettingsPasswordSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIProxySettingsPasswordDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsPasswordGetValue = () => unknown;

export type PlatformTypesSettingsAPIProxySettingsPasswordSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsPasswordSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIProxySettingsUsername {
  deserializeValue: PlatformTypesSettingsAPIProxySettingsUsernameDeserializeValue;
  getValue: PlatformTypesSettingsAPIProxySettingsUsernameGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPILanguageSerializeValue;
  setValue: PlatformTypesSettingsAPIProxySettingsUsernameSetValue;
  subValue: PlatformTypesSettingsAPIProxySettingsUsernameSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIProxySettingsUsernameDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsUsernameGetValue = () => unknown;

export type PlatformTypesSettingsAPIProxySettingsUsernameSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIProxySettingsUsernameSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIQuality {
  autoAdjustQuality: PlatformTypesSettingsAPIQualityAutoAdjustQuality;
  downloadAudioQuality: PlatformTypesSettingsAPIQualityDownloadAudioQuality;
  getFormats: PlatformTypesSettingsAPIQualityGetFormats;
  maxSupportedQuality: PlatformTypesSettingsAPIQualityMaxSupportedQuality;
  normalizeVolume: PlatformTypesSettingsAPIQualityNormalizeVolume;
  parrot: PlatformTypesSettingsAPIQualityParrot;
  playbackService: PlatformTypesSettingsAPIQualityPlaybackService;
  remoteQuality: PlatformTypesSettingsAPIQualityRemoteQuality;
  streamingQuality: PlatformTypesSettingsAPIQualityStreamingQuality;
  volumeLevel: PlatformTypesSettingsAPIQualityVolumeLevel;
}

export interface PlatformTypesSettingsAPIQualityAutoAdjustQuality {
  deserializeValue: PlatformTypesSettingsAPIQualityAutoAdjustQualityDeserializeValue;
  getValue: PlatformTypesSettingsAPIQualityAutoAdjustQualityGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIQualityAutoAdjustQualitySetValue;
  subValue: PlatformTypesSettingsAPIQualityAutoAdjustQualitySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIQualityAutoAdjustQualityDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityAutoAdjustQualityGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityAutoAdjustQualitySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityAutoAdjustQualitySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIQualityDownloadAudioQuality {
  deserializeValue: PlatformTypesSettingsAPIQualityDownloadAudioQualityDeserializeValue;
  getValue: PlatformTypesSettingsAPIQualityDownloadAudioQualityGetValue;
  identifier: string;
  key: string;
  maxSupportedQuality: PlatformTypesSettingsAPIQualityMaxSupportedQuality;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityStreamingQualitySerializeValue;
  setValue: PlatformTypesSettingsAPIQualityDownloadAudioQualitySetValue;
  subValue: PlatformTypesSettingsAPIQualityDownloadAudioQualitySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIQualityDownloadAudioQualityDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityDownloadAudioQualityGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityDownloadAudioQualitySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityDownloadAudioQualitySubValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityGetFormats = () => unknown;

export interface PlatformTypesSettingsAPIQualityMaxSupportedQuality {
  clampAudioQuality: PlatformTypesSettingsAPIQualityMaxSupportedQualityClampAudioQuality;
  deserialize: PlatformTypesSettingsAPIQualityMaxSupportedQualityDeserialize;
  getValue: PlatformTypesSettingsAPIQualityMaxSupportedQualityGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  subValue: PlatformTypesSettingsAPIQualityMaxSupportedQualitySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIQualityMaxSupportedQualityClampAudioQuality = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityMaxSupportedQualityDeserialize = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityMaxSupportedQualityGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityMaxSupportedQualitySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIQualityNormalizeVolume {
  deserializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeDeserializeValue;
  getValue: PlatformTypesSettingsAPIQualityNormalizeVolumeGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSetValue;
  subValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIQualityNormalizeVolumeDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityNormalizeVolumeGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityNormalizeVolumeSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityNormalizeVolumeSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIQualityParrot {
  getValue: PlatformTypesSettingsAPIQualityParrotGetValue;
  key: string;
  setValue: PlatformTypesSettingsAPIQualityParrotSetValue;
  subValue: PlatformTypesSettingsAPIQualityParrotSubValue;
}

export type PlatformTypesSettingsAPIQualityParrotGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityParrotSetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityParrotSubValue = () => unknown;

export interface PlatformTypesSettingsAPIQualityPlaybackService {
  duck: PlatformTypesSettingsAPIQualityPlaybackServiceDuck;
  getFiles: PlatformTypesSettingsAPIQualityPlaybackServiceGetFiles;
  getFormats: PlatformTypesSettingsAPIQualityPlaybackServiceGetFormats;
  getPlaybackInfo: PlatformTypesSettingsAPIQualityPlaybackServiceGetPlaybackInfo;
  getRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceGetRawVolume;
  getVolume: PlatformTypesSettingsAPIQualityPlaybackServiceGetVolume;
  lowerVolume: PlatformTypesSettingsAPIQualityPlaybackServiceLowerVolume;
  options: PlatformTypesSettingsAPIQualityPlaybackServiceOptions;
  raiseVolume: PlatformTypesSettingsAPIQualityPlaybackServiceRaiseVolume;
  setRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSetRawVolume;
  setVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSetVolume;
  subBufferUnderrun: PlatformTypesSettingsAPIQualityPlaybackServiceSubBufferUnderrun;
  subPlaybackInfo: PlatformTypesSettingsAPIQualityPlaybackServiceSubPlaybackInfo;
  subPosition: PlatformTypesSettingsAPIQualityPlaybackServiceSubPosition;
  subRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSubRawVolume;
  subVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSubVolume;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSettingsAPIQualityPlaybackServiceDuck = (arg0: any, arg1: any) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceGetFiles = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceGetFormats = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceGetPlaybackInfo = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceGetRawVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceGetVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceLowerVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceOptions = Record<string, unknown>;

export type PlatformTypesSettingsAPIQualityPlaybackServiceRaiseVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSetRawVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSetVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSubBufferUnderrun = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSubPlaybackInfo = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSubPosition = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSubRawVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityPlaybackServiceSubVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesSettingsAPIQualityRemoteQuality {
  callbacks: Set<unknown>;
  connectService: PlatformTypesSettingsAPIQualityRemoteQualityConnectService;
  getActiveDeviceId: PlatformTypesSettingsAPIQualityRemoteQualityGetActiveDeviceId;
  getValue: PlatformTypesSettingsAPIQualityRemoteQualityGetValue;
  key: string;
  setValue: PlatformTypesSettingsAPIQualityRemoteQualitySetValue;
  stateSubscription: null;
  subValue: PlatformTypesSettingsAPIQualityRemoteQualitySubValue;
}

export interface PlatformTypesSettingsAPIQualityRemoteQualityConnectService {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceOptions = Record<
  string,
  unknown
>;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityGetActiveDeviceId = () => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualityGetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualitySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityRemoteQualitySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIQualityStreamingQuality {
  deserializeValue: PlatformTypesSettingsAPIQualityStreamingQualityDeserializeValue;
  getValue: PlatformTypesSettingsAPIQualityStreamingQualityGetValue;
  identifier: string;
  key: string;
  maxSupportedQuality: PlatformTypesSettingsAPIQualityMaxSupportedQuality;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityStreamingQualitySerializeValue;
  setValue: PlatformTypesSettingsAPIQualityStreamingQualitySetValue;
  subValue: PlatformTypesSettingsAPIQualityStreamingQualitySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIQualityStreamingQualityDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIQualityStreamingQualityGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityStreamingQualitySerializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityStreamingQualitySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityStreamingQualitySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIQualityVolumeLevel {
  deserializeValue: PlatformTypesSettingsAPIQualityVolumeLevelDeserializeValue;
  getValue: PlatformTypesSettingsAPIQualityVolumeLevelGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityStreamingQualitySerializeValue;
  setValue: PlatformTypesSettingsAPIQualityVolumeLevelSetValue;
  subValue: PlatformTypesSettingsAPIQualityVolumeLevelSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIQualityVolumeLevelDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityVolumeLevelGetValue = () => unknown;

export type PlatformTypesSettingsAPIQualityVolumeLevelSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIQualityVolumeLevelSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPISocial {
  autoPublishPlaylist: PlatformTypesSettingsAPISocialAutoPublishPlaylist;
  privateSession: PlatformTypesSettingsAPISocialPrivateSession;
  shareListeningActivity: PlatformTypesSettingsAPISocialShareListeningActivity;
  showMyTopArtists: PlatformTypesSettingsAPISocialShowMyTopArtists;
}

export interface PlatformTypesSettingsAPISocialAutoPublishPlaylist {
  deserialize: PlatformTypesSettingsAPISocialAutoPublishPlaylistDeserialize;
  getValue: PlatformTypesSettingsAPISocialAutoPublishPlaylistGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  serialize: PlatformTypesSettingsAPISocialAutoPublishPlaylistSerialize;
  setValue: PlatformTypesSettingsAPISocialAutoPublishPlaylistSetValue;
  subValue: PlatformTypesSettingsAPISocialAutoPublishPlaylistSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPISocialAutoPublishPlaylistDeserialize = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialAutoPublishPlaylistGetValue = () => unknown;

export type PlatformTypesSettingsAPISocialAutoPublishPlaylistSerialize = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialAutoPublishPlaylistSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialAutoPublishPlaylistSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPISocialPrivateSession {
  getValue: PlatformTypesSettingsAPISocialPrivateSessionGetValue;
  key: string;
  privateSessionAPI: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPI;
  setValue: PlatformTypesSettingsAPISocialPrivateSessionSetValue;
  subValue: PlatformTypesSettingsAPISocialPrivateSessionSubValue;
  subs: Set<unknown>;
  unsubscribeFromPrivateSession: null;
  value: boolean;
}

export type PlatformTypesSettingsAPISocialPrivateSessionGetValue = () => unknown;

export interface PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPI {
  _scrobble: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobble;
  getCapabilities: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIGetCapabilities;
  setPrivateSession: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPISetPrivateSession;
  subscribeToPrivateSession: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPISubscribeToPrivateSession;
}

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIGetCapabilities =
  () => unknown;

export interface PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobble {
  getIncognitoMode: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleGetIncognitoMode;
  options: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleOptions;
  putIncognitoMode: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobblePutIncognitoMode;
  subIncognitoMode: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleSubIncognitoMode;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleGetIncognitoMode =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleOptions = Record<
  string,
  unknown
>;

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobblePutIncognitoMode =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleSubIncognitoMode =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPISetPrivateSession = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPISubscribeToPrivateSession =
  (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialPrivateSessionSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialPrivateSessionSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPISocialShareListeningActivity {
  deserialize: PlatformTypesSettingsAPISocialShareListeningActivityDeserialize;
  getValue: PlatformTypesSettingsAPISocialShareListeningActivityGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  serialize: PlatformTypesSettingsAPISocialAutoPublishPlaylistSerialize;
  setValue: PlatformTypesSettingsAPISocialShareListeningActivitySetValue;
  subValue: PlatformTypesSettingsAPISocialShareListeningActivitySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPISocialShareListeningActivityDeserialize = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPISocialShareListeningActivityGetValue = () => unknown;

export type PlatformTypesSettingsAPISocialShareListeningActivitySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialShareListeningActivitySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPISocialShowMyTopArtists {
  deserialize: PlatformTypesSettingsAPISocialShowMyTopArtistsDeserialize;
  getValue: PlatformTypesSettingsAPISocialShowMyTopArtistsGetValue;
  identifier: string;
  key: string;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
  serialize: PlatformTypesSettingsAPISocialAutoPublishPlaylistSerialize;
  setValue: PlatformTypesSettingsAPISocialShowMyTopArtistsSetValue;
  subValue: PlatformTypesSettingsAPISocialShowMyTopArtistsSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPISocialShowMyTopArtistsDeserialize = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialShowMyTopArtistsGetValue = () => unknown;

export type PlatformTypesSettingsAPISocialShowMyTopArtistsSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPISocialShowMyTopArtistsSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIStartupBehaviour {
  autoStartMode: PlatformTypesSettingsAPIStartupBehaviourAutoStartMode;
  closeToTray: PlatformTypesSettingsAPIStartupBehaviourCloseToTray;
  enableLauncher: PlatformTypesSettingsAPIStartupBehaviourEnableLauncher;
}

export interface PlatformTypesSettingsAPIStartupBehaviourAutoStartMode {
  deserializeValue: PlatformTypesSettingsAPIStartupBehaviourAutoStartModeDeserializeValue;
  getValue: PlatformTypesSettingsAPIStartupBehaviourAutoStartModeGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIStartupBehaviourAutoStartModeSerializeValue;
  setValue: PlatformTypesSettingsAPIStartupBehaviourAutoStartModeSetValue;
  subValue: PlatformTypesSettingsAPIStartupBehaviourAutoStartModeSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIStartupBehaviourAutoStartModeDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourAutoStartModeGetValue = () => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourAutoStartModeSerializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourAutoStartModeSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourAutoStartModeSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIStartupBehaviourCloseToTray {
  deserializeValue: PlatformTypesSettingsAPIStartupBehaviourCloseToTrayDeserializeValue;
  getValue: PlatformTypesSettingsAPIStartupBehaviourCloseToTrayGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIStartupBehaviourCloseToTraySetValue;
  subValue: PlatformTypesSettingsAPIStartupBehaviourCloseToTraySubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIStartupBehaviourCloseToTrayDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourCloseToTrayGetValue = () => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourCloseToTraySetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourCloseToTraySubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIStartupBehaviourEnableLauncher {
  deserializeValue: PlatformTypesSettingsAPIStartupBehaviourEnableLauncherDeserializeValue;
  getValue: PlatformTypesSettingsAPIStartupBehaviourEnableLauncherGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPIQualityNormalizeVolumeSerializeValue;
  setValue: PlatformTypesSettingsAPIStartupBehaviourEnableLauncherSetValue;
  subValue: PlatformTypesSettingsAPIStartupBehaviourEnableLauncherSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIStartupBehaviourEnableLauncherDeserializeValue = (
  arg0: any,
) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourEnableLauncherGetValue = () => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourEnableLauncherSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIStartupBehaviourEnableLauncherSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIStorage {
  storageLocation: PlatformTypesSettingsAPIStorageStorageLocation;
}

export interface PlatformTypesSettingsAPIStorageStorageLocation {
  deserializeValue: PlatformTypesSettingsAPIStorageStorageLocationDeserializeValue;
  getValue: PlatformTypesSettingsAPIStorageStorageLocationGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  serializeValue: PlatformTypesSettingsAPILanguageSerializeValue;
  setValue: PlatformTypesSettingsAPIStorageStorageLocationSetValue;
  subValue: PlatformTypesSettingsAPIStorageStorageLocationSubValue;
  subs: Set<unknown>;
  subscription: null;
  value: null;
}

export type PlatformTypesSettingsAPIStorageStorageLocationDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIStorageStorageLocationGetValue = () => unknown;

export type PlatformTypesSettingsAPIStorageStorageLocationSetValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIStorageStorageLocationSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIViewportZoom {
  deserializeValue: PlatformTypesSettingsAPIViewportZoomDeserializeValue;
  getValue: PlatformTypesSettingsAPIViewportZoomGetValue;
  identifier: string;
  key: string;
  prefsApi: PlatformTypesSettingsAPILanguagePrefsApi;
  setValue: PlatformTypesSettingsAPIViewportZoomSetValue;
  subValue: PlatformTypesSettingsAPIViewportZoomSubValue;
  subs: Set<
    | PlatformTypesSettingsAPIViewportZoomSubsSetElement
    | PlatformTypesSettingsAPIViewportZoomSubsSetElement2
  >;
  subscription: PlatformTypesSettingsAPIViewportZoomSubscription;
  value: number;
  zoomApi: PlatformTypesSettingsAPIViewportZoomZoomApi;
}

export type PlatformTypesSettingsAPIViewportZoomDeserializeValue = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIViewportZoomGetValue = () => unknown;

export type PlatformTypesSettingsAPIViewportZoomSetValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIViewportZoomSubscription {
  cancel: PlatformTypesSettingsAPIViewportZoomSubscriptionCancel;
}

export type PlatformTypesSettingsAPIViewportZoomSubscriptionCancel = () => unknown;

export type PlatformTypesSettingsAPIViewportZoomSubsSetElement = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIViewportZoomSubsSetElement2 = (arg0: any) => unknown;

export type PlatformTypesSettingsAPIViewportZoomSubValue = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIViewportZoomZoomApi {
  getCapabilities: PlatformTypesSettingsAPIViewportZoomZoomApiGetCapabilities;
  getZoomLevel: PlatformTypesSettingsAPIViewportZoomZoomApiGetZoomLevel;
  setZoomLevel: PlatformTypesSettingsAPIViewportZoomZoomApiSetZoomLevel;
  zoomEsperanto: PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperanto;
  zoomIn: PlatformTypesSettingsAPIViewportZoomZoomApiZoomIn;
  zoomOut: PlatformTypesSettingsAPIViewportZoomZoomApiZoomOut;
}

export type PlatformTypesSettingsAPIViewportZoomZoomApiGetCapabilities = () => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiGetZoomLevel = () => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiSetZoomLevel = (arg0: any) => unknown;

export interface PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperanto {
  getZoomLevel: PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoGetZoomLevel;
  options: PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoOptions;
  setZoomLevel: PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoSetZoomLevel;
  transport: PlatformTypesRegistryMapValueInstance2;
  zoomIn: PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoZoomIn;
  zoomOut: PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoZoomOut;
}

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoGetZoomLevel = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoOptions = Record<
  string,
  unknown
>;

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoSetZoomLevel = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoZoomIn = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomEsperantoZoomOut = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomIn = () => unknown;

export type PlatformTypesSettingsAPIViewportZoomZoomApiZoomOut = () => unknown;

export interface PlatformTypesShowAPI {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _events: PlatformTypesShowAPIEvents;
  _fetchItemDetails: PlatformTypesShowAPIFetchItemDetails;
  _fetchItemsDetailsProgressResumptionFromShowResponse: PlatformTypesShowAPIFetchItemsDetailsProgressResumptionFromShowResponse;
  _isAuthorPageEnabled: boolean;
  _metadata_service_client: PlatformTypesShowAPIMetadataServiceClient;
  _onShowAccessUpdate: PlatformTypesShowAPIOnShowAccessUpdate;
  _podcast_paywalls_client: PlatformTypesShowAPIPodcastPaywallsClient;
  _pubSubAPI: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  _resumption_progress_client: PlatformTypesShowAPIResumptionProgressClient;
  _show_service_client: PlatformTypesShowAPIShowServiceClient;
  capabilities: PlatformTypesShowAPICapabilities;
  checkoutBook: PlatformTypesShowAPICheckoutBook;
  getAccessInfo: PlatformTypesShowAPIGetAccessInfo;
  getBookContents: PlatformTypesShowAPIGetBookContents;
  getContents: PlatformTypesShowAPIGetContents;
  getEpisodeOrChapter: PlatformTypesShowAPIGetEpisodeOrChapter;
  getEvents: PlatformTypesShowAPIGetEvents;
  getMetadata: PlatformTypesShowAPIGetMetadata;
  getPlayerFilter: PlatformTypesShowAPIGetPlayerFilter;
  getPlayerSort: PlatformTypesShowAPIGetPlayerSort;
  getShowPlayedState: PlatformTypesShowAPIGetShowPlayedState;
  invalidateShowMetadataCaches: PlatformTypesShowAPIInvalidateShowMetadataCaches;
  markShowPlayedLegacy: PlatformTypesShowAPIMarkShowPlayedLegacy;
  updateUserRating: PlatformTypesShowAPIUpdateUserRating;
}

export interface PlatformTypesShowAPICapabilities {
  canFilter: boolean;
  canGetDefaultSort: boolean;
  canGetShowPlayedState: boolean;
  canMarkAsFinished: boolean;
  canSort: boolean;
}

export type PlatformTypesShowAPICheckoutBook = (arg0: any) => unknown;

export interface PlatformTypesShowAPIEvents {
  _aggregator: PlatformTypesShowAPIEventsAggregator;
  _emitter: PlatformTypesShowAPIEventsEmitter;
  _show_client: PlatformTypesShowAPIShowServiceClient;
  _subscriptions: Map<unknown, unknown>;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesShowAPIEventsAggregator {
  _additions: Map<unknown, unknown>;
  _batch: Map<unknown, unknown>;
  _deletions: Map<unknown, unknown>;
  _onAdd: PlatformTypesShowAPIEventsAggregatorOnAdd;
  _onBatch: PlatformTypesShowAPIEventsAggregatorOnBatch;
  _onRemove: PlatformTypesShowAPIEventsAggregatorOnRemove;
  _onUpdate: PlatformTypesShowAPIEventsAggregatorOnUpdate;
  _timeout: number;
  _timeoutId: null;
  getBatch: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistGetBatch;
  onUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistOnUpdate2;
  scheduleUpdate: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistScheduleUpdate;
  subscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistSubscribe;
  unsubscribe: PlatformTypesCollectionPlatformAPIEventsAggregatorByCollection2SetArtistUnsubscribe;
}

export type PlatformTypesShowAPIEventsAggregatorOnAdd = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIEventsAggregatorOnBatch = (arg0: any) => unknown;

export type PlatformTypesShowAPIEventsAggregatorOnRemove = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIEventsAggregatorOnUpdate = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export interface PlatformTypesShowAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesShowAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesShowAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesShowAPIEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesShowAPIEventsEmitterMetaListeners {
  add: PlatformTypesShowAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesShowAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesShowAPIEventsEmitterMetaListenersAdd {
  update_resume_episode_link: Array<PlatformTypesShowAPIEventsEmitterMetaListenersAddUpdateResumeEpisodeLinkItem>;
}

export interface PlatformTypesShowAPIEventsEmitterMetaListenersAddUpdateResumeEpisodeLinkItem {
  listener: PlatformTypesShowAPIEventsEmitterMetaListenersAddUpdateResumeEpisodeLinkItemListener;
  options: PlatformTypesShowAPIEventsEmitterMetaListenersAddUpdateResumeEpisodeLinkItemOptions;
}

export type PlatformTypesShowAPIEventsEmitterMetaListenersAddUpdateResumeEpisodeLinkItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesShowAPIEventsEmitterMetaListenersAddUpdateResumeEpisodeLinkItemOptions =
  Record<string, unknown>;

export interface PlatformTypesShowAPIEventsEmitterMetaListenersRemove {
  update_resume_episode_link: Array<PlatformTypesShowAPIEventsEmitterMetaListenersRemoveUpdateResumeEpisodeLinkItem>;
}

export interface PlatformTypesShowAPIEventsEmitterMetaListenersRemoveUpdateResumeEpisodeLinkItem {
  listener: PlatformTypesShowAPIEventsEmitterMetaListenersRemoveUpdateResumeEpisodeLinkItemListener;
  options: PlatformTypesShowAPIEventsEmitterMetaListenersRemoveUpdateResumeEpisodeLinkItemOptions;
}

export type PlatformTypesShowAPIEventsEmitterMetaListenersRemoveUpdateResumeEpisodeLinkItemListener =
  (arg0: any) => unknown;

export type PlatformTypesShowAPIEventsEmitterMetaListenersRemoveUpdateResumeEpisodeLinkItemOptions =
  Record<string, unknown>;

export type PlatformTypesShowAPIFetchItemDetails = (arg0: any) => unknown;

export type PlatformTypesShowAPIFetchItemsDetailsProgressResumptionFromShowResponse = (
  arg0: any,
) => unknown;

export type PlatformTypesShowAPIGetAccessInfo = (arg0: any) => unknown;

export type PlatformTypesShowAPIGetBookContents = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIGetContents = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIGetEpisodeOrChapter = (arg0: any) => unknown;

export type PlatformTypesShowAPIGetEvents = () => unknown;

export type PlatformTypesShowAPIGetMetadata = (arg0: any) => unknown;

export type PlatformTypesShowAPIGetPlayerFilter = () => unknown;

export type PlatformTypesShowAPIGetPlayerSort = (arg0: any) => unknown;

export type PlatformTypesShowAPIGetShowPlayedState = (arg0: any) => unknown;

export type PlatformTypesShowAPIInvalidateShowMetadataCaches = (arg0: any) => unknown;

export type PlatformTypesShowAPIMarkShowPlayedLegacy = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesShowAPIMetadataServiceClient {
  expire: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientExpire;
  fetch: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientFetch;
  observe: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientObserve;
  options: PlatformTypesShowAPIMetadataServiceClientOptions;
  purge: PlatformTypesPlayerAPISmartShuffleEligibilityMetadataServiceClientPurge;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesShowAPIMetadataServiceClientOptions = Record<string, unknown>;

export type PlatformTypesShowAPIOnShowAccessUpdate = (arg0: any) => unknown;

export interface PlatformTypesShowAPIPodcastPaywallsClient {
  options: PlatformTypesShowAPIPodcastPaywallsClientOptions;
  putShowSubscription: PlatformTypesShowAPIPodcastPaywallsClientPutShowSubscription;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesShowAPIPodcastPaywallsClientOptions = Record<string, unknown>;

export type PlatformTypesShowAPIPodcastPaywallsClientPutShowSubscription = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesShowAPIResumptionProgressClient {
  getDetails: PlatformTypesShowAPIResumptionProgressClientGetDetails;
  getState: PlatformTypesShowAPIResumptionProgressClientGetState;
  options: PlatformTypesShowAPIResumptionProgressClientOptions;
  subDetails: PlatformTypesShowAPIResumptionProgressClientSubDetails;
  subState: PlatformTypesShowAPIResumptionProgressClientSubState;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesShowAPIResumptionProgressClientGetDetails = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShowAPIResumptionProgressClientGetState = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShowAPIResumptionProgressClientOptions = Record<string, unknown>;

export type PlatformTypesShowAPIResumptionProgressClientSubDetails = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShowAPIResumptionProgressClientSubState = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesShowAPIShowServiceClient {
  getDecorate: PlatformTypesShowAPIShowServiceClientGetDecorate;
  getShow: PlatformTypesShowAPIShowServiceClientGetShow;
  getShowEpisode: PlatformTypesShowAPIShowServiceClientGetShowEpisode;
  getUnfinishedEpisodes: PlatformTypesShowAPIShowServiceClientGetUnfinishedEpisodes;
  markShowAsPlayed: PlatformTypesShowAPIShowServiceClientMarkShowAsPlayed;
  options: PlatformTypesShowAPIShowServiceClientOptions;
  playShow: PlatformTypesShowAPIShowServiceClientPlayShow;
  subDecorate: PlatformTypesShowAPIShowServiceClientSubDecorate;
  subShow: PlatformTypesShowAPIShowServiceClientSubShow;
  subShowEpisode: PlatformTypesShowAPIShowServiceClientSubShowEpisode;
  subUnfinishedEpisodes: PlatformTypesShowAPIShowServiceClientSubUnfinishedEpisodes;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesShowAPIShowServiceClientGetDecorate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientGetShow = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientGetShowEpisode = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientGetUnfinishedEpisodes = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShowAPIShowServiceClientMarkShowAsPlayed = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShowAPIShowServiceClientOptions = Record<string, unknown>;

export type PlatformTypesShowAPIShowServiceClientPlayShow = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientSubDecorate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientSubShow = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientSubShowEpisode = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShowAPIShowServiceClientSubUnfinishedEpisodes = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShowAPIUpdateUserRating = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesShuffleAPI {
  _contextualShuffle: PlatformTypesContextualShuffleAPI;
  _events: PlatformTypesShuffleAPIEvents;
  _history: PlatformTypesHistory;
  _isDsaEnabled: boolean;
  _player: PlatformTypesPlayerAPI;
  _playlistDataServiceClient: PlatformTypesShuffleAPIPlaylistDataServiceClient;
  _playlistServiceClient: PlatformTypesShuffleAPIPlaylistServiceClient;
  _productStateApi: PlatformTypesRegistryMapValueInstance5;
  _smartShuffleEligibility: PlatformTypesPlayerAPISmartShuffleEligibility;
  _syncShuffle: PlatformTypesShuffleAPISyncShuffle;
  getAvailableShuffleModes: PlatformTypesShuffleAPIGetAvailableShuffleModes;
  getEvents: PlatformTypesShuffleAPIGetEvents;
  getShuffle: PlatformTypesShuffleAPIGetShuffle;
  isSmartShuffleEnabled: boolean;
  setShuffle: PlatformTypesShuffleAPISetShuffle;
}

export interface PlatformTypesShuffleAPIEvents {
  _emitter: PlatformTypesShuffleAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitAvailabilityUpdate: PlatformTypesShuffleAPIEventsEmitAvailabilityUpdate;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  emitUpdateShuffleModeCompleteSync: PlatformTypesShuffleAPIEventsEmitUpdateShuffleModeCompleteSync;
  emitUpdateShuffleModeErrorSync: PlatformTypesShuffleAPIEventsEmitUpdateShuffleModeErrorSync;
  emitUpdateShuffleModeSync: PlatformTypesShuffleAPIEventsEmitUpdateShuffleModeSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export type PlatformTypesShuffleAPIEventsEmitAvailabilityUpdate = (arg0: any) => unknown;

export interface PlatformTypesShuffleAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesShuffleAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesShuffleAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesShuffleAPIEventsEmitterListeners {
  availability_update: Array<PlatformTypesShuffleAPIEventsEmitterListenersAvailabilityUpdateItem>;
  update_complete: Array<PlatformTypesShuffleAPIEventsEmitterListenersUpdateCompleteItem>;
}

export interface PlatformTypesShuffleAPIEventsEmitterListenersAvailabilityUpdateItem {
  listener: PlatformTypesShuffleAPIEventsEmitterListenersAvailabilityUpdateItemListener;
  options: PlatformTypesShuffleAPIEventsEmitterListenersAvailabilityUpdateItemOptions;
}

export type PlatformTypesShuffleAPIEventsEmitterListenersAvailabilityUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesShuffleAPIEventsEmitterListenersAvailabilityUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesShuffleAPIEventsEmitterListenersUpdateCompleteItem {
  listener: PlatformTypesShuffleAPIEventsEmitterListenersUpdateCompleteItemListener;
  options: PlatformTypesShuffleAPIEventsEmitterListenersUpdateCompleteItemOptions;
}

export type PlatformTypesShuffleAPIEventsEmitterListenersUpdateCompleteItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesShuffleAPIEventsEmitterListenersUpdateCompleteItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesShuffleAPIEventsEmitterMetaListeners {
  add: PlatformTypesShuffleAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesShuffleAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesShuffleAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesShuffleAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesShuffleAPIEventsEmitUpdateShuffleModeCompleteSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShuffleAPIEventsEmitUpdateShuffleModeErrorSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShuffleAPIEventsEmitUpdateShuffleModeSync = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShuffleAPIGetAvailableShuffleModes = (arg0: any) => unknown;

export type PlatformTypesShuffleAPIGetEvents = () => unknown;

export type PlatformTypesShuffleAPIGetShuffle = (arg0: any) => unknown;

export interface PlatformTypesShuffleAPIPlaylistDataServiceClient {
  find: PlatformTypesShuffleAPIPlaylistDataServiceClientFind;
  get: PlatformTypesShuffleAPIPlaylistDataServiceClientGet;
  multiGet: PlatformTypesShuffleAPIPlaylistDataServiceClientMultiGet;
  options: PlatformTypesShuffleAPIPlaylistDataServiceClientOptions;
  subscribe: PlatformTypesShuffleAPIPlaylistDataServiceClientSubscribe;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesShuffleAPIPlaylistDataServiceClientFind = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShuffleAPIPlaylistDataServiceClientGet = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShuffleAPIPlaylistDataServiceClientMultiGet = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesShuffleAPIPlaylistDataServiceClientOptions = Record<string, unknown>;

export type PlatformTypesShuffleAPIPlaylistDataServiceClientSubscribe = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesShuffleAPIPlaylistServiceClient {
  clearToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientClearToken;
  contains: PlatformTypesPlaylistResyncAPIPlaylistServiceClientContains;
  emitItemSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitItemSignals;
  emitSignals: PlatformTypesPlaylistResyncAPIPlaylistServiceClientEmitSignals;
  getMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientGetMembers;
  invalidateRevisions: PlatformTypesPlaylistResyncAPIPlaylistServiceClientInvalidateRevisions;
  modify: PlatformTypesPlaylistResyncAPIPlaylistServiceClientModify;
  options: PlatformTypesShuffleAPIPlaylistServiceClientOptions;
  requestLenses: PlatformTypesPlaylistResyncAPIPlaylistServiceClientRequestLenses;
  resync: PlatformTypesPlaylistResyncAPIPlaylistServiceClientResync;
  setBasePermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetBasePermission;
  setMemberPermission: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetMemberPermission;
  setOfflineState: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetOfflineState;
  setToken: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSetToken;
  signal: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignal;
  signalItem: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSignalItem;
  subscribeToMembers: PlatformTypesPlaylistResyncAPIPlaylistServiceClientSubscribeToMembers;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesShuffleAPIPlaylistServiceClientOptions = Record<string, unknown>;

export type PlatformTypesShuffleAPISetShuffle = (arg0: any, arg1: any) => unknown;

export type PlatformTypesShuffleAPISyncShuffle = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesSingAlongAPI {
  getCapabilities: PlatformTypesSingAlongAPIGetCapabilities;
  getStatus: PlatformTypesSingAlongAPIGetStatus;
  karaokeServiceClient: PlatformTypesSingAlongAPIKaraokeServiceClient;
  setStatus: PlatformTypesSingAlongAPISetStatus;
  setVocalVolume: PlatformTypesSingAlongAPISetVocalVolume;
}

export type PlatformTypesSingAlongAPIGetCapabilities = () => unknown;

export type PlatformTypesSingAlongAPIGetStatus = () => unknown;

export interface PlatformTypesSingAlongAPIKaraokeServiceClient {
  getStatus: PlatformTypesSingAlongAPIKaraokeServiceClientGetStatus;
  options: PlatformTypesSingAlongAPIKaraokeServiceClientOptions;
  postStatus: PlatformTypesSingAlongAPIKaraokeServiceClientPostStatus;
  postVocalVolume: PlatformTypesSingAlongAPIKaraokeServiceClientPostVocalVolume;
  subscribeToEvents: PlatformTypesSingAlongAPIKaraokeServiceClientSubscribeToEvents;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSingAlongAPIKaraokeServiceClientGetStatus = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSingAlongAPIKaraokeServiceClientOptions = Record<string, unknown>;

export type PlatformTypesSingAlongAPIKaraokeServiceClientPostStatus = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSingAlongAPIKaraokeServiceClientPostVocalVolume = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSingAlongAPIKaraokeServiceClientSubscribeToEvents = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSingAlongAPISetStatus = (arg0: any) => unknown;

export type PlatformTypesSingAlongAPISetVocalVolume = (arg0: any) => unknown;

export interface PlatformTypesSocialConnectAPI {
  _fetchCurrentSessionInFlightCache: PlatformTypesSocialConnectAPIFetchCurrentSessionInFlightCache;
  addJamExperienceListener: PlatformTypesSocialConnectAPIAddJamExperienceListener;
  cleanupSession: PlatformTypesSocialConnectAPICleanupSession;
  createSession: PlatformTypesSocialConnectAPICreateSession;
  currentSession: null;
  deleteSession: PlatformTypesSocialConnectAPIDeleteSession;
  emitSessionEnded: PlatformTypesSocialConnectAPIEmitSessionEnded;
  events: PlatformTypesSocialConnectAPIEvents;
  fetchBroadcastStatus: PlatformTypesSocialConnectAPIFetchBroadcastStatus;
  fetchCurrentSession: PlatformTypesSocialConnectAPIFetchCurrentSession;
  fetchCurrentSessionWithCache: PlatformTypesSocialConnectAPIFetchCurrentSessionWithCache;
  fetchShortLinkInFlightCache: PlatformTypesSocialConnectAPIFetchShortLinkInFlightCache;
  getBroadcastingEvents: PlatformTypesSocialConnectAPIGetBroadcastingEvents;
  getCachedShortInviteLink: PlatformTypesSocialConnectAPIGetCachedShortInviteLink;
  getCurrentSession: PlatformTypesSocialConnectAPIGetCurrentSession;
  getEnabled: PlatformTypesSocialConnectAPIGetEnabled;
  getEvents: PlatformTypesSocialConnectAPIGetEvents;
  getJamExperience: PlatformTypesSocialConnectAPIGetJamExperience;
  getJamJoinInfo: PlatformTypesSocialConnectAPIGetJamJoinInfo;
  getJoinTokenFromConnectDeviceId: PlatformTypesSocialConnectAPIGetJoinTokenFromConnectDeviceId;
  getLocalNetSessionDevices: PlatformTypesSocialConnectAPIGetLocalNetSessionDevices;
  getSessionInfo: PlatformTypesSocialConnectAPIGetSessionInfo;
  getShortInviteLink: PlatformTypesSocialConnectAPIGetShortInviteLink;
  getShortInviteLinks: PlatformTypesSocialConnectAPIGetShortInviteLinks;
  handleJamSessionResponse: PlatformTypesSocialConnectAPIHandleJamSessionResponse;
  handleSessionMessage: PlatformTypesSocialConnectAPIHandleSessionMessage;
  handleSessionUpdate: PlatformTypesSocialConnectAPIHandleSessionUpdate;
  isSessionNewer: PlatformTypesSocialConnectAPIIsSessionNewer;
  joinSession: PlatformTypesSocialConnectAPIJoinSession;
  kickAllParticipants: PlatformTypesSocialConnectAPIKickAllParticipants;
  leaveSession: PlatformTypesSocialConnectAPILeaveSession;
  maybeEmitLeaveOrJoin: PlatformTypesSocialConnectAPIMaybeEmitLeaveOrJoin;
  removeSessionMember: PlatformTypesSocialConnectAPIRemoveSessionMember;
  serviceEvents: PlatformTypesSocialConnectAPIServiceEvents;
  setBroadcastStatus: PlatformTypesSocialConnectAPISetBroadcastStatus;
  setCurrentSession: PlatformTypesSocialConnectAPISetCurrentSession;
  setParticipantVolumeControl: PlatformTypesSocialConnectAPISetParticipantVolumeControl;
  setQueueOnlyMode: PlatformTypesSocialConnectAPISetQueueOnlyMode;
  shortLinkCaches: PlatformTypesSocialConnectAPIShortLinkCaches;
  socialConnectBroadcastingAPI: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPI;
  socialConnectConfig: string;
  socialConnectProductState: PlatformTypesSocialConnectAPISocialConnectProductState;
  socialConnectServiceClient: PlatformTypesSocialConnectAPISocialConnectServiceClient;
  urlDispenserServiceClient: PlatformTypesUrlDispenserServiceClient;
  waitForActiveOrLocalDeviceId: PlatformTypesSocialConnectAPIWaitForActiveOrLocalDeviceId;
}

export type PlatformTypesSocialConnectAPIAddJamExperienceListener = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPICleanupSession = () => unknown;

export type PlatformTypesSocialConnectAPICreateSession = () => unknown;

export type PlatformTypesSocialConnectAPIDeleteSession = () => unknown;

export type PlatformTypesSocialConnectAPIEmitSessionEnded = (arg0: any) => unknown;

export interface PlatformTypesSocialConnectAPIEvents {
  _emitter: PlatformTypesSocialConnectAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesSocialConnectAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesSocialConnectAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesSocialConnectAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesSocialConnectAPIEventsEmitterListeners {
  update: Array<PlatformTypesSocialConnectAPIEventsEmitterListenersUpdateItem>;
}

export interface PlatformTypesSocialConnectAPIEventsEmitterListenersUpdateItem {
  listener: PlatformTypesSocialConnectAPIEventsEmitterListenersUpdateItemListener;
  options: PlatformTypesSocialConnectAPIEventsEmitterListenersUpdateItemOptions;
}

export type PlatformTypesSocialConnectAPIEventsEmitterListenersUpdateItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPIEventsEmitterListenersUpdateItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesSocialConnectAPIEventsEmitterMetaListeners {
  add: PlatformTypesSocialConnectAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesSocialConnectAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesSocialConnectAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesSocialConnectAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesSocialConnectAPIFetchBroadcastStatus = () => unknown;

export type PlatformTypesSocialConnectAPIFetchCurrentSession = () => unknown;

export interface PlatformTypesSocialConnectAPIFetchCurrentSessionInFlightCache {
  _cache: Map<string, PlatformTypesSocialConnectAPIFetchCurrentSessionInFlightCacheCacheValue>;
  _ttl: null;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceInFlightCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  deleteOnSettle: PlatformTypesRegistryMapValueInstanceInFlightCacheDeleteOnSettle;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceInFlightCacheSet;
}

export interface PlatformTypesSocialConnectAPIFetchCurrentSessionInFlightCacheCacheValue {
  expiry: null;
  value: Promise<unknown>;
}

export type PlatformTypesSocialConnectAPIFetchCurrentSessionWithCache = () => unknown;

export interface PlatformTypesSocialConnectAPIFetchShortLinkInFlightCache {
  _cache: Map<unknown, unknown>;
  _ttl: null;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceInFlightCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  deleteOnSettle: PlatformTypesRegistryMapValueInstanceInFlightCacheDeleteOnSettle;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceInFlightCacheSet;
}

export type PlatformTypesSocialConnectAPIGetBroadcastingEvents = () => unknown;

export type PlatformTypesSocialConnectAPIGetCachedShortInviteLink = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSocialConnectAPIGetCurrentSession = () => unknown;

export type PlatformTypesSocialConnectAPIGetEnabled = () => unknown;

export type PlatformTypesSocialConnectAPIGetEvents = () => unknown;

export type PlatformTypesSocialConnectAPIGetJamExperience = () => unknown;

export type PlatformTypesSocialConnectAPIGetJamJoinInfo = () => unknown;

export type PlatformTypesSocialConnectAPIGetJoinTokenFromConnectDeviceId = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIGetLocalNetSessionDevices = () => unknown;

export type PlatformTypesSocialConnectAPIGetSessionInfo = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIGetShortInviteLink = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesSocialConnectAPIGetShortInviteLinks = (arg0: any, arg1: any) => unknown;

export type PlatformTypesSocialConnectAPIHandleJamSessionResponse = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIHandleSessionMessage = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIHandleSessionUpdate = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIIsSessionNewer = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIJoinSession = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesSocialConnectAPIKickAllParticipants = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPILeaveSession = () => unknown;

export type PlatformTypesSocialConnectAPIMaybeEmitLeaveOrJoin = (arg0: any, arg1: any) => unknown;

export type PlatformTypesSocialConnectAPIRemoveSessionMember = (arg0: any) => unknown;

export interface PlatformTypesSocialConnectAPIServiceEvents {
  _emitter: PlatformTypesSocialConnectAPIServiceEventsEmitter;
  _message_subscription: PlatformTypesSocialConnectAPIServiceEventsMessageSubscription;
  _pubSubAPI: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  _update_subscription: PlatformTypesSocialConnectAPIServiceEventsUpdateSubscription;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  numMessageListeners: number;
  numUpdateListeners: number;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  onSessionMessage: PlatformTypesSocialConnectAPIServiceEventsOnSessionMessage;
  onSessionUpdate: PlatformTypesSocialConnectAPIServiceEventsOnSessionUpdate;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
  subscribeToMessages: PlatformTypesSocialConnectAPIServiceEventsSubscribeToMessages;
  subscribeToUpdates: PlatformTypesSocialConnectAPIServiceEventsSubscribeToUpdates;
  unsubscribeToMessages: PlatformTypesSocialConnectAPIServiceEventsUnsubscribeToMessages;
  unsubscribeToUpdates: PlatformTypesSocialConnectAPIServiceEventsUnsubscribeToUpdates;
}

export interface PlatformTypesSocialConnectAPIServiceEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesSocialConnectAPIServiceEventsEmitterListeners;
  _metaListeners: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterListeners {
  SESSION_MESSAGE: Array<PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONMESSAGEItem>;
  SESSION_UPDATE: Array<PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONUPDATEItem>;
}

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONMESSAGEItem {
  listener: PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONMESSAGEItemListener;
  options: PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONMESSAGEItemOptions;
}

export type PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONMESSAGEItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONMESSAGEItemOptions =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONUPDATEItem {
  listener: PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONUPDATEItemListener;
  options: PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONUPDATEItemOptions;
}

export type PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONUPDATEItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsEmitterListenersSESSIONUPDATEItemOptions =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListeners {
  add: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAdd;
  remove: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAdd {
  SESSION_MESSAGE: Array<PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONMESSAGEItem>;
  SESSION_UPDATE: Array<PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONUPDATEItem>;
}

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONMESSAGEItem {
  listener: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONMESSAGEItemListener;
  options: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONMESSAGEItemOptions;
}

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONMESSAGEItemListener =
  () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONMESSAGEItemOptions =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONUPDATEItem {
  listener: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONUPDATEItemListener;
  options: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONUPDATEItemOptions;
}

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONUPDATEItemListener =
  () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersAddSESSIONUPDATEItemOptions =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemove {
  SESSION_MESSAGE: Array<PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONMESSAGEItem>;
  SESSION_UPDATE: Array<PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONUPDATEItem>;
}

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONMESSAGEItem {
  listener: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONMESSAGEItemListener;
  options: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONMESSAGEItemOptions;
}

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONMESSAGEItemListener =
  () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONMESSAGEItemOptions =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONUPDATEItem {
  listener: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONUPDATEItemListener;
  options: PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONUPDATEItemOptions;
}

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONUPDATEItemListener =
  () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsEmitterMetaListenersRemoveSESSIONUPDATEItemOptions =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPIServiceEventsMessageSubscription {
  cancel: PlatformTypesSocialConnectAPIServiceEventsMessageSubscriptionCancel;
}

export type PlatformTypesSocialConnectAPIServiceEventsMessageSubscriptionCancel = () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsOnSessionMessage = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsOnSessionUpdate = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsSubscribeToMessages = () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsSubscribeToUpdates = () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsUnsubscribeToMessages = () => unknown;

export type PlatformTypesSocialConnectAPIServiceEventsUnsubscribeToUpdates = () => unknown;

export interface PlatformTypesSocialConnectAPIServiceEventsUpdateSubscription {
  cancel: PlatformTypesSocialConnectAPIServiceEventsUpdateSubscriptionCancel;
}

export type PlatformTypesSocialConnectAPIServiceEventsUpdateSubscriptionCancel = () => unknown;

export type PlatformTypesSocialConnectAPISetBroadcastStatus = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPISetCurrentSession = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPISetParticipantVolumeControl = (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPISetQueueOnlyMode = (arg0: any) => unknown;

export interface PlatformTypesSocialConnectAPIShortLinkCaches {
  shortLinkCache: PlatformTypesSocialConnectAPIShortLinkCachesShortLinkCache;
  shortLinkQRCache: PlatformTypesSocialConnectAPIShortLinkCachesShortLinkQRCache;
}

export interface PlatformTypesSocialConnectAPIShortLinkCachesShortLinkCache {
  _cache: Map<unknown, unknown>;
  _ttl: null;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesSocialConnectAPIShortLinkCachesShortLinkQRCache {
  _cache: Map<unknown, unknown>;
  _ttl: null;
  cleanup: PlatformTypesRegistryMapValueInstanceInFlightCacheCleanup;
  clear: PlatformTypesRegistryMapValueInstanceInFlightCacheClear;
  create: PlatformTypesRegistryMapValueInstanceCacheCreate;
  delete: PlatformTypesRegistryMapValueInstanceInFlightCacheDelete;
  entries: PlatformTypesRegistryMapValueInstanceInFlightCacheEntries;
  get: PlatformTypesRegistryMapValueInstanceInFlightCacheGet;
  getExpiry: PlatformTypesRegistryMapValueInstanceInFlightCacheGetExpiry;
  has: PlatformTypesRegistryMapValueInstanceInFlightCacheHas;
  isExpired: PlatformTypesRegistryMapValueInstanceInFlightCacheIsExpired;
  peek: PlatformTypesRegistryMapValueInstanceInFlightCachePeek;
  set: PlatformTypesRegistryMapValueInstanceCacheSet;
}

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPI {
  _desktop_local_net_session_client: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClient;
  _pubSubAPI: PlatformTypesBuddyFeedAPIPresence2Pubsub;
  _socialConnectServiceClient: PlatformTypesSocialConnectAPISocialConnectServiceClient;
  activeDeviceId: null;
  broadcastStatus: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatus;
  broadcastStatusUpdatesSubscription: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatusUpdatesSubscription;
  events: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEvents;
  getEvents: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIGetEvents;
  getLocalNetSessionDevices: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIGetLocalNetSessionDevices;
  handleBroadcastStatusUpdate: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIHandleBroadcastStatusUpdate;
  latestScanningResponse: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPILatestScanningResponse;
  setBroadcastStatus: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPISetBroadcastStatus;
  startScanningForLocalNetSessionDevices: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIStartScanningForLocalNetSessionDevices;
  subscribeToBroadcastStatusUpdates: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPISubscribeToBroadcastStatusUpdates;
}

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatus {
  current: null;
}

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatusUpdatesSubscription {
  cancel: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatusUpdatesSubscriptionCancel;
}

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatusUpdatesSubscriptionCancel =
  () => unknown;

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClient {
  options: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientOptions;
  startBroadcasting: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStartBroadcasting;
  startScanning: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStartScanning;
  stopBroadcasting: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStopBroadcasting;
  stopScanning: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStopScanning;
  subNetworkInterfaces: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientSubNetworkInterfaces;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientOptions =
  Record<string, unknown>;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStartBroadcasting =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStartScanning =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStopBroadcasting =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientStopScanning =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIDesktopLocalNetSessionClientSubNetworkInterfaces =
  (arg0: any, arg1: any) => unknown;

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEvents {
  _emitter: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  broadcastStatus: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIBroadcastStatus;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterListeners =
  Record<string, unknown>;

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListeners {
  add: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersRemove;
}

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAdd {
  broadcast_status_update: Array<PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAddBroadcastStatusUpdateItem>;
}

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAddBroadcastStatusUpdateItem {
  listener: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAddBroadcastStatusUpdateItemListener;
  options: PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAddBroadcastStatusUpdateItemOptions;
}

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAddBroadcastStatusUpdateItemListener =
  (arg0: any) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersAddBroadcastStatusUpdateItemOptions =
  Record<string, unknown>;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIEventsEmitterMetaListenersRemove =
  Record<string, unknown>;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIGetEvents = () => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIGetLocalNetSessionDevices =
  () => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIHandleBroadcastStatusUpdate = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesSocialConnectAPISocialConnectBroadcastingAPILatestScanningResponse {
  devices: Array<unknown>;
}

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPISetBroadcastStatus = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPIStartScanningForLocalNetSessionDevices =
  () => unknown;

export type PlatformTypesSocialConnectAPISocialConnectBroadcastingAPISubscribeToBroadcastStatusUpdates =
  () => unknown;

export interface PlatformTypesSocialConnectAPISocialConnectProductState {
  addListener: PlatformTypesSocialConnectAPISocialConnectProductStateAddListener;
  getJamExperience: PlatformTypesSocialConnectAPISocialConnectProductStateGetJamExperience;
  isJamFreeEnabled: boolean;
  isJamPremiumEnabled: boolean;
  listeners: Set<PlatformTypesSocialConnectAPISocialConnectProductStateListenersSetElement>;
  productStateApi: PlatformTypesRegistryMapValueInstance5;
}

export type PlatformTypesSocialConnectAPISocialConnectProductStateAddListener = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectProductStateGetJamExperience = () => unknown;

export type PlatformTypesSocialConnectAPISocialConnectProductStateListenersSetElement = (
  arg0: any,
) => unknown;

export interface PlatformTypesSocialConnectAPISocialConnectServiceClient {
  _requestBuilder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  _transport: PlatformTypesRegistryMapValueInstanceTransport;
  createSession: PlatformTypesSocialConnectAPISocialConnectServiceClientCreateSession;
  deleteSession: PlatformTypesSocialConnectAPISocialConnectServiceClientDeleteSession;
  fetchCurrentSession: PlatformTypesSocialConnectAPISocialConnectServiceClientFetchCurrentSession;
  getSessionInfo: PlatformTypesSocialConnectAPISocialConnectServiceClientGetSessionInfo;
  joinSession: PlatformTypesSocialConnectAPISocialConnectServiceClientJoinSession;
  kickAllParticipants: PlatformTypesSocialConnectAPISocialConnectServiceClientKickAllParticipants;
  leaveSession: PlatformTypesSocialConnectAPISocialConnectServiceClientLeaveSession;
  onConnected: PlatformTypesSocialConnectAPISocialConnectServiceClientOnConnected;
  removeSessionMember: PlatformTypesSocialConnectAPISocialConnectServiceClientRemoveSessionMember;
  setBroadcastStatus: PlatformTypesSocialConnectAPISocialConnectServiceClientSetBroadcastStatus;
  setParticipantVolumeControl: PlatformTypesSocialConnectAPISocialConnectServiceClientSetParticipantVolumeControl;
  setQueueOnlyMode: PlatformTypesSocialConnectAPISocialConnectServiceClientSetQueueOnlyMode;
}

export type PlatformTypesSocialConnectAPISocialConnectServiceClientCreateSession = () => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientDeleteSession = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientFetchCurrentSession = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientGetSessionInfo = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientJoinSession = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientKickAllParticipants = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientLeaveSession = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientOnConnected = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientRemoveSessionMember = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientSetBroadcastStatus = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientSetParticipantVolumeControl = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPISocialConnectServiceClientSetQueueOnlyMode = (
  arg0: any,
) => unknown;

export type PlatformTypesSocialConnectAPIWaitForActiveOrLocalDeviceId = () => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPI {
  connectDevicesAPI: PlatformTypesConnectDevicesAPI;
  createStandalonePlayerInstance: PlatformTypesStandalonePlayerCoordinatorAPICreateStandalonePlayerInstance;
  currentActiveInstance: null;
  currentPlayerVolume: number;
  deleteStandalonePlayerInstance: PlatformTypesStandalonePlayerCoordinatorAPIDeleteStandalonePlayerInstance;
  inactivateInstance: PlatformTypesStandalonePlayerCoordinatorAPIInactivateInstance;
  instances: PlatformTypesStandalonePlayerCoordinatorAPIInstances;
  playbackAPI: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPI;
  playerAPI: PlatformTypesPlayerAPI;
  setupPlayerListeners: PlatformTypesStandalonePlayerCoordinatorAPISetupPlayerListeners;
  setupStandalonePlayerListeners: PlatformTypesStandalonePlayerCoordinatorAPISetupStandalonePlayerListeners;
}

export type PlatformTypesStandalonePlayerCoordinatorAPICreateStandalonePlayerInstance = (
  arg0: any,
) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIDeleteStandalonePlayerInstance = (
  arg0: any,
) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIInactivateInstance = (arg0: any) => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIInstances {
  delete: PlatformTypesStandalonePlayerCoordinatorAPIInstancesDelete;
  get: PlatformTypesStandalonePlayerCoordinatorAPIInstancesGet;
  has: PlatformTypesStandalonePlayerCoordinatorAPIInstancesHas;
  set: PlatformTypesStandalonePlayerCoordinatorAPIInstancesSet;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIInstancesDelete = (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIInstancesGet = (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIInstancesHas = (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIInstancesSet = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPI {
  __volume: number;
  _connectServiceClient: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIConnectServiceClient;
  _events: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEvents;
  _info: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIInfo;
  _isAvailable: boolean;
  _isLocal: boolean;
  _muteHelper: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelper;
  _playbackService: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIPlaybackService;
  _storageService: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageService;
  _volume: number;
  emitVolume: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEmitVolume;
  getCapabilities: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetCapabilities;
  getEvents: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetEvents;
  getFiles: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetFiles;
  getMuteHelper: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetMuteHelper;
  getPlaybackInfo: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetPlaybackInfo;
  getVolume: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetVolume;
  getVolumeInternal: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetVolumeInternal;
  lowerVolume: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPILowerVolume;
  raiseVolume: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIRaiseVolume;
  setVolume: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPISetVolume;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIConnectServiceClient {
  becomeInactive: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceBecomeInactive;
  cancelTransfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceCancelTransfer;
  forceDiscover: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceForceDiscover;
  getDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDebugLevel;
  getDeviceSettings: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceGetDeviceSettings;
  installSpotify: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceInstallSpotify;
  logout: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceLogout;
  notifyAudioRouteChanged: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceNotifyAudioRouteChanged;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIConnectServiceClientOptions;
  performDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePerformDiscovery;
  pickerOpened: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePickerOpened;
  pull: PlatformTypesSettingsAPIQualityRemoteQualityConnectServicePull;
  refreshCluster: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRefreshCluster;
  rename: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceRename;
  sendCommand: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSendCommand;
  setDebugLevel: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDebugLevel;
  setDeviceStreamQuality: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetDeviceStreamQuality;
  setPreferredZeroconf: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceSetPreferredZeroconf;
  startDiscovery: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceStartDiscovery;
  state: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceState;
  transfer: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceTransfer;
  transport: PlatformTypesRegistryMapValueInstance2;
  wakeSleepingClusterDevices: PlatformTypesSettingsAPIQualityRemoteQualityConnectServiceWakeSleepingClusterDevices;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIConnectServiceClientOptions =
  Record<string, unknown>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEmitVolume = () => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEvents {
  _emitter: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListeners {
  muted_changed: Array<PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersMutedChangedItem>;
  volume: Array<
    | PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem
    | PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem2
    | PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem3
    | PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem4
  >;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersMutedChangedItem {
  listener: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersMutedChangedItemListener;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersMutedChangedItemOptions;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersMutedChangedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersMutedChangedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem {
  listener: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem2 {
  listener: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener2;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions2;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem3 {
  listener: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener3;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions3;
}

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItem4 {
  listener: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener4;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions4;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener =
  (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener2 =
  (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener3 =
  (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemListener4 =
  () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions =
  Record<string, unknown>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions2 =
  Record<string, unknown>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions3 =
  Record<string, unknown>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterListenersVolumeItemOptions4 =
  Record<string, unknown>;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterMetaListeners {
  add: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterMetaListenersAdd =
  Record<string, unknown>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIEventsEmitterMetaListenersRemove =
  Record<string, unknown>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetCapabilities = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetEvents = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetFiles = (arg0: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetMuteHelper = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetPlaybackInfo = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetVolume = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIGetVolumeInternal = () => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIInfo {
  advisedBitrate: number;
  audioId: string;
  buffering: boolean;
  codecName: string;
  error: number;
  fileBitrate: number;
  fileId: string;
  fileType: string;
  gainAdjustment: number;
  hasLoudness: boolean;
  lengthMs: bigint;
  loudness: number;
  playbackSpeed: number;
  playing: boolean;
  resolvedContentUrl: string;
  status: number;
  strategy: string;
  targetBitrate: number;
  targetFileAvailable: boolean;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPILowerVolume = () => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelper {
  _isMuted: boolean;
  _playbackAPI: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPI;
  _volumeBehindMute: number;
  emitMuted: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperEmitMuted;
  isMuted: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperIsMuted;
  mute: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperMute;
  onVolumeChange: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperOnVolumeChange;
  setMuted: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperSetMuted;
  toggleMute: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperToggleMute;
  unmute: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperUnmute;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperEmitMuted =
  () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperIsMuted = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperMute = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperOnVolumeChange = (
  arg0: any,
) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperSetMuted = (
  arg0: any,
) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperToggleMute =
  () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIMuteHelperUnmute = () => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIPlaybackService {
  duck: PlatformTypesSettingsAPIQualityPlaybackServiceDuck;
  getFiles: PlatformTypesSettingsAPIQualityPlaybackServiceGetFiles;
  getFormats: PlatformTypesSettingsAPIQualityPlaybackServiceGetFormats;
  getPlaybackInfo: PlatformTypesSettingsAPIQualityPlaybackServiceGetPlaybackInfo;
  getRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceGetRawVolume;
  getVolume: PlatformTypesSettingsAPIQualityPlaybackServiceGetVolume;
  lowerVolume: PlatformTypesSettingsAPIQualityPlaybackServiceLowerVolume;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIPlaybackServiceOptions;
  raiseVolume: PlatformTypesSettingsAPIQualityPlaybackServiceRaiseVolume;
  setRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSetRawVolume;
  setVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSetVolume;
  subBufferUnderrun: PlatformTypesSettingsAPIQualityPlaybackServiceSubBufferUnderrun;
  subPlaybackInfo: PlatformTypesSettingsAPIQualityPlaybackServiceSubPlaybackInfo;
  subPosition: PlatformTypesSettingsAPIQualityPlaybackServiceSubPosition;
  subRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSubRawVolume;
  subVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSubVolume;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIPlaybackServiceOptions = Record<
  string,
  unknown
>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIRaiseVolume = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPISetVolume = (
  arg0: any,
) => unknown;

export interface PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageService {
  deleteExpiredItems: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceDeleteExpiredItems;
  deleteUnlockedItems: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceDeleteUnlockedItems;
  getCacheSizeLimit: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetCacheSizeLimit;
  getFileRanges: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetFileRanges;
  getStats: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetStats;
  options: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceOptions;
  setCacheSizeLimit: PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceSetCacheSizeLimit;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceDeleteExpiredItems =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceDeleteUnlockedItems =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetCacheSizeLimit =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetFileRanges = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceGetStats = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceOptions = Record<
  string,
  unknown
>;

export type PlatformTypesStandalonePlayerCoordinatorAPIPlaybackAPIStorageServiceSetCacheSizeLimit =
  (arg0: any, arg1: any) => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPISetupPlayerListeners = () => unknown;

export type PlatformTypesStandalonePlayerCoordinatorAPISetupStandalonePlayerListeners = (
  arg0: any,
) => unknown;

export interface PlatformTypesTranslations {
  "a11y.externalLink": string;
  "about.copyright": string;
  "about.title_label": string;
  "about.upgrade.downloaded": string;
  "about.upgrade.downloading": string;
  "about.upgrade.pending": string;
  "about.upgrade.pending_link": string;
  "about.upgrade.restart_link": string;
  "acq.artist.about.attribution": string;
  "action-trigger.available-in-app-only": string;
  "action-trigger.button.get-app": string;
  "action-trigger.button.not-now": string;
  "action-trigger.create-playlist": string;
  "action-trigger.listen-mixed-media-episode": string;
  "action-trigger.log-in-follow-profile": string;
  "action-trigger.log-in-like-action": string;
  "action-trigger.log-in-or-sign-up": string;
  "action-trigger.logged-out": string;
  "action-trigger.logged-out-continue": string;
  "action-trigger.logged-out-full-track": string;
  "action-trigger.logged-out-queue": string;
  "action-trigger.logged-out-radio": string;
  "action-trigger.logged-out-synced": string;
  "action-trigger.login-playlist": string;
  "action-trigger.save-album": string;
  "action-trigger.save-library": string;
  "ad-formats.ad-feedback.beta-tag": string;
  "ad-formats.ad-feedback.dislike": string;
  "ad-formats.ad-feedback.dislike.do-not-like": string;
  "ad-formats.ad-feedback.dislike.no-ads-upsell": string;
  "ad-formats.ad-feedback.dislike.not-relevant": string;
  "ad-formats.ad-feedback.dislike.offensive-content": string;
  "ad-formats.ad-feedback.dislike.too-often": string;
  "ad-formats.ad-feedback.dislike.unpleasant-content": string;
  "ad-formats.ad-feedback.like": string;
  "ad-formats.ad-feedback.like.discovered-new": string;
  "ad-formats.ad-feedback.like.enjoyable-content": string;
  "ad-formats.ad-feedback.like.interested-in-brand": string;
  "ad-formats.ad-feedback.like.interested-in-product": string;
  "ad-formats.ad-feedback.like.relevant": string;
  "ad-formats.ad-feedback.thanks-for-feedback": string;
  "ad-formats.advertisement": string;
  "ad-formats.advertisement-break": string;
  "ad-formats.advertisement-break-countdown-minutes-seconds": string;
  "ad-formats.advertisement-break-countdown-seconds": string;
  "ad-formats.advertisement-break-no-title": string;
  "ad-formats.context-menu.not-interested": string;
  "ad-formats.dismissAd": string;
  "ad-formats.dsa.aboutThisAd": string;
  "ad-formats.dsa.modal.aboutTailoredAds": string;
  "ad-formats.dsa.modal.adBasedInfoExplanation": string;
  "ad-formats.dsa.modal.adRelevancyAction": string;
  "ad-formats.dsa.modal.editProfile": string;
  "ad-formats.dsa.modal.otherInfo": string;
  "ad-formats.dsa.modal.privacySetting": string;
  "ad-formats.dsa.modal.profileInfo": string;
  "ad-formats.dsa.modal.tailoredAds": string;
  "ad-formats.dsa.modal.targeting.age": string;
  "ad-formats.dsa.modal.targeting.gender": string;
  "ad-formats.dsa.modal.targeting.interests": string;
  "ad-formats.dsa.modal.targeting.location": string;
  "ad-formats.dsa.modal.targeting.unknown": string;
  "ad-formats.exclusive": string;
  "ad-formats.hideAnnouncements": string;
  "ad-formats.learnMore": string;
  "ad-formats.npv.header.music-context": string;
  "ad-formats.npv.header.podcast-context": string;
  "ad-formats.presentedBy": string;
  "ad-formats.remove": string;
  "ad-formats.save": string;
  "ad-formats.skippable_ads.skip_countdown": string;
  "ad-formats.sponsored": string;
  "ad-formats.sponsored-playlist.header.reward-description": string;
  "ad-formats.sponsored-playlist.header.reward-title": string;
  "ad-formats.sponsored-playlist.header.sponsored-by": string;
  "ad-formats.sponsored-playlist.preroll.reward-message": string;
  "ad-formats.sponsored-playlist.scroll-card.error-button": string;
  "ad-formats.sponsored-playlist.scroll-card.error-subtitle": string;
  "ad-formats.sponsored-playlist.scroll-card.error-title": string;
  "ad-formats.sponsored-playlist.scroll-card.offline-subtitle": string;
  "ad-formats.sponsored-playlist.scroll-card.offline-title": string;
  "ad-formats.sponsored-playlist.scroll-card.title": string;
  "ad-formats.survey-connected-note": string;
  "ad-formats.survey-music-content": string;
  "ad-formats.survey-podcast-content": string;
  "ad-formats.survey-submit-button": string;
  "ad-formats.survey-thankyou": string;
  "ad-formats.video-ad-overlay.cta-button": string;
  "addToPlaylist-icon.label": string;
  "age.restriction.confirmAge": string;
  "age.restriction.continue": string;
  "age.restriction.explicitContent": string;
  "age.restriction.nineeteen-badge": string;
  "album-page.more-by-artist": string;
  "album-page.more-releases": PlatformTypesTranslationsAlbumpageMorereleases;
  "album.page-title": string;
  "artist-page-discography.all": string;
  "artist-page.appearson.seo.title": string;
  "artist-page.artist-playlists": string;
  "artist-page.artist-playlists.seo.title": string;
  "artist-page.artists-pick": string;
  "artist-page.discography": string;
  "artist-page.discography.seo.title": string;
  "artist-page.discovered-on": string;
  "artist-page.fansalsolike": string;
  "artist-page.fansalsolike.seo.title": string;
  "artist-page.featuring": string;
  "artist-page.featuring.seo.title": string;
  "artist-page.how-many-listeners": PlatformTypesTranslationsArtistpageHowmanylisteners;
  "artist-page.liked-songs-by-artist-title": string;
  "artist-page.merch": string;
  "artist-page.popular": string;
  "artist-page.saved-by-artist": string;
  "artist-page.saved-header": string;
  "artist-page.saved-tracks-amount": PlatformTypesTranslationsArtistpageSavedtracksamount;
  "artist-page.show-discography": string;
  "artist-page.tracks.seemore": string;
  "artist-page.tracks.showless": string;
  "artist-page.watch-more-from-artist": string;
  "artist-page.where-people-listen-from": string;
  "artist-page.world_rank": string;
  "artist.about": string;
  "artist.albums": string;
  "artist.appears-on": string;
  "artist.ban-label.ban": string;
  "artist.ban-label.unban": string;
  "artist.compilations": string;
  "artist.concerts.artist_tour_dates": string;
  "artist.concerts.error.not_found": string;
  "artist.latest-release": string;
  "artist.monthly-listeners-count": PlatformTypesTranslationsArtistMonthlylistenerscount;
  "artist.popular-tracks": string;
  "artist.singles": string;
  "artist.verified": string;
  "audiobook.freePriceDescription": string;
  "audiobook.freePriceExplanation": string;
  "audiobook.page.sample": string;
  "authorization-status.badge": string;
  "authorization-status.dismiss": string;
  "authorization-status.reconnecting": string;
  "authorization-status.retry": string;
  "authorization-status.retrying": string;
  "authorization-status.title": string;
  "blend.invite.body-with-name": string;
  "blend.invite.body-without-name": string;
  "blend.invite.page-title": string;
  "blend.join.title": string;
  "block-user.dialog.block": string;
  "block-user.dialog.cancel": string;
  "block-user.dialog.description": string;
  "block-user.dialog.title": string;
  "buddy-feed.enable-share-listening-activity": string;
  "buddy-feed.friend-activity": string;
  "buddy-feed.let-followers-see-your-listening": string;
  "buddy-feed.see-what-your-friends-are-playing": string;
  "capping.upsell-title": string;
  "card.a11y.explicit": string;
  "card.tag.album": string;
  "card.tag.artist": string;
  "card.tag.audiobook": string;
  "card.tag.author": string;
  "card.tag.episode": string;
  "card.tag.genre": string;
  "card.tag.music-video": string;
  "card.tag.playlist": string;
  "card.tag.profile": string;
  "card.tag.show": string;
  "card.tag.track": string;
  "card.tag.video": string;
  "carousel.left": string;
  "carousel.right": string;
  "character-counter": string;
  "chart.new-entries": PlatformTypesTranslationsChartNewentries;
  "collection.empty-page.episodes-subtitle": string;
  "collection.empty-page.episodes-title": string;
  "collection.empty-page.shows-cta": string;
  "collection.empty-page.songs-cta": string;
  "collection.empty-page.songs-subtitle": string;
  "collection.empty-page.songs-title": string;
  "collection.sort.creator": string;
  "collection.sort.recently-added": string;
  "concert.code_copied": string;
  "concert.door_time": string;
  "concert.entity_metadata.description_1": string;
  "concert.entity_metadata.description_2": string;
  "concert.entity_metadata.description_3": string;
  "concert.entity_metadata.description_4": string;
  "concert.entity_metadata.description_more": string;
  "concert.entity_metadata.title": string;
  "concert.entity_metadata.title_with_date_and_time": string;
  "concert.error.concert_not_found_title": string;
  "concert.error.no_locations_found_subtitle": string;
  "concert.feed.set_location": string;
  "concert.feed.set_location_button": string;
  "concert.feed.set_location_description": string;
  "concert.header.tickets_available_on": string;
  "concert.lineup": string;
  "concert.location.kilometers": string;
  "concert.location.radius.description": string;
  "concert.location.radius.header": string;
  "concert.location.radius.set": string;
  "concert.location.radius.title": string;
  "concert.location.radius.total": string;
  "concert.location.search.current_location": string;
  "concert.location.search.current_location.error": string;
  "concert.location.search.header": string;
  "concert.location.search.placeholder": string;
  "concert.location.search.recent": string;
  "concert.presale.code_description": string;
  "concert.presale.date_times": string;
  "concert.presale.no_codes": string;
  "concert.presale.title": string;
  "concert.see_more_events_in_location": string;
  "concert.show_time": string;
  "concert.similar_events": string;
  "concert.venue_dates": string;
  "concerts.browse_all_events": string;
  "concerts.cancelled": string;
  "concerts.claim_code": string;
  "concerts.count": PlatformTypesTranslationsConcertsCount;
  "concerts.count_near_location": string;
  "concerts.default_location": string;
  "concerts.discover_near_you": string;
  "concerts.error.no_concerts_found_message": string;
  "concerts.error.no_concerts_found_title": string;
  "concerts.event.view": string;
  "concerts.fans_first.explanation": string;
  "concerts.fans_first.get_access": string;
  "concerts.fans_first.not_eligible": string;
  "concerts.fans_first.offer_ends": string;
  "concerts.fans_first.post_follow": string;
  "concerts.fans_first.thanks": string;
  "concerts.fans_first.title": string;
  "concerts.few_left": string;
  "concerts.find_more": string;
  "concerts.find_nearby": string;
  "concerts.flag_issue.cancel": string;
  "concerts.flag_issue.confirm": string;
  "concerts.flag_issue.event": string;
  "concerts.flag_issue.lineup": string;
  "concerts.flag_issue.soldout": string;
  "concerts.flag_issue.success_message": string;
  "concerts.flag_issue.title": string;
  "concerts.genre_all_events": string;
  "concerts.genre_all_events_near_you": string;
  "concerts.genre_for_you": string;
  "concerts.genres.all_genres": string;
  "concerts.genres.clear": string;
  "concerts.genres.genres": string;
  "concerts.genres.show_events": string;
  "concerts.genres.top_genres": string;
  "concerts.header.other": string;
  "concerts.load_more": string;
  "concerts.location.change": string;
  "concerts.location.change.button": string;
  "concerts.location.change.confirm": string;
  "concerts.location.change.error": string;
  "concerts.location.change.info": string;
  "concerts.location.preferred": string;
  "concerts.location.preferred.info": string;
  "concerts.near_location": string;
  "concerts.next_concert_near_location_colon": string;
  "concerts.no_codes_title": string;
  "concerts.no_events_description": string;
  "concerts.no_upcoming_events": string;
  "concerts.not_interested.error": string;
  "concerts.not_interested.reason.artist": string;
  "concerts.not_interested.reason.bought_tickets": string;
  "concerts.not_interested.reason.date": string;
  "concerts.not_interested.reason.location": string;
  "concerts.not_interested.reason.other": string;
  "concerts.not_interested.set.label": string;
  "concerts.not_interested.success.artist": string;
  "concerts.not_interested.success.concert": string;
  "concerts.not_interested.title": string;
  "concerts.not_interested.undo.artist": string;
  "concerts.not_interested.undo.artist.success": string;
  "concerts.not_interested.undo.concert": string;
  "concerts.not_interested.undo.concert.success": string;
  "concerts.not_interested.undo.error": string;
  "concerts.offer.price": string;
  "concerts.on_sale": string;
  "concerts.on_tour_colon": string;
  "concerts.presale": string;
  "concerts.save": string;
  "concerts.saved": string;
  "concerts.soldout": string;
  "concerts.ticket_price": string;
  "concerts.unsaved": string;
  "concerts.venues": string;
  "concerts.venues_description": string;
  "concerts.venues_for_you": string;
  "concerts.venues_other": string;
  "concerts.view_all_upcoming_concerts_count": string;
  "concerts_added-to-your-saved-events": string;
  "concerts_near_you.multiple_locations": string;
  "concerts_near_you.playlist_disclaimer": string;
  "concerts_removed-from-your-saved-events": string;
  "connect-picker.connect-brand-title": string;
  "context-menu.about-recommendations": string;
  "context-menu.copy-album-link": string;
  "context-menu.copy-book-link": string;
  "context-menu.copy-concert-link": string;
  "context-menu.copy-episode-link": string;
  "context-menu.copy-generic-link": string;
  "context-menu.copy-show-link": string;
  "context-menu.copy-spotify-uri": string;
  "context-menu.copy-track-link": string;
  "context-menu.copy-venue-link": string;
  "context-menu.episode-page-link": string;
  "contextmenu.add-playlist-to-folder": string;
  "contextmenu.add-playlist-to-other-playlist": string;
  "contextmenu.add-recommendation-to-this-playlist": string;
  "contextmenu.add-to-another-playlist": string;
  "contextmenu.add-to-library": string;
  "contextmenu.add-to-playlist": string;
  "contextmenu.add-to-queue": string;
  "contextmenu.block": string;
  "contextmenu.buy-audiobook": string;
  "contextmenu.create-folder": string;
  "contextmenu.create-playlist": string;
  "contextmenu.delete": string;
  "contextmenu.download": string;
  "contextmenu.edit-details": string;
  "contextmenu.edit-profile": string;
  "contextmenu.exclude-from-recommendations": string;
  "contextmenu.find-folder": string;
  "contextmenu.find-playlist": string;
  "contextmenu.follow": string;
  "contextmenu.get-free-audiobook": string;
  "contextmenu.go-to-album": string;
  "contextmenu.go-to-artist": string;
  "contextmenu.go-to-artist-radio": string;
  "contextmenu.go-to-audiobook": string;
  "contextmenu.go-to-radio-dsa": string;
  "contextmenu.go-to-song-radio": string;
  "contextmenu.include-in-recommendations": string;
  "contextmenu.invite-collaborators": string;
  "contextmenu.leave-playlist": string;
  "contextmenu.looping-visuals-hide": string;
  "contextmenu.looping-visuals-hide.feedback": string;
  "contextmenu.looping-visuals-show": string;
  "contextmenu.looping-visuals-show.feedback": string;
  "contextmenu.make-collaborator": string;
  "contextmenu.make-listener": string;
  "contextmenu.make-playlist-private": string;
  "contextmenu.make-playlist-public": string;
  "contextmenu.make-public": string;
  "contextmenu.make-secret": string;
  "contextmenu.mark-as-finished": string;
  "contextmenu.mark-as-not-started": string;
  "contextmenu.move-playlist-to-folder": string;
  "contextmenu.open_desktop_app": string;
  "contextmenu.pin-album": string;
  "contextmenu.pin-artist": string;
  "contextmenu.pin-audiobook": string;
  "contextmenu.pin-author": string;
  "contextmenu.pin-dj": string;
  "contextmenu.pin-event": string;
  "contextmenu.pin-folder": string;
  "contextmenu.pin-playlist": string;
  "contextmenu.pin-prerelease-album": string;
  "contextmenu.pin-prerelease-audiobook": string;
  "contextmenu.pin-show": string;
  "contextmenu.remove-from-folders": string;
  "contextmenu.remove-from-library": string;
  "contextmenu.remove-from-playlist": string;
  "contextmenu.remove-from-queue": string;
  "contextmenu.remove-from-your-episodes": string;
  "contextmenu.remove-recommendation": string;
  "contextmenu.remove-user-from-playlist": string;
  "contextmenu.rename": string;
  "contextmenu.report": string;
  "contextmenu.save-to-your-episodes": string;
  "contextmenu.share": string;
  "contextmenu.share.copy-artist-link": string;
  "contextmenu.share.copy-author-link": string;
  "contextmenu.share.copy-playlist-link": string;
  "contextmenu.share.copy-profile-link": string;
  "contextmenu.show-credits": string;
  "contextmenu.unblock": string;
  "contextmenu.unfollow": string;
  "contextmenu.unlock-audiobook": string;
  "contextmenu.unpin-album": string;
  "contextmenu.unpin-artist": string;
  "contextmenu.unpin-audiobook": string;
  "contextmenu.unpin-author": string;
  "contextmenu.unpin-dj": string;
  "contextmenu.unpin-event": string;
  "contextmenu.unpin-folder": string;
  "contextmenu.unpin-playlist": string;
  "contextmenu.unpin-prerelease-album": string;
  "contextmenu.unpin-prerelease-audiobook": string;
  "contextmenu.unpin-show": string;
  "country-hubs.featured-charts-metadata-description": string;
  "country-hubs.featured-charts-metadata-title": string;
  "country-hubs.featured-charts-title": string;
  "country-hubs.hub-description": string;
  "country-hubs.hub-title": string;
  "country-hubs.popular-albums-metadata-description": string;
  "country-hubs.popular-albums-metadata-title": string;
  "country-hubs.popular-albums-title": string;
  "country-hubs.popular-artists-metadata-description": string;
  "country-hubs.popular-artists-metadata-title": string;
  "country-hubs.popular-artists-title": string;
  "country-hubs.trending-songs-metadata-description": string;
  "country-hubs.trending-songs-metadata-title": string;
  "country-hubs.trending-songs-title": string;
  "country.ad": string;
  "country.ae": string;
  "country.ag": string;
  "country.al": string;
  "country.am": string;
  "country.ao": string;
  "country.ar": string;
  "country.at": string;
  "country.au": string;
  "country.az": string;
  "country.ba": string;
  "country.bb": string;
  "country.bd": string;
  "country.be": string;
  "country.bf": string;
  "country.bg": string;
  "country.bh": string;
  "country.bi": string;
  "country.bj": string;
  "country.bn": string;
  "country.bo": string;
  "country.br": string;
  "country.bs": string;
  "country.bt": string;
  "country.bw": string;
  "country.by": string;
  "country.bz": string;
  "country.ca": string;
  "country.cd": string;
  "country.cg": string;
  "country.ch": string;
  "country.ci": string;
  "country.cl": string;
  "country.cm": string;
  "country.co": string;
  "country.cr": string;
  "country.cv": string;
  "country.cw": string;
  "country.cy": string;
  "country.cz": string;
  "country.de": string;
  "country.dj": string;
  "country.dk": string;
  "country.dm": string;
  "country.do": string;
  "country.dz": string;
  "country.ec": string;
  "country.ee": string;
  "country.eg": string;
  "country.es": string;
  "country.et": string;
  "country.fi": string;
  "country.fj": string;
  "country.fm": string;
  "country.fr": string;
  "country.ga": string;
  "country.gb": string;
  "country.gd": string;
  "country.ge": string;
  "country.gh": string;
  "country.gm": string;
  "country.gn": string;
  "country.gq": string;
  "country.gr": string;
  "country.gt": string;
  "country.gw": string;
  "country.gy": string;
  "country.hk": string;
  "country.hn": string;
  "country.hr": string;
  "country.ht": string;
  "country.hu": string;
  "country.id": string;
  "country.ie": string;
  "country.il": string;
  "country.in": string;
  "country.iq": string;
  "country.is": string;
  "country.it": string;
  "country.jm": string;
  "country.jo": string;
  "country.jp": string;
  "country.ke": string;
  "country.kg": string;
  "country.kh": string;
  "country.ki": string;
  "country.km": string;
  "country.kn": string;
  "country.kr": string;
  "country.kw": string;
  "country.kz": string;
  "country.la": string;
  "country.lb": string;
  "country.lc": string;
  "country.li": string;
  "country.lk": string;
  "country.lr": string;
  "country.ls": string;
  "country.lt": string;
  "country.lu": string;
  "country.lv": string;
  "country.ly": string;
  "country.ma": string;
  "country.mc": string;
  "country.md": string;
  "country.me": string;
  "country.mg": string;
  "country.mh": string;
  "country.mk": string;
  "country.ml": string;
  "country.mn": string;
  "country.mo": string;
  "country.mr": string;
  "country.mt": string;
  "country.mu": string;
  "country.mv": string;
  "country.mw": string;
  "country.mx": string;
  "country.my": string;
  "country.mz": string;
  "country.na": string;
  "country.ne": string;
  "country.ng": string;
  "country.ni": string;
  "country.nl": string;
  "country.no": string;
  "country.np": string;
  "country.nr": string;
  "country.nz": string;
  "country.om": string;
  "country.pa": string;
  "country.pe": string;
  "country.pg": string;
  "country.ph": string;
  "country.pk": string;
  "country.pl": string;
  "country.ps": string;
  "country.pt": string;
  "country.pw": string;
  "country.py": string;
  "country.qa": string;
  "country.ro": string;
  "country.rs": string;
  "country.rw": string;
  "country.sa": string;
  "country.sb": string;
  "country.sc": string;
  "country.se": string;
  "country.sg": string;
  "country.si": string;
  "country.sk": string;
  "country.sl": string;
  "country.sm": string;
  "country.sn": string;
  "country.sr": string;
  "country.st": string;
  "country.sv": string;
  "country.sz": string;
  "country.td": string;
  "country.tg": string;
  "country.th": string;
  "country.tj": string;
  "country.tl": string;
  "country.tn": string;
  "country.to": string;
  "country.tr": string;
  "country.tt": string;
  "country.tv": string;
  "country.tw": string;
  "country.tz": string;
  "country.ua": string;
  "country.ug": string;
  "country.us": string;
  "country.uy": string;
  "country.uz": string;
  "country.vc": string;
  "country.ve": string;
  "country.vn": string;
  "country.vu": string;
  "country.ws": string;
  "country.xk": string;
  "country.za": string;
  "country.zm": string;
  "country.zw": string;
  "date.today": string;
  "desktop-about.copy-version-info-tooltip": string;
  "desktop-about.platform": string;
  "desktop-about.platform-linux": string;
  "desktop-about.platform-mac-arm-64": string;
  "desktop-about.platform-mac-x86": string;
  "desktop-about.platform-unknown": string;
  "desktop-about.platform-win-arm-64": string;
  "desktop-about.platform-win-x86": string;
  "desktop-about.platform-win-x86-64": string;
  "desktop.login.Back": string;
  "desktop.settings.automatic-downgrade.info": string;
  "desktop.settings.automatic-downgrade.title": string;
  "desktop.settings.automixInfo": string;
  "desktop.settings.autoplay": string;
  "desktop.settings.autoplayInfo": string;
  "desktop.settings.autostart": string;
  "desktop.settings.autostartMinimized": string;
  "desktop.settings.autostartNormal": string;
  "desktop.settings.autostartOff": string;
  "desktop.settings.closeShouldMinimize": string;
  "desktop.settings.compatibility": string;
  "desktop.settings.crossfadeTracks": string;
  "desktop.settings.downloadQuality.info": string;
  "desktop.settings.downloadQuality.title": string;
  "desktop.settings.enableDeveloperMode": string;
  "desktop.settings.enableHardwareAcceleration": string;
  "desktop.settings.explicitContentFilter": string;
  "desktop.settings.explicitContentFilterSetting": string;
  "desktop.settings.explicitContentFilterSettingDetails1": string;
  "desktop.settings.explicitContentFilterSettingDetails2": string;
  "desktop.settings.explicitContentFilterSettingLocked": string;
  "desktop.settings.language": string;
  "desktop.settings.language-override": string;
  "desktop.settings.loudnessEnvironment_with_limiter_details": string;
  "desktop.settings.loudnessLoud": string;
  "desktop.settings.loudnessNormal": string;
  "desktop.settings.loudnessQuiet": string;
  "desktop.settings.monoDownmixer": string;
  "desktop.settings.musicQuality": string;
  "desktop.settings.newPlaylistsPublic": string;
  "desktop.settings.normalize": string;
  "desktop.settings.offlineStorageChangeLocation": string;
  "desktop.settings.offlineStorageLocation": string;
  "desktop.settings.otfn": string;
  "desktop.settings.playback": string;
  "desktop.settings.privateSession": string;
  "desktop.settings.privateSession.tooltip": string;
  "desktop.settings.proxy.autodetect": string;
  "desktop.settings.proxy.host": string;
  "desktop.settings.proxy.http": string;
  "desktop.settings.proxy.noproxy": string;
  "desktop.settings.proxy.pass": string;
  "desktop.settings.proxy.port": string;
  "desktop.settings.proxy.socks4": string;
  "desktop.settings.proxy.socks5": string;
  "desktop.settings.proxy.title": string;
  "desktop.settings.proxy.type": string;
  "desktop.settings.proxy.user": string;
  "desktop.settings.publishActivity": string;
  "desktop.settings.publishTopArtists": string;
  "desktop.settings.search": string;
  "desktop.settings.sec": string;
  "desktop.settings.selectLanguage": string;
  "desktop.settings.settings": string;
  "desktop.settings.showChromeToolbar": string;
  "desktop.settings.showFollows": string;
  "desktop.settings.showSystemMediaControls": string;
  "desktop.settings.social": string;
  "desktop.settings.startupAndWindowBehavior": string;
  "desktop.settings.storage": string;
  "desktop.settings.storage.cache.button": string;
  "desktop.settings.storage.cache.dialog.error": string;
  "desktop.settings.storage.cache.dialog.heading": string;
  "desktop.settings.storage.cache.dialog.text": string;
  "desktop.settings.storage.cache.heading": string;
  "desktop.settings.storage.cache.success": string;
  "desktop.settings.storage.cache.text": string;
  "desktop.settings.storage.cancel": string;
  "desktop.settings.storage.close": string;
  "desktop.settings.storage.downloads.button": string;
  "desktop.settings.storage.downloads.dialog.error": string;
  "desktop.settings.storage.downloads.dialog.heading": string;
  "desktop.settings.storage.downloads.dialog.text": string;
  "desktop.settings.storage.downloads.heading": string;
  "desktop.settings.storage.downloads.remove": string;
  "desktop.settings.storage.downloads.success": string;
  "desktop.settings.storage.downloads.text": string;
  "desktop.settings.storage.help": string;
  "desktop.settings.streamingQuality": string;
  "desktop.settings.streamingQualityAutomatic": string;
  "desktop.settings.streamingQualityHigh": string;
  "desktop.settings.streamingQualityLow": string;
  "desktop.settings.streamingQualityNormal": string;
  "desktop.settings.streamingQualityVeryHigh": string;
  "desktop.settings.updateDelayNotice": string;
  "download.available-offline": string;
  "download.cancel": string;
  "download.complete": string;
  "download.download": string;
  "download.downloading": string;
  "download.progress-global": string;
  "download.remove": string;
  "download.upsell": string;
  "drop_down.filter_by": string;
  "drop_down.sort_by": string;
  "duplicate.tracks.addAll": string;
  "duplicate.tracks.addAnyway": string;
  "duplicate.tracks.addNewOnes": string;
  "duplicate.tracks.allAlreadyAdded": string;
  "duplicate.tracks.alreadyAdded": string;
  "duplicate.tracks.dontAdd": string;
  "duplicate.tracks.oneAlreadyAdded": string;
  "duplicate.tracks.someAlreadyAdded": string;
  "duplicate.tracks.someAlreadyAddedDescription": string;
  "episode.audiobook.chapter.finished": string;
  "episode.description-title": string;
  "episode.length": string;
  "episode.see_all_episodes": string;
  "equalizer.equalizer": string;
  "equalizer.filterA11yValueText": string;
  "equalizer.filterLabel": string;
  "equalizer.preset.acoustic": string;
  "equalizer.preset.bassBooster": string;
  "equalizer.preset.bassReducer": string;
  "equalizer.preset.classical": string;
  "equalizer.preset.dance": string;
  "equalizer.preset.deep": string;
  "equalizer.preset.electronic": string;
  "equalizer.preset.flat": string;
  "equalizer.preset.hiphop": string;
  "equalizer.preset.jazz": string;
  "equalizer.preset.latin": string;
  "equalizer.preset.loudness": string;
  "equalizer.preset.lounge": string;
  "equalizer.preset.manual": string;
  "equalizer.preset.piano": string;
  "equalizer.preset.pop": string;
  "equalizer.preset.rnb": string;
  "equalizer.preset.rock": string;
  "equalizer.preset.smallSpeakers": string;
  "equalizer.preset.spokenWord": string;
  "equalizer.preset.trebleBooster": string;
  "equalizer.preset.trebleReducer": string;
  "equalizer.preset.vocalBooster": string;
  "equalizer.presets": string;
  "equalizer.reset": string;
  "error-dialog.generic.body": string;
  "error-dialog.generic.header": string;
  "error-page.cta.cdmerror": string;
  "error-page.header.cdmerror": string;
  "error-page.header.expression_not_supported": string;
  "error-page.header.max_subscriptions_reached": string;
  "error-page.header.not_supported_for_device": string;
  "error-page.header.upcoming_releases_not_supported": string;
  "error-page.not-available-in-region.title": string;
  "error-page.not-found.home": string;
  "error-page.subtext.cdmerror": string;
  "error-page.subtext.max_subscriptions_reached": string;
  "error-page.subtext.upcoming_releases_not_supported": string;
  "error.generic": string;
  "error.not_found.body": string;
  "error.not_found.title.album": string;
  "error.not_found.title.page": string;
  "error.not_found.title.playlist": string;
  "error.not_found.title.podcast": string;
  "error.reload": string;
  "error.request-artist-appears-on": string;
  "error.request-artist-discography": string;
  "error.request-artist-failure": string;
  "error.request-artist-featuring": string;
  "error.request-artist-playlists": string;
  "error.request-artist-related-videos": string;
  "error.request-author-failure": string;
  "error.request-collection-music-downloads-failure": string;
  "error.request-collection-tracks-failure": string;
  "error.request-playlist-failure": string;
  "error.request-related-artists": string;
  "events_page.disclaimer": string;
  "events_page.timezone_hint": string;
  "ewg.color": string;
  "ewg.copied": string;
  "ewg.copy": string;
  "ewg.help": string;
  "ewg.help-text": string;
  "ewg.showcode": string;
  "ewg.size": string;
  "ewg.size.compact": string;
  "ewg.size.normal": string;
  "ewg.start-at": string;
  "ewg.terms": string;
  "ewg.title": string;
  "ewg.title.album": string;
  "ewg.title.artist": string;
  "ewg.title.audiobook": string;
  "ewg.title.episode": string;
  "ewg.title.playlist": string;
  "ewg.title.show": string;
  "ewg.title.track": string;
  "explicit-content.dialog.cancel": string;
  "explicit-content.dialog.confirm": string;
  "explicit-content.dialog.description": string;
  "explicit-content.dialog.title": string;
  "fatal-error.button-label": string;
  "fatal-error.header": string;
  "feedback.added-to-playlist-generic": string;
  "feedback.added-to-playlist-specific": string;
  "feedback.artist-banned-by-user": string;
  "feedback.artist-banned-by-user-banning-available": string;
  "feedback.artist-banned-by-user-undo": string;
  "feedback.ban-artist": string;
  "feedback.block-user": string;
  "feedback.cant-offline-sync-playlist-in-offline-mode": string;
  "feedback.cant-play-during-ads": string;
  "feedback.cant-play-track": string;
  "feedback.cant-skip-ads": string;
  "feedback.exclude-playlist-from-recommendations": string;
  "feedback.explicit-content-filtered": string;
  "feedback.hide-song": string;
  "feedback.include-playlist-in-recommendations": string;
  "feedback.left-playlist": string;
  "feedback.link-copied": string;
  "feedback.member-made-contributor": string;
  "feedback.member-made-listener": string;
  "feedback.play-after-ad": string;
  "feedback.playlist-made-private": string;
  "feedback.playlist-made-public": string;
  "feedback.playlist-publish": string;
  "feedback.playlist-unpublish": string;
  "feedback.removed-member": string;
  "feedback.skip-ads-after-delay": string;
  "feedback.skip-ads-to-hear-song": string;
  "feedback.track-banned-by-user": string;
  "feedback.track-exclusive-premium": string;
  "feedback.track-not-available": string;
  "feedback.track-not-available-forced-offline": string;
  "feedback.track-not-available-import": string;
  "feedback.track-not-available-in-region": string;
  "feedback.track-not-available-in-region-import": string;
  "feedback.unable-to-play": string;
  "feedback.unblock-user": string;
  "feedback.video-catalogue-restricted": string;
  "feedback.video-country-restricted": string;
  "feedback.video-georestricted": string;
  "feedback.video-playback-error": string;
  "feedback.video-playback-network-error": string;
  "feedback.video-unavailable": string;
  "feedback.video-unsupported-client-version": string;
  "feedback.video-unsupported-key-system": string;
  "feedback.video-unsupported-platform-version": string;
  "folder.delete-header": string;
  "forbidden-page.description": string;
  "forbidden-page.title": string;
  "fta.bottom-bar.subtitle": string;
  "fta.sign-up-free": string;
  "fta.wall.start-listening": string;
  "fta.wall.start-watching": string;
  "gallery.next": string;
  "gallery.prev": string;
  "header.about-recommendations-and-promotions": string;
  "hifi.yes": string;
  "history.empty-description": string;
  "history.empty-title": string;
  "home.afternoon": string;
  "home.dsa-message": string;
  "home.dsa-message-link": string;
  "home.evening": string;
  "home.filters": string;
  "home.morning": string;
  "i18n.language-selection.subtitle": string;
  "i18n.language-selection.title": string;
  "i18n.meta.album.title": string;
  "i18n.meta.author.title.author-bibliography": string;
  "i18n.meta.author.title.author-overview": string;
  "i18n.meta.home.title": string;
  "i18n.meta.track-lyrics.title": string;
  "i18n.meta.track.title": string;
  "image-upload.legal-disclaimer": string;
  "internal-link-recommender.based-on-this-song": string;
  "internal-link-recommender.load-more-episodes": string;
  "internal-link-recommender.more-episodes-like-this": string;
  "internal-link-recommender.more-podcasts-like-this": string;
  "internal-link-recommender.more-recommended-releases": string;
  "internal-link-recommender.recommended-releases": string;
  "keyboard.shortcuts.description.charts": string;
  "keyboard.shortcuts.description.createNewFolder": string;
  "keyboard.shortcuts.description.currentlyPlaying": string;
  "keyboard.shortcuts.description.goBackwards": string;
  "keyboard.shortcuts.description.goForwards": string;
  "keyboard.shortcuts.description.goToPreferences": string;
  "keyboard.shortcuts.description.home": string;
  "keyboard.shortcuts.description.likeDislikeSong": string;
  "keyboard.shortcuts.description.likedSongs": string;
  "keyboard.shortcuts.description.lowerVolume": string;
  "keyboard.shortcuts.description.madeForYour": string;
  "keyboard.shortcuts.description.openContextMenu": string;
  "keyboard.shortcuts.description.openSearchModal": string;
  "keyboard.shortcuts.description.raiseVolume": string;
  "keyboard.shortcuts.description.repeat": string;
  "keyboard.shortcuts.description.search": string;
  "keyboard.shortcuts.description.seekBackward": string;
  "keyboard.shortcuts.description.seekForward": string;
  "keyboard.shortcuts.description.selectAll": string;
  "keyboard.shortcuts.description.shuffle": string;
  "keyboard.shortcuts.description.skipNext": string;
  "keyboard.shortcuts.description.skipPrev": string;
  "keyboard.shortcuts.description.togglePlay": string;
  "keyboard.shortcuts.description.yourAlbums": string;
  "keyboard.shortcuts.description.yourArtists": string;
  "keyboard.shortcuts.description.yourAudiobooks": string;
  "keyboard.shortcuts.description.yourPlaylists": string;
  "keyboard.shortcuts.description.yourPodcasts": string;
  "keyboard.shortcuts.help.heading": string;
  "keyboard.shortcuts.help.subheading.press": string;
  "keyboard.shortcuts.help.subheading.toToggle": string;
  "keyboard.shortcuts.layout.navigationBarDecreaseWidth": string;
  "keyboard.shortcuts.layout.navigationBarIncreaseWidth": string;
  "keyboard.shortcuts.layout.rightSidebarDecreaseWidth": string;
  "keyboard.shortcuts.layout.rightSidebarIncreaseWidth": string;
  "keyboard.shortcuts.layout.toggleLeftSidebar": string;
  "keyboard.shortcuts.layout.toggleRightSidebar": string;
  "keyboard.shortcuts.or": string;
  "keyboard.shortcuts.section.basic": string;
  "keyboard.shortcuts.section.layout": string;
  "keyboard.shortcuts.section.navigation": string;
  "keyboard.shortcuts.section.playback": string;
  "leave-playlist.dialog.cancel": string;
  "leave-playlist.dialog.leave": string;
  "leave-playlist.dialog.private-description": string;
  "leave-playlist.dialog.public-contributor-description": string;
  "leave-playlist.dialog.public-listener-description": string;
  "leave-playlist.dialog.title": string;
  "licenses.title": string;
  "live_events.all_events_tab": string;
  "live_events.date_picker_button_text": string;
  "live_events.date_picker_dialog_clear": string;
  "live_events.date_picker_dialog_done": string;
  "live_events.date_picker_dialog_title": string;
  "live_events.label": string;
  "live_events.location_concert_tickets": string;
  "live_events.next_weekend_preset": string;
  "live_events.this_weekend_preset": string;
  "live_events.venue_shelf_title": string;
  "local-files": string;
  "local-files.description": string;
  "local-files.empty-button": string;
  "local-files.empty-description": string;
  "local-files.empty-header": string;
  "local-files.source.downloads": string;
  "local-files.source.itunes": string;
  "local-files.source.my_music": string;
  "local-files.source.windows_music_library": string;
  "locale.af": string;
  "locale.am": string;
  "locale.ar": string;
  "locale.ar-EG": string;
  "locale.ar-MA": string;
  "locale.ar-SA": string;
  "locale.az": string;
  "locale.bg": string;
  "locale.bho": string;
  "locale.bn": string;
  "locale.bs": string;
  "locale.ca": string;
  "locale.cs": string;
  "locale.da": string;
  "locale.de": string;
  "locale.el": string;
  "locale.en": string;
  "locale.en-GB": string;
  "locale.es": string;
  "locale.es-419": string;
  "locale.es-AR": string;
  "locale.es-MX": string;
  "locale.et": string;
  "locale.eu": string;
  "locale.fa": string;
  "locale.fi": string;
  "locale.fil": string;
  "locale.fr": string;
  "locale.fr-CA": string;
  "locale.gl": string;
  "locale.gu": string;
  "locale.he": string;
  "locale.hi": string;
  "locale.hr": string;
  "locale.hu": string;
  "locale.id": string;
  "locale.is": string;
  "locale.it": string;
  "locale.ja": string;
  "locale.kn": string;
  "locale.ko": string;
  "locale.lt": string;
  "locale.lv": string;
  "locale.mk": string;
  "locale.ml": string;
  "locale.mr": string;
  "locale.ms": string;
  "locale.nb": string;
  "locale.ne": string;
  "locale.nl": string;
  "locale.or": string;
  "locale.pa-IN": string;
  "locale.pa-PK": string;
  "locale.pl": string;
  "locale.pt-BR": string;
  "locale.pt-PT": string;
  "locale.ro": string;
  "locale.ru": string;
  "locale.sk": string;
  "locale.sl": string;
  "locale.sr": string;
  "locale.sv": string;
  "locale.sw": string;
  "locale.ta": string;
  "locale.te": string;
  "locale.th": string;
  "locale.tr": string;
  "locale.uk": string;
  "locale.ur": string;
  "locale.vi": string;
  "locale.zh-CN": string;
  "locale.zh-HK": string;
  "locale.zh-TW": string;
  "locale.zu": string;
  "miniplayer.close": string;
  "miniplayer.open": string;
  "miniplayer.open-in": string;
  "more.label.context": string;
  "more.label.track": string;
  "music_and_talk.album_or_show": string;
  "music_and_talk.in_this_episode": string;
  "mwp.cta.download.app": string;
  "mwp.cta.sign.up.free": string;
  "mwp.header.content.unavailable": string;
  "mwp.list.item.share": string;
  "mwp.podcast.all.episodes": string;
  "mwp.search.artists.all": string;
  "navbar.a11y.skip-navigation": string;
  "navbar.go-back": string;
  "navbar.go-forward": string;
  "navbar.install-app": string;
  "navbar.premium": string;
  "navbar.search": string;
  "npb.collapseCoverArt": string;
  "npb.expandCoverArt": string;
  "npv.full-screen": string;
  "npv.related-videos.title": string;
  "npv.song-videos.switch-to-audio": string;
  "npv.song-videos.switch-to-video": string;
  "offline-error.device-limit-reached.header": string;
  "offline-error.device-limit-reached.message": string;
  "offline.badge": string;
  "offline.callout-disconnected": string;
  "offline.feedback-text": string;
  "page.generic-title": string;
  "page.loading": string;
  "paywalls.modal-body-p1": string;
  "paywalls.modal-body-p2": string;
  "paywalls.modal-body-p3": string;
  "paywalls.modal-heading": string;
  "permissions.collaborator": string;
  "permissions.creator": string;
  "permissions.current-user-name": string;
  "permissions.invite-collaborators": string;
  "permissions.listener": string;
  "permissions.modal-label": string;
  "permissions.private-playlist": string;
  "permissions.public-playlist": string;
  "permissions.shared-with": string;
  "permissions.songs-added": PlatformTypesTranslationsPermissionsSongsadded;
  "playback-control.a11y.landmark-label": string;
  "playback-control.a11y.lightsaber-hilt-button": string;
  "playback-control.a11y.now-playing-bar-landmark-label": string;
  "playback-control.a11y.seek-slider-button": string;
  "playback-control.a11y.volume-high": string;
  "playback-control.a11y.volume-low": string;
  "playback-control.a11y.volume-medium": string;
  "playback-control.a11y.volume-off": string;
  "playback-control.a11y.volume-slider-button": string;
  "playback-control.ban": string;
  "playback-control.change-playback-speed": string;
  "playback-control.connect-picker": string;
  "playback-control.decrease-playback-speed": string;
  "playback-control.disable-repeat": string;
  "playback-control.disable-shuffle": string;
  "playback-control.enable-repeat": string;
  "playback-control.enable-repeat-one": string;
  "playback-control.enable-shuffle": string;
  "playback-control.increase-playback-speed": string;
  "playback-control.mute": string;
  "playback-control.now-playing-label": string;
  "playback-control.pause": string;
  "playback-control.play": string;
  "playback-control.playback-speed": string;
  "playback-control.playback-speed-button-a11y": string;
  "playback-control.queue": string;
  "playback-control.skip-back": string;
  "playback-control.skip-backward-15": string;
  "playback-control.skip-forward": string;
  "playback-control.skip-forward-15": string;
  "playback-control.un-ban": string;
  "playback-control.unmute": string;
  "playback-info.dsa-promotional-content": string;
  "playlist.a11y.pause": string;
  "playlist.a11y.play": string;
  "playlist.curation.albums": string;
  "playlist.curation.find_more": string;
  "playlist.curation.find_more-a11y.label": string;
  "playlist.curation.popular_songs": string;
  "playlist.curation.search_placeholder": string;
  "playlist.curation.search_placeholder-booklists": string;
  "playlist.curation.see_all_album": string;
  "playlist.curation.see_all_artists": string;
  "playlist.curation.see_all_songs": string;
  "playlist.curation.title": string;
  "playlist.default_folder_name": string;
  "playlist.default_playlist_name": string;
  "playlist.delete": string;
  "playlist.delete-cancel": string;
  "playlist.delete-description": string;
  "playlist.delete-title": string;
  "playlist.edit-details.button": string;
  "playlist.edit-details.change-photo": string;
  "playlist.edit-details.description-label": string;
  "playlist.edit-details.description-placeholder": string;
  "playlist.edit-details.error.description-breaks": string;
  "playlist.edit-details.error.failed-to-save": string;
  "playlist.edit-details.error.file-size-exceeded": string;
  "playlist.edit-details.error.file-upload-failed": string;
  "playlist.edit-details.error.image-type-not-supported": string;
  "playlist.edit-details.error.invalid-html": string;
  "playlist.edit-details.error.missing-name": string;
  "playlist.edit-details.error.no-internet": string;
  "playlist.edit-details.error.too-big": string;
  "playlist.edit-details.error.too-small": string;
  "playlist.edit-details.error.unsaved-changes": string;
  "playlist.edit-details.name-label": string;
  "playlist.edit-details.name-placeholder": string;
  "playlist.edit-details.remove-photo": string;
  "playlist.edit-details.title": string;
  "playlist.extender.button.add": string;
  "playlist.extender.empty.playlist": string;
  "playlist.extender.recommended.header": string;
  "playlist.extender.recommended.title": string;
  "playlist.extender.refresh": string;
  "playlist.extender.songs.in.playlist": string;
  "playlist.header.creator-and-co-creator": string;
  "playlist.header.creator-and-others": string;
  "playlist.header.made-for": string;
  "playlist.new-default-name": string;
  "playlist.new-header": string;
  "playlist.page-title": string;
  "playlist.presented_by": string;
  "playlist.remove_from_playlist": string;
  "playlist.remove_multiple_description": string;
  "playlist.search_in_playlist": string;
  "playlist.similar-playlist": string;
  "podcast-ads.recent_ads": string;
  "podcast-ads.recent_ads_from": string;
  "podcast-ads.recent_ads_just_two": string;
  "podcast-ads.recent_ads_more_than_two": string;
  "podcast-ads.show_more_indicator": string;
  "podcasts.subscriber-indicator.otp": string;
  "podcasts.subscriber-indicator.subscription": string;
  "premium.dialog.description": PlatformTypesTranslationsPremiumDialogDescription;
  "premium.dialog.disclaimer": string;
  "premium.dialog.disclaimer.noprice": string;
  "premium.dialog.subscribe": string;
  "premium.dialog.title": string;
  "preview.album": string;
  "preview.continue-playing": string;
  "preview.episode": string;
  "preview.playlist": string;
  "preview.remaining-time": string;
  "private-session.badge": string;
  "promotions.context-menu.not-interested": string;
  "promotions.default-section-title": string;
  "pta.bottom-bar.title": string;
  "pwa.confirm": string;
  "pwa.download-app": string;
  "queue.added-to-queue": string;
  "queue.cancel-button": string;
  "queue.clear-queue": string;
  "queue.confirm-button": string;
  "queue.confirm-message": string;
  "queue.confirm-title": PlatformTypesTranslationsQueueConfirmtitle;
  "queue.empty-description": string;
  "queue.empty-title": string;
  "queue.fine-something": string;
  "queue.next-from": string;
  "queue.next-in-queue": string;
  "queue.next-up": string;
  "queue.now-playing": string;
  "queue.queued-by": string;
  "queue.removed-from-queue": string;
  "release-notifier.update-available": string;
  "release-notifier.update-processing": string;
  "release-notifier.update-ready": string;
  "resize.sidebar": string;
  "rich-page.fans-also-like": string;
  "rich-page.popular-albums-by-artist": string;
  "rich-page.popular-releases-by-artist": string;
  "rich-page.popular-singles-and-eps-by-artist": string;
  "rich-page.popular-tracks": string;
  "search.a11y.clear-input": string;
  "search.a11y.songs-search-results": string;
  "search.clear-recent-searches": string;
  "search.clear-recent-searches-dialog.cancel-button": string;
  "search.clear-recent-searches-dialog.confirm-button": string;
  "search.clear-recent-searches-dialog.description": string;
  "search.clear-recent-searches-dialog.title": string;
  "search.concert.event": string;
  "search.concerts.see-all": string;
  "search.empty-results-text": string;
  "search.empty-results-text-short": string;
  "search.empty-results-title": string;
  "search.empty-results-title-for-chip": string;
  "search.lyrics-match": string;
  "search.page-title": string;
  "search.playlist-by": string;
  "search.row.top-results": string;
  "search.search-for-label": string;
  "search.see-all": string;
  "search.showing-category-query-songs": string;
  "search.title.albums": string;
  "search.title.all": string;
  "search.title.artists": string;
  "search.title.audiobooks": string;
  "search.title.authors": string;
  "search.title.concerts": string;
  "search.title.episodes": string;
  "search.title.genres-and-moods": string;
  "search.title.playlists": string;
  "search.title.podcast-and-shows": string;
  "search.title.profiles": string;
  "search.title.recent-searches": string;
  "search.title.shows": string;
  "search.title.top-result": string;
  "search.title.top-results": string;
  "search.title.tracks": string;
  "settings.addASource": string;
  "settings.canvasVideos": string;
  "settings.display": string;
  "settings.employee": string;
  "settings.library": string;
  "settings.library.compactMode": string;
  "settings.localFilesFolderAdded": string;
  "settings.npv": string;
  "settings.restartApp": string;
  "settings.showLocalFiles": string;
  "settings.showMusicAnnouncements": string;
  "settings.showSongsFrom": string;
  "settings.showTrackNotifications": string;
  "shared.ReloadBanner.button-reload-now": string;
  "shared.ReloadBanner.text": string;
  "shared.ReloadBanner.text-days": PlatformTypesTranslationsSharedReloadBannerTextdays;
  "shared.ReloadBanner.text-hours": PlatformTypesTranslationsSharedReloadBannerTexthours;
  "shared.ReloadBanner.text-soon": string;
  "shared.audiobook-capping.offline-capping-explanation.body": string;
  "shared.audiobook-capping.offline-capping-explanation.cta": string;
  "shared.audiobook-capping.offline-capping-explanation.title": string;
  "shared.library.entity-row.liked-songs.title": string;
  "shared.library.entity-row.local-files.title": string;
  "shared.library.entity-row.your-episodes.title": string;
  "shared.library.filter.album": string;
  "shared.library.filter.artist": string;
  "shared.library.filter.author": string;
  "shared.library.filter.book": string;
  "shared.library.filter.by-spotify": string;
  "shared.library.filter.by-you": string;
  "shared.library.filter.downloaded": string;
  "shared.library.filter.events": string;
  "shared.library.filter.in-progress": string;
  "shared.library.filter.playlist": string;
  "shared.library.filter.podcasts-courses": string;
  "shared.library.filter.unplayed": string;
  "shared.library.sort-by.author": string;
  "shared.library.sort-by.creator": string;
  "shared.library.sort-by.custom": string;
  "shared.library.sort-by.date": string;
  "shared.library.sort-by.name": string;
  "shared.library.sort-by.recently-added": string;
  "shared.library.sort-by.recently-played-or-added": string;
  "shared.library.sort-by.recently-updated": string;
  "shared.library.sort-by.relevance": string;
  "shelf.see-all": string;
  "shows.filter.in-progress": string;
  "shows.filter.unplayed": string;
  "shows.sort.newest-to-oldest": string;
  "shows.sort.oldest-to-newest": string;
  "sidebar.a11y.landmark-label": string;
  "sidebar.liked_songs": string;
  "sidebar.your_episodes": string;
  "similar-audiobooks.load-more-chapters": string;
  "similar-audiobooks.more-audiobooks-like-this": string;
  "singalong.button": string;
  "singalong.less-vocal": string;
  "singalong.more-vocal": string;
  "singalong.off": string;
  "singalong.title": string;
  "sort.added-by": string;
  "sort.album": string;
  "sort.album-or-podcast": string;
  "sort.artist": string;
  "sort.custom-order": string;
  "sort.date-added": string;
  "sort.duration": string;
  "sort.title": string;
  "spotify-connect": string;
  "subtitles-picker.autogenerated": string;
  "subtitles-picker.heading": string;
  "subtitles-picker.option_cs": string;
  "subtitles-picker.option_de": string;
  "subtitles-picker.option_el": string;
  "subtitles-picker.option_en": string;
  "subtitles-picker.option_es": string;
  "subtitles-picker.option_fi": string;
  "subtitles-picker.option_fr": string;
  "subtitles-picker.option_hu": string;
  "subtitles-picker.option_id": string;
  "subtitles-picker.option_it": string;
  "subtitles-picker.option_ja": string;
  "subtitles-picker.option_ms": string;
  "subtitles-picker.option_nl": string;
  "subtitles-picker.option_off": string;
  "subtitles-picker.option_pl": string;
  "subtitles-picker.option_pt": string;
  "subtitles-picker.option_sv": string;
  "subtitles-picker.option_tr": string;
  "subtitles-picker.option_vi": string;
  "subtitles-picker.option_zh": string;
  "time.days.short": PlatformTypesTranslationsTimeDaysShort;
  "time.estimated": string;
  "time.hours.short": PlatformTypesTranslationsTimeHoursShort;
  "time.left": string;
  "time.left-of": string;
  "time.minutes.short": PlatformTypesTranslationsTimeMinutesShort;
  "time.now": string;
  "time.over": string;
  "time.seconds.short": PlatformTypesTranslationsTimeSecondsShort;
  "time.weeks.short": PlatformTypesTranslationsTimeWeeksShort;
  "topBar.dsa-cta": string;
  "topBar.dsa-indicator": string;
  "topBar.label": string;
  "track-credits.accordion": string;
  "track-credits.acoustic-guitar": string;
  "track-credits.additional-credits": string;
  "track-credits.additional-engineer": string;
  "track-credits.additional-keyboards": string;
  "track-credits.additional-mixer": string;
  "track-credits.additional-percussion": string;
  "track-credits.additional-producer": string;
  "track-credits.additional-production": string;
  "track-credits.additional-programmer": string;
  "track-credits.additional-recording": string;
  "track-credits.additional-vocals": string;
  "track-credits.all-instruments": string;
  "track-credits.ambient-sounds": string;
  "track-credits.arranger": string;
  "track-credits.artist": string;
  "track-credits.assistant-engineer": string;
  "track-credits.assistant-mix-engineer": string;
  "track-credits.assistant-mixer": string;
  "track-credits.assistant-mixing-engineer": string;
  "track-credits.assistant-producer": string;
  "track-credits.assistant-recording-engineer": string;
  "track-credits.assistant-remix-engineer": string;
  "track-credits.associated-performer": string;
  "track-credits.audio-additional-mix-engineer": string;
  "track-credits.audio-recording-engineer": string;
  "track-credits.background-vocal": string;
  "track-credits.background-vocalist": string;
  "track-credits.background-vocals": string;
  "track-credits.backing-vocals": string;
  "track-credits.bass": string;
  "track-credits.bass-guitar": string;
  "track-credits.bells": string;
  "track-credits.brass-band": string;
  "track-credits.cajon": string;
  "track-credits.cello": string;
  "track-credits.chamber-ensemble": string;
  "track-credits.clapping": string;
  "track-credits.co-mixer": string;
  "track-credits.co-producer": string;
  "track-credits.co-writer": string;
  "track-credits.composer": string;
  "track-credits.composer-and-lyricist": string;
  "track-credits.conga": string;
  "track-credits.cymbals": string;
  "track-credits.designer": string;
  "track-credits.digital-editor": string;
  "track-credits.dobro": string;
  "track-credits.double-bass": string;
  "track-credits.drum-programmer": string;
  "track-credits.drum-programming": string;
  "track-credits.drums": string;
  "track-credits.editor": string;
  "track-credits.electric-bass": string;
  "track-credits.electric-guitar": string;
  "track-credits.engineer": string;
  "track-credits.engineer-and-mixer": string;
  "track-credits.executive-producer": string;
  "track-credits.featured-artist": string;
  "track-credits.featuring": string;
  "track-credits.fiddle": string;
  "track-credits.flugelhorn": string;
  "track-credits.flute": string;
  "track-credits.guitar": string;
  "track-credits.harp": string;
  "track-credits.horn": string;
  "track-credits.horn-arranger": string;
  "track-credits.income-participant": string;
  "track-credits.instruments": string;
  "track-credits.keyboards": string;
  "track-credits.keyboards-arrangements": string;
  "track-credits.label": string;
  "track-credits.lyricist": string;
  "track-credits.main-artist": string;
  "track-credits.mandolin": string;
  "track-credits.masterer": string;
  "track-credits.mastering-engineer": string;
  "track-credits.mellotron": string;
  "track-credits.miscellaneous-production": string;
  "track-credits.mix-engineer": string;
  "track-credits.mixer": string;
  "track-credits.mixing-engineer": string;
  "track-credits.mixing-engineers": string;
  "track-credits.music-production": string;
  "track-credits.music-publisher": string;
  "track-credits.orchestra": string;
  "track-credits.organ": string;
  "track-credits.pedal-steel": string;
  "track-credits.percussion": string;
  "track-credits.performers": string;
  "track-credits.piano": string;
  "track-credits.pro-tools": string;
  "track-credits.pro-tools-editing": string;
  "track-credits.producer": string;
  "track-credits.producers": string;
  "track-credits.production": string;
  "track-credits.programmed-and-arranged-by": string;
  "track-credits.programmer": string;
  "track-credits.programming": string;
  "track-credits.programming-and-keyboards": string;
  "track-credits.re-mixer": string;
  "track-credits.recorded-by": string;
  "track-credits.recorder": string;
  "track-credits.recording": string;
  "track-credits.recording-and-mixing": string;
  "track-credits.recording-arranger": string;
  "track-credits.recording-engineer": string;
  "track-credits.recording-producer": string;
  "track-credits.report-error": string;
  "track-credits.rhythm-guitar": string;
  "track-credits.samples": string;
  "track-credits.saxophone": string;
  "track-credits.second-engineer": string;
  "track-credits.sitar": string;
  "track-credits.songwriter": string;
  "track-credits.sound-effects": string;
  "track-credits.sound-engineer": string;
  "track-credits.source": string;
  "track-credits.steel-guitar": string;
  "track-credits.strings": string;
  "track-credits.studio-musician": string;
  "track-credits.synthesizer": string;
  "track-credits.tape-realization": string;
  "track-credits.trumpet": string;
  "track-credits.upright-bass": string;
  "track-credits.vibraphone": string;
  "track-credits.viola": string;
  "track-credits.violin": string;
  "track-credits.vocal": string;
  "track-credits.vocal-arranger": string;
  "track-credits.vocal-engineer": string;
  "track-credits.vocal-ensemble": string;
  "track-credits.vocal-producer": string;
  "track-credits.vocals": string;
  "track-credits.voice-performer": string;
  "track-credits.work-arranger": string;
  "track-credits.writer": string;
  "track-credits.writers": string;
  "track-page.error": string;
  "track-page.from-the-album": string;
  "track-page.from-the-compilation": string;
  "track-page.from-the-ep": string;
  "track-page.from-the-single": string;
  "track-page.playlists-with-this-song": string;
  "track-page.sign-in-to-view-lyrics": string;
  "track-trailer": string;
  "tracklist-header.audiobooks-counter": PlatformTypesTranslationsTracklistheaderAudiobookscounter;
  "tracklist-header.episodes-counter": PlatformTypesTranslationsTracklistheaderEpisodescounter;
  "tracklist-header.items-counter": PlatformTypesTranslationsTracklistheaderItemscounter;
  "tracklist-header.songs-counter": PlatformTypesTranslationsTracklistheaderSongscounter;
  "tracklist.a11y.pause": string;
  "tracklist.a11y.play": string;
  "tracklist.disc-sperator.title": string;
  "tracklist.drag.multiple.label": PlatformTypesTranslationsTracklistDragMultipleLabel;
  "tracklist.header.actions": string;
  "tracklist.header.added-by": string;
  "tracklist.header.album": string;
  "tracklist.header.album-or-podcast": string;
  "tracklist.header.columns": string;
  "tracklist.header.columns-menu.label": string;
  "tracklist.header.date-added": string;
  "tracklist.header.duration": string;
  "tracklist.header.event": string;
  "tracklist.header.plays": string;
  "tracklist.header.release-date": string;
  "tracklist.header.title": string;
  "tracklist.header.venue": string;
  "tracklist.livestream": string;
  "tracklist.popular-tracks": string;
  "type.newEpisode": string;
  "type.newPodcastEpisode": string;
  "type.podcast": string;
  "type.podcastEpisode": string;
  "type.show": string;
  "type.showEpisode": string;
  "upgrade.button": string;
  "upgrade.tooltip.title": string;
  "user-fraud-verification.confirm-dialog.cancel": string;
  "user-fraud-verification.confirm-dialog.confirm": string;
  "user-fraud-verification.confirm-dialog.description": string;
  "user-fraud-verification.confirm-dialog.label": string;
  "user-fraud-verification.confirm-dialog.title": string;
  "user-fraud-verification.dialog-alert.describe": string;
  "user-fraud-verification.dialog-alert.ok": string;
  "user-fraud-verification.dialog-alert.title": string;
  "user-fraud-verification.snackbar.message": string;
  "user.account": string;
  "user.edit-details.choose-photo": string;
  "user.edit-details.error.failed-to-save": string;
  "user.edit-details.error.file-size-exceeded": string;
  "user.edit-details.error.file-upload-failed": string;
  "user.edit-details.error.image-type-not-supported": string;
  "user.edit-details.error.missing-name": string;
  "user.edit-details.error.too-big": string;
  "user.edit-details.error.too-small": string;
  "user.edit-details.name-label": string;
  "user.edit-details.name-placeholder": string;
  "user.edit-details.remove-photo": string;
  "user.edit-details.title": string;
  "user.followers": PlatformTypesTranslationsUserFollowers;
  "user.following": PlatformTypesTranslationsUserFollowing;
  "user.log-out": string;
  "user.private-session": string;
  "user.public-playlists": PlatformTypesTranslationsUserPublicplaylists;
  "user.settings": string;
  "user.setup-duo": string;
  "user.setup-family": string;
  "user.support": string;
  "user.they_follow_us": string;
  "user.unable-to-update": string;
  "user.update-available": string;
  "user.update-client": string;
  "video-not-supported.modal.cancel": string;
  "video-not-supported.modal.confirm": string;
  "video-not-supported.modal.title": string;
  "video-player.default-view": string;
  "view.recently-played": string;
  "view.see-all": string;
  "view.web-player-home": string;
  "web-player.age-assurance.verify-age-action.title": string;
  "web-player.album.anniversary": PlatformTypesTranslationsWebplayerAlbumAnniversary;
  "web-player.album.open_coverart_modal": string;
  "web-player.album.premium-only-banner-album": string;
  "web-player.album.premium-only-banner-compilation": string;
  "web-player.album.premium-only-banner-ep": string;
  "web-player.album.premium-only-banner-single": string;
  "web-player.album.release": string;
  "web-player.aligned-curation.add-to-playlist-menu": string;
  "web-player.aligned-curation.button.cancel": string;
  "web-player.aligned-curation.button.done": string;
  "web-player.aligned-curation.button.new-playlist": string;
  "web-player.aligned-curation.contextmenu.new-playlist": string;
  "web-player.aligned-curation.feedback.added": string;
  "web-player.aligned-curation.feedback.added-to-library": string;
  "web-player.aligned-curation.feedback.change-button": string;
  "web-player.aligned-curation.feedback.changes-saved": string;
  "web-player.aligned-curation.feedback.removed": string;
  "web-player.aligned-curation.feedback.removed-from-library": string;
  "web-player.aligned-curation.saved-in.title": string;
  "web-player.aligned-curation.search-placeholder": string;
  "web-player.aligned-curation.title": string;
  "web-player.aligned-curation.tooltips.add-to-liked-songs": string;
  "web-player.aligned-curation.tooltips.add-to-playlist": string;
  "web-player.aligned-curation.tooltips.add-to-your-episodes": string;
  "web-player.aligned-curation.tooltips.add-to-your-library": string;
  "web-player.aligned-curation.tooltips.remove-from-liked-songs": string;
  "web-player.artist.discography.sort-box.sort-by": string;
  "web-player.artist.discography.sort-box.sort-name": string;
  "web-player.artist.discography.sort-box.sort-release": string;
  "web-player.artist.discography.sort-box.view-as": string;
  "web-player.artist.discography.sort-box.view-grid": string;
  "web-player.artist.discography.sort-box.view-list": string;
  "web-player.artist.upcoming-release": string;
  "web-player.artist.upcoming-release.album": string;
  "web-player.artist.upcoming-release.ep": string;
  "web-player.artist.upcoming-release.single": string;
  "web-player.audiobooks.audiobook": string;
  "web-player.audiobooks.buy": string;
  "web-player.audiobooks.buyFree": string;
  "web-player.audiobooks.goToAudiobook": string;
  "web-player.audiobooks.narratedByX": string;
  "web-player.audiobooks.noRating": string;
  "web-player.audiobooks.open_cover_modal": string;
  "web-player.audiobooks.rating.closeModal": string;
  "web-player.audiobooks.rating.listenFirstDescription": string;
  "web-player.audiobooks.rating.listenFirstTitle": string;
  "web-player.audiobooks.rating.ok": string;
  "web-player.audiobooks.rating.rateAudiobook": string;
  "web-player.audiobooks.rating.rateThisAudiobook": string;
  "web-player.audiobooks.rating.ratingButton": string;
  "web-player.audiobooks.rating.ratingButtonRatings": PlatformTypesTranslationsWebplayerAudiobooksRatingRatingButtonRatings;
  "web-player.audiobooks.rating.ratingButtonStars": PlatformTypesTranslationsWebplayerAudiobooksRatingRatingButtonStars;
  "web-player.audiobooks.rating.starAriaLabel": PlatformTypesTranslationsWebplayerAudiobooksRatingStarAriaLabel;
  "web-player.audiobooks.retailPrice": string;
  "web-player.audiobooks.unlock": string;
  "web-player.author.about": string;
  "web-player.author.author": string;
  "web-player.blend.duo-invite.description": string;
  "web-player.blend.group-invite.header": string;
  "web-player.blend.group-invite.warning": string;
  "web-player.blend.invite.button-title": string;
  "web-player.blend.invite.page-title": string;
  "web-player.cinema-mode.artwork-mode": string;
  "web-player.cinema-mode.canvas-mode": string;
  "web-player.cinema-mode.fullscreen.enter": string;
  "web-player.cinema-mode.fullscreen.exit": string;
  "web-player.cinema-mode.fullscreen.media-control-options": string;
  "web-player.cinema-mode.hero-mode": string;
  "web-player.cinema-mode.minimize": string;
  "web-player.cinema-mode.peek.show.now-playing-view": string;
  "web-player.clear-filter": string;
  "web-player.connect.bar.connected-state": string;
  "web-player.connect.bar.connecting-state": string;
  "web-player.connect.context-menu.incarnation-cast": string;
  "web-player.connect.context-menu.incarnation-connect": string;
  "web-player.connect.context-menu.incarnation-title": string;
  "web-player.connect.context-menu.log-out-of-device": string;
  "web-player.connect.device-picker.ad-playing": string;
  "web-player.connect.device-picker.auto-invite-jam-toggle": string;
  "web-player.connect.device-picker.check-wifi": string;
  "web-player.connect.device-picker.check-wifi-subtitle": string;
  "web-player.connect.device-picker.connect-hub-external-link": string;
  "web-player.connect.device-picker.connect-to-device": string;
  "web-player.connect.device-picker.current-device": string;
  "web-player.connect.device-picker.device-unavailable": string;
  "web-player.connect.device-picker.from-this-computer": string;
  "web-player.connect.device-picker.from-this-web-browser": string;
  "web-player.connect.device-picker.get-premium": string;
  "web-player.connect.device-picker.google-cast": string;
  "web-player.connect.device-picker.google-cast-devices": string;
  "web-player.connect.device-picker.help-external-link": string;
  "web-player.connect.device-picker.install-spotify": string;
  "web-player.connect.device-picker.no-devices-found": string;
  "web-player.connect.device-picker.no-devices-local-network": string;
  "web-player.connect.device-picker.on-other-networks": string;
  "web-player.connect.device-picker.on-this-network": string;
  "web-player.connect.device-picker.play-from-another": string;
  "web-player.connect.device-picker.play-from-another-subtitle": string;
  "web-player.connect.device-picker.playstation-unauthorized": string;
  "web-player.connect.device-picker.restart-device": string;
  "web-player.connect.device-picker.restart-speaker": string;
  "web-player.connect.device-picker.restart-speaker-subtitle": string;
  "web-player.connect.device-picker.restricted-device-default-body": string;
  "web-player.connect.device-picker.restricted-device-default-title": string;
  "web-player.connect.device-picker.restrictions-modal-ok-button": string;
  "web-player.connect.device-picker.select-another-device": string;
  "web-player.connect.device-picker.start-jam": string;
  "web-player.connect.device-picker.start-jam-description": string;
  "web-player.connect.device-picker.switch-to-app": string;
  "web-player.connect.device-picker.switch-to-app-subtitle": string;
  "web-player.connect.device-picker.this-computer": string;
  "web-player.connect.device-picker.this-web-browser": string;
  "web-player.connect.device-picker.tts-playing": string;
  "web-player.connect.device-picker.unsupported-uri": string;
  "web-player.connect.device-picker.update-device": string;
  "web-player.connect.device-picker.wakeup-timeout": string;
  "web-player.connect.device-picker.wakingup-device": string;
  "web-player.connect.nudge.dj-voice-unavailable": string;
  "web-player.connect.nudge.listen-to-speaker": string;
  "web-player.cover-art-modal.close": string;
  "web-player.cultural-moments.unsupported.appleAppStoreAlt": string;
  "web-player.cultural-moments.unsupported.googlePlayStoreAlt": string;
  "web-player.deeplink-intent.add-to-library.already-in-library": string;
  "web-player.deeplink-intent.add-to-library.artist-description": string;
  "web-player.deeplink-intent.add-to-library.description": string;
  "web-player.deeplink-intent.add-to-library.episodes-title": string;
  "web-player.deeplink-intent.add-to-library.liked-songs-title": string;
  "web-player.deeplink-intent.add-to-library.title": string;
  "web-player.download-page.direct-download": string;
  "web-player.download-page.download-button": string;
  "web-player.download-page.notification-retry": string;
  "web-player.download-page.notification-text": string;
  "web-player.download-page.other-platforms-current": string;
  "web-player.download-page.other-platforms-device-name": string;
  "web-player.download-page.upsell-popover.close": string;
  "web-player.download-page.upsell-popover.description-buddy-feed": string;
  "web-player.download-page.upsell-popover.description-download": string;
  "web-player.download-page.upsell-popover.description-equalizer": string;
  "web-player.download-page.upsell-popover.description-jam": string;
  "web-player.download-page.upsell-popover.description-normalize-quality": string;
  "web-player.download-page.upsell-popover.description-publish-activity": string;
  "web-player.download-page.upsell-popover.description-streaming-quality": string;
  "web-player.download-page.upsell-popover.title-buddy-feed": string;
  "web-player.download-page.upsell-popover.title-download": string;
  "web-player.download-page.upsell-popover.title-equalizer": string;
  "web-player.download-page.upsell-popover.title-jam": string;
  "web-player.download-page.upsell-popover.title-normalize-quality": string;
  "web-player.download-page.upsell-popover.title-publish-activity": string;
  "web-player.download-page.upsell-popover.title-streaming-quality": string;
  "web-player.download-page.windows-store": string;
  "web-player.download.remove-download-confirmation-dialog.cancel-button-text": string;
  "web-player.download.remove-download-confirmation-dialog.confirm-button-label": string;
  "web-player.download.remove-download-confirmation-dialog.confirm-button-text": string;
  "web-player.download.remove-download-confirmation-dialog.message": string;
  "web-player.download.remove-download-confirmation-dialog.message-remote": string;
  "web-player.download.remove-download-confirmation-dialog.title": string;
  "web-player.episode.description": string;
  "web-player.episode.transcript": string;
  "web-player.episode.transcript.disclaimer": string;
  "web-player.feedback.hidden": string;
  "web-player.feedback.hide-song": string;
  "web-player.feedback.track-banned-in-context": string;
  "web-player.feedback.track-banned-in-context-undo": string;
  "web-player.global-nav-bar.blend-button.subtitle": string;
  "web-player.global-nav-bar.blend-button.title": string;
  "web-player.global-nav-bar.create-button.label": string;
  "web-player.global-nav-bar.create-button.tooltip": string;
  "web-player.global-nav-bar.folder-button.subtitle": string;
  "web-player.global-nav-bar.folder-button.title": string;
  "web-player.global-nav-bar.jam-button.subtitle": string;
  "web-player.global-nav-bar.jam-button.title": string;
  "web-player.global-nav-bar.playlist-button.subtitle": string;
  "web-player.liked-songs.clear-filter": string;
  "web-player.liked-songs.liked-songs-filter-tags": string;
  "web-player.lyrics.ad": string;
  "web-player.lyrics.capped.learn-more": string;
  "web-player.lyrics.capped.monthly-limit-reached": string;
  "web-player.lyrics.error": string;
  "web-player.lyrics.noLyrics0": string;
  "web-player.lyrics.noLyrics1": string;
  "web-player.lyrics.noLyrics2": string;
  "web-player.lyrics.noLyrics3": string;
  "web-player.lyrics.providedBy": string;
  "web-player.lyrics.sync-button.title": string;
  "web-player.lyrics.title": string;
  "web-player.lyrics.translate": string;
  "web-player.lyrics.translating.to": string;
  "web-player.lyrics.translation.none": string;
  "web-player.lyrics.translation.not_available": string;
  "web-player.lyrics.unsynced": string;
  "web-player.merch.seeAllUri": string;
  "web-player.merch.title": string;
  "web-player.notification-center.button-label": string;
  "web-player.notification-center.empty-state": string;
  "web-player.now-playing-view.artist-about.title": string;
  "web-player.now-playing-view.author-about.title": string;
  "web-player.now-playing-view.chapters": string;
  "web-player.now-playing-view.chapters.disclaimer": string;
  "web-player.now-playing-view.cinema-mode.expand": string;
  "web-player.now-playing-view.credits": string;
  "web-player.now-playing-view.dubbed-episodes.description-multiple": string;
  "web-player.now-playing-view.dubbed-episodes.description-single": string;
  "web-player.now-playing-view.dubbed-episodes.title-multiple": string;
  "web-player.now-playing-view.dubbed-episodes.title-single": string;
  "web-player.now-playing-view.dubbed-episodes.title-single-with-language": string;
  "web-player.now-playing-view.empty-queue": string;
  "web-player.now-playing-view.empty-queue-cta": string;
  "web-player.now-playing-view.empty-state-cta": string;
  "web-player.now-playing-view.hide": string;
  "web-player.now-playing-view.label": string;
  "web-player.now-playing-view.lyrics.cinema-mode": string;
  "web-player.now-playing-view.lyrics.fullscreen": string;
  "web-player.now-playing-view.lyrics.hide-option": string;
  "web-player.now-playing-view.lyrics.show-less": string;
  "web-player.now-playing-view.lyrics.show-more": string;
  "web-player.now-playing-view.lyrics.title-preview": string;
  "web-player.now-playing-view.npv-merch": string;
  "web-player.now-playing-view.on-tour": string;
  "web-player.now-playing-view.open-queue": string;
  "web-player.now-playing-view.original-episode.description": string;
  "web-player.now-playing-view.original-episode.description-with-language": string;
  "web-player.now-playing-view.original-episode.title": string;
  "web-player.now-playing-view.original-episode.title-with-language": string;
  "web-player.now-playing-view.podcast-about.title": string;
  "web-player.now-playing-view.related-audio-tracks-title": string;
  "web-player.now-playing-view.show-all": string;
  "web-player.now-playing-view.show.lyrics": string;
  "web-player.now-playing-view.video.playing-in-pip": string;
  "web-player.now-playing-view.video.return-playback": string;
  "web-player.now-playing-view.web2desktop-funnel.button": string;
  "web-player.now-playing-view.web2desktop-funnel.subtitle": string;
  "web-player.now-playing-view.web2desktop-funnel.title": string;
  "web-player.offline.empty-state.subtitle": string;
  "web-player.offline.empty-state.title": string;
  "web-player.onboarding-checklist.card.open-checklist-button": string;
  "web-player.onboarding-checklist.complete-card.text": string;
  "web-player.onboarding-checklist.complete-card.title": string;
  "web-player.onboarding-checklist.menu.text": string;
  "web-player.onboarding-checklist.menu.text.complete": string;
  "web-player.onboarding-checklist.menu.title": string;
  "web-player.onboarding-checklist.menu.title.complete": string;
  "web-player.onboarding-checklist.progress": string;
  "web-player.onboarding-checklist.shelf.title": string;
  "web-player.onboarding-checklist.snackbar.action": string;
  "web-player.onboarding-checklist.snackbar.message": string;
  "web-player.onboarding-checklist.task.desktop.become-a-pro.action": string;
  "web-player.onboarding-checklist.task.desktop.become-a-pro.description": string;
  "web-player.onboarding-checklist.task.desktop.become-a-pro.title": string;
  "web-player.onboarding-checklist.task.desktop.queue-it-up.action": string;
  "web-player.onboarding-checklist.task.desktop.queue-it-up.description": string;
  "web-player.onboarding-checklist.task.desktop.queue-it-up.title": string;
  "web-player.onboarding-checklist.task.desktop.start-playing.action": string;
  "web-player.onboarding-checklist.task.desktop.start-playing.description": string;
  "web-player.onboarding-checklist.task.desktop.start-playing.title": string;
  "web-player.onboarding-checklist.task.desktop.try-mini-player.action": string;
  "web-player.onboarding-checklist.task.desktop.try-mini-player.description": string;
  "web-player.onboarding-checklist.task.desktop.try-mini-player.title": string;
  "web-player.onboarding-checklist.task.desktop.watch-a-video.action": string;
  "web-player.onboarding-checklist.task.desktop.watch-a-video.description": string;
  "web-player.onboarding-checklist.task.desktop.watch-a-video.title": string;
  "web-player.onboarding-checklist.task.spotify.create-playlist.action": string;
  "web-player.onboarding-checklist.task.spotify.create-playlist.description": string;
  "web-player.onboarding-checklist.task.spotify.create-playlist.title": string;
  "web-player.onboarding-checklist.task.spotify.queue-it-up.action": string;
  "web-player.onboarding-checklist.task.spotify.queue-it-up.description": string;
  "web-player.onboarding-checklist.task.spotify.queue-it-up.title": string;
  "web-player.onboarding-checklist.task.spotify.save-playlist.action": string;
  "web-player.onboarding-checklist.task.spotify.save-playlist.description": string;
  "web-player.onboarding-checklist.task.spotify.save-playlist.title": string;
  "web-player.onboarding-checklist.task.spotify.sign-up.description": string;
  "web-player.onboarding-checklist.task.spotify.sign-up.title": string;
  "web-player.onboarding-checklist.task.spotify.start-playing.action": string;
  "web-player.onboarding-checklist.task.spotify.start-playing.description": string;
  "web-player.onboarding-checklist.task.spotify.start-playing.title": string;
  "web-player.onboarding-checklist.task.spotify.try-mini-player.action": string;
  "web-player.onboarding-checklist.task.spotify.try-mini-player.description": string;
  "web-player.onboarding-checklist.task.spotify.try-mini-player.title": string;
  "web-player.onboarding-checklist.widget.tooltip": string;
  "web-player.onboarding.progress-button-label": string;
  "web-player.pigeon.audio-quality.automatic.details": string;
  "web-player.pigeon.audio-quality.automatic.label": string;
  "web-player.pigeon.audio-quality.change-button": string;
  "web-player.pigeon.audio-quality.file-quality": string;
  "web-player.pigeon.audio-quality.high.bitrate": string;
  "web-player.pigeon.audio-quality.high.bitrate-details.subtitle": string;
  "web-player.pigeon.audio-quality.high.label": string;
  "web-player.pigeon.audio-quality.lossless": string;
  "web-player.pigeon.audio-quality.lossless-16.bitrate": string;
  "web-player.pigeon.audio-quality.lossless-16.bitrate-details-1": string;
  "web-player.pigeon.audio-quality.lossless-16.bitrate-details-2": string;
  "web-player.pigeon.audio-quality.lossless-16.label": string;
  "web-player.pigeon.audio-quality.lossless-24.bitrate": string;
  "web-player.pigeon.audio-quality.lossless-24.bitrate-details-1": string;
  "web-player.pigeon.audio-quality.lossless-24.bitrate-details-2": string;
  "web-player.pigeon.audio-quality.lossless-24.label": string;
  "web-player.pigeon.audio-quality.low.bitrate": string;
  "web-player.pigeon.audio-quality.low.bitrate-details.subtitle": string;
  "web-player.pigeon.audio-quality.low.label": string;
  "web-player.pigeon.audio-quality.normal.bitrate": string;
  "web-player.pigeon.audio-quality.normal.bitrate-details.subtitle": string;
  "web-player.pigeon.audio-quality.normal.label": string;
  "web-player.pigeon.audio-quality.unknown.label": string;
  "web-player.pigeon.audio-quality.very-high.bitrate": string;
  "web-player.pigeon.audio-quality.very-high.bitrate-details.subtitle": string;
  "web-player.pigeon.audio-quality.very-high.label": string;
  "web-player.pigeon.get-started.button": string;
  "web-player.pigeon.get-started.subtitle": string;
  "web-player.pigeon.get-started.title": string;
  "web-player.pigeon.help-cards.bluetooth-degrades-lossless.body": string;
  "web-player.pigeon.help-cards.bluetooth-degrades-lossless.title": string;
  "web-player.pigeon.help-cards.default-to-very-high.body": string;
  "web-player.pigeon.help-cards.default-to-very-high.title": string;
  "web-player.pigeon.help-cards.listen-offline.body": string;
  "web-player.pigeon.help-cards.listen-offline.title": string;
  "web-player.pigeon.help-cards.lossless-unavailable.body": string;
  "web-player.pigeon.help-cards.lossless-unavailable.title": string;
  "web-player.pigeon.help-cards.need-to-redownload.body": string;
  "web-player.pigeon.help-cards.need-to-redownload.title": string;
  "web-player.pigeon.help-cards.opt-out-of-downgrade.body": string;
  "web-player.pigeon.help-cards.opt-out-of-downgrade.title": string;
  "web-player.pigeon.help-cards.poor-bandwidth-interferes.body": string;
  "web-player.pigeon.help-cards.poor-bandwidth-interferes.title": string;
  "web-player.pigeon.introduction.button.done": string;
  "web-player.pigeon.introduction.button.next": string;
  "web-player.pigeon.introduction.step-1.subtitle": string;
  "web-player.pigeon.introduction.step-1.title": string;
  "web-player.pigeon.introduction.step-2.subtitle": string;
  "web-player.pigeon.introduction.step-2.title": string;
  "web-player.pigeon.introduction.step-3.subtitle": string;
  "web-player.pigeon.introduction.step-3.title": string;
  "web-player.pip-mini-player.snackbar.link-opened-in-main-window": string;
  "web-player.pip-mini-player.upsell.cta-button": string;
  "web-player.pip-mini-player.upsell.subtitle": string;
  "web-player.pip-mini-player.upsell.title": string;
  "web-player.pip-mini-player.window-title": string;
  "web-player.playlist.booklist-not-supported-title": string;
  "web-player.playlist.booklist-not-supported.message": string;
  "web-player.playlist.booklist-recommender-dsa-message": string;
  "web-player.playlist.daylist.link-back-banner.link-text": string;
  "web-player.playlist.daylist.link-back-banner.title": string;
  "web-player.playlist.daylist.next-update": string;
  "web-player.playlist.more-like-this.section-header-title": string;
  "web-player.playlist.recommender-dsa-message": string;
  "web-player.prerelease.album_anonymous_presave": string;
  "web-player.prerelease.album_feedback_presaved": string;
  "web-player.prerelease.album_tracklist_preview": string;
  "web-player.prerelease.audiobook_feedback_presaved": string;
  "web-player.prerelease.countdown_label": string;
  "web-player.prerelease.days": PlatformTypesTranslationsWebplayerPrereleaseDays;
  "web-player.prerelease.hours": PlatformTypesTranslationsWebplayerPrereleaseHours;
  "web-player.prerelease.listen_now": string;
  "web-player.prerelease.minutes": PlatformTypesTranslationsWebplayerPrereleaseMinutes;
  "web-player.prerelease.presave": string;
  "web-player.prerelease.presaved": string;
  "web-player.prerelease.releases_on": string;
  "web-player.prerelease.seconds": PlatformTypesTranslationsWebplayerPrereleaseSeconds;
  "web-player.puffin.activation-1.button": string;
  "web-player.puffin.activation-1.subtitle": string;
  "web-player.puffin.activation-1.title": string;
  "web-player.puffin.activation-2.button-cancel": string;
  "web-player.puffin.activation-2.button-confirm": string;
  "web-player.puffin.activation-2.subtitle": string;
  "web-player.puffin.activation-2.title": string;
  "web-player.puffin.activation-3.subtitle": string;
  "web-player.puffin.activation-3.title": string;
  "web-player.puffin.activation-dialog.button-cancel": string;
  "web-player.puffin.activation-dialog.button-confirm": string;
  "web-player.puffin.activation-dialog.subtitle": string;
  "web-player.puffin.activation-dialog.title": string;
  "web-player.puffin.button.done": string;
  "web-player.puffin.device-connection-lost.tip-1": string;
  "web-player.puffin.device-connection-lost.tip-2": string;
  "web-player.puffin.device-connection-lost.tip-3": string;
  "web-player.puffin.device-connection-lost.tip-4": string;
  "web-player.puffin.device-connection-lost.title": string;
  "web-player.puffin.dismiss-get-started.body": string;
  "web-player.puffin.dismiss-get-started.cancel": string;
  "web-player.puffin.dismiss-get-started.title": string;
  "web-player.puffin.enhancement-unavailable.content-restriction": string;
  "web-player.puffin.error-troubleshooting": string;
  "web-player.puffin.get-started.subtitle": string;
  "web-player.puffin.get-started.title": string;
  "web-player.puffin.incompatible-headphones.close-button": string;
  "web-player.puffin.incompatible-headphones.description": string;
  "web-player.puffin.incompatible-headphones.subtitle": string;
  "web-player.puffin.incompatible-headphones.title": string;
  "web-player.puffin.listening-with.change-model": string;
  "web-player.puffin.listening-with.filters.specific-subtitle": string;
  "web-player.puffin.listening-with.filters.specific-subtitle-unavailable": string;
  "web-player.puffin.listening-with.filters.specific-title": string;
  "web-player.puffin.listening-with.model": string;
  "web-player.puffin.listening-with.placeholder-model": string;
  "web-player.puffin.manual-selection.airpods.subtitle": string;
  "web-player.puffin.manual-selection.airpods.title": string;
  "web-player.puffin.manual-selection.empty.subtitle": string;
  "web-player.puffin.manual-selection.empty.title": string;
  "web-player.puffin.manual-selection.models-list": string;
  "web-player.puffin.manual-selection.not-found-button": string;
  "web-player.puffin.manual-selection.search-placeholder": string;
  "web-player.puffin.manual-selection.subtitle": string;
  "web-player.puffin.manual-selection.title": string;
  "web-player.puffin.normalization-settings-dialog.cancel": string;
  "web-player.puffin.normalization-settings-dialog.confirm": string;
  "web-player.puffin.normalization-settings-dialog.subtitle.normalization-turn-off": string;
  "web-player.puffin.normalization-settings-dialog.subtitle.normalization-turn-on": string;
  "web-player.puffin.normalization-settings-dialog.subtitle.volume-increase": string;
  "web-player.puffin.normalization-settings-dialog.title": string;
  "web-player.puffin.reset-headphones.dialog.confirm": string;
  "web-player.puffin.reset-headphones.dialog.subtitle": string;
  "web-player.puffin.reset-headphones.dialog.title": string;
  "web-player.puffin.reset-headphones.menu-item": string;
  "web-player.puffin.signifier-text": string;
  "web-player.puffin.upsell.enhance-headphones": string;
  "web-player.puffin.upsell.enhance-headphones.cancel": string;
  "web-player.puffin.upsell.enhance-headphones.confirm": string;
  "web-player.puffin.upsell.enhance-headphones.not-headphones": string;
  "web-player.puffin.wired-connection": string;
  "web-player.queue-history.item-type.chapter": string;
  "web-player.queue-history.item-type.episode": string;
  "web-player.queue-history.item-type.track": string;
  "web-player.read-along-transcript.now-playing-view.read-along": string;
  "web-player.read-along-transcript.sync.button": string;
  "web-player.remote-downloads.context-menu.this-computer": string;
  "web-player.remote-downloads.feedback.downloading-to-remote-device": string;
  "web-player.report-issue.close": string;
  "web-player.report-issue.customer-service": string;
  "web-player.report-issue.log-files-copied-text": string;
  "web-player.report-issue.open-folder-here": string;
  "web-player.report-issue.personal-support-text": string;
  "web-player.report-issue.report-button-label": string;
  "web-player.report-issue.report-instruction-text": string;
  "web-player.report-issue.title": string;
  "web-player.report-issue.type-select-default": string;
  "web-player.report-issue.type-select-label": string;
  "web-player.report-issue.type.black": string;
  "web-player.report-issue.type.crash": string;
  "web-player.report-issue.type.functional": string;
  "web-player.report-issue.type.install": string;
  "web-player.report-issue.type.load": string;
  "web-player.report-issue.type.login": string;
  "web-player.report-issue.type.other": string;
  "web-player.report-issue.type.performance": string;
  "web-player.report-issue.type.playback": string;
  "web-player.report-issue.type.video": string;
  "web-player.search-modal.a11y.contentbyartist": string;
  "web-player.search-modal.a11y.label": string;
  "web-player.search-modal.instructions.go-back": string;
  "web-player.search-modal.instructions.navigate": string;
  "web-player.search-modal.instructions.nested-page": string;
  "web-player.search-modal.instructions.open": string;
  "web-player.search-modal.instructions.play": string;
  "web-player.search-modal.lyrics-match": string;
  "web-player.search-modal.offline": string;
  "web-player.search-modal.result.album": string;
  "web-player.search-modal.result.artist": string;
  "web-player.search-modal.result.audiobook": string;
  "web-player.search-modal.result.author": string;
  "web-player.search-modal.result.episode": string;
  "web-player.search-modal.result.genre": string;
  "web-player.search-modal.result.playlist": string;
  "web-player.search-modal.result.podcast": string;
  "web-player.search-modal.result.track": string;
  "web-player.search-modal.result.user": string;
  "web-player.search-modal.search-entity": string;
  "web-player.search-modal.title": string;
  "web-player.search.suggestions.header.down": string;
  "web-player.search.suggestions.header.enter": string;
  "web-player.search.suggestions.header.label": string;
  "web-player.search.suggestions.header.navigate": string;
  "web-player.search.suggestions.header.search": string;
  "web-player.search.suggestions.header.up": string;
  "web-player.search.suggestions.offline.description": string;
  "web-player.search.suggestions.offline.title": string;
  "web-player.search.suggestions.view-all-results": string;
  "web-player.settings.account": string;
  "web-player.settings.autoplay-dsa-enabled": string;
  "web-player.settings.content-preferences": string;
  "web-player.settings.edit-login-methods": string;
  "web-player.settings.edit-login-methods-button": string;
  "web-player.settings.personalized-recommendations": string;
  "web-player.settings.personalized-recommendations-body-text": string;
  "web-player.settings.personalized-recommendations-turned-off.modal-body": string;
  "web-player.settings.personalized-recommendations-turned-off.modal-body-missing-features-intro": string;
  "web-player.settings.personalized-recommendations-turned-off.modal-body-persistent-features-intro": string;
  "web-player.settings.personalized-recommendations-turned-off.modal-confirm": string;
  "web-player.settings.personalized-recommendations-turned-off.modal-disclaimer": string;
  "web-player.settings.personalized-recommendations-turned-off.modal-header": string;
  "web-player.settings.personalized-recommendations.error-modal-button": string;
  "web-player.settings.personalized-recommendations.error-modal-message": string;
  "web-player.settings.personalized-recommendations.modal-body": string;
  "web-player.settings.personalized-recommendations.modal-body-missing-features-1": string;
  "web-player.settings.personalized-recommendations.modal-body-missing-features-2": string;
  "web-player.settings.personalized-recommendations.modal-body-missing-features-3": string;
  "web-player.settings.personalized-recommendations.modal-body-missing-features-intro": string;
  "web-player.settings.personalized-recommendations.modal-body-persistent-features-1": string;
  "web-player.settings.personalized-recommendations.modal-body-persistent-features-intro": string;
  "web-player.settings.personalized-recommendations.modal-cancel": string;
  "web-player.settings.personalized-recommendations.modal-confirm": string;
  "web-player.settings.personalized-recommendations.modal-delay-disclaimer": string;
  "web-player.settings.personalized-recommendations.modal-header": string;
  "web-player.settings.playback.smart-shuffle": string;
  "web-player.settings.playback.smart-shuffle-dsa": string;
  "web-player.settings.quality.download-quality.lossless-snackbar-message": string;
  "web-player.settings.quality.streaming-quality.info-text": string;
  "web-player.settings.quality.streaming-quality.lossless-confirm-dialog.cancel": string;
  "web-player.settings.quality.streaming-quality.lossless-confirm-dialog.confirm": string;
  "web-player.settings.quality.streaming-quality.lossless-confirm-dialog.description": string;
  "web-player.settings.quality.streaming-quality.lossless-confirm-dialog.title": string;
  "web-player.settings.zoom.balanced-label": string;
  "web-player.settings.zoom.compact-label": string;
  "web-player.settings.zoom.description": string;
  "web-player.settings.zoom.larger-label": string;
  "web-player.settings.zoom.reset-button-label": string;
  "web-player.settings.zoom.shortcut-description": string;
  "web-player.settings.zoom.title": string;
  "web-player.settings.zoom.zoom-level-radio-button-label": string;
  "web-player.show.rating.header": string;
  "web-player.show.rating.listenFirstDescription": string;
  "web-player.show.rating.listenFirstTitle": string;
  "web-player.show.rating.rateShow": string;
  "web-player.show.rating.snackbarFailure": string;
  "web-player.show.rating.snackbarSuccess": string;
  "web-player.show.rating.starAriaLabel": PlatformTypesTranslationsWebplayerShowRatingStarAriaLabel;
  "web-player.show.rating.submit": string;
  "web-player.sleep-timer.npv.submenu.label": string;
  "web-player.sleep-timer.option.end.episode": string;
  "web-player.sleep-timer.option.end.track": string;
  "web-player.sleep-timer.option.hours": PlatformTypesTranslationsWebplayerSleeptimerOptionHours;
  "web-player.sleep-timer.option.minutes": PlatformTypesTranslationsWebplayerSleeptimerOptionMinutes;
  "web-player.sleep-timer.option.off": string;
  "web-player.sleep-timer.player-controls.button.tooltip": string;
  "web-player.sleep-timer.player-controls.popover.title": string;
  "web-player.sleep-timer.player-controls.popover.title.timeleft": string;
  "web-player.sleep-timer.snackbar.timer-set": string;
  "web-player.smart-shuffle.add-to-playlist-button": string;
  "web-player.smart-shuffle.add-to-playlist-button-fallback": string;
  "web-player.smart-shuffle.add-to-playlist-feedback": string;
  "web-player.smart-shuffle.add-to-playlist-feedback-fallback": string;
  "web-player.smart-shuffle.button-disable-shuffle-generic": string;
  "web-player.smart-shuffle.button-disable-shuffle-specific": string;
  "web-player.smart-shuffle.button-enable-shuffle-generic": string;
  "web-player.smart-shuffle.button-enable-shuffle-specific": string;
  "web-player.smart-shuffle.button-enable-smart-shuffle-generic": string;
  "web-player.smart-shuffle.button-enable-smart-shuffle-specific": string;
  "web-player.smart-shuffle.disabled-smart-shuffle": string;
  "web-player.smart-shuffle.dsa-message": string;
  "web-player.smart-shuffle.enabled-smart-shuffle": string;
  "web-player.smart-shuffle.enabled-smart-shuffle-not-active-playlist": string;
  "web-player.smart-shuffle.icon-hover-label": string;
  "web-player.smart-shuffle.introduction-modal-description": string;
  "web-player.smart-shuffle.introduction-modal-ok-button": string;
  "web-player.smart-shuffle.introduction-modal-title": string;
  "web-player.smart-shuffle.menu-button": string;
  "web-player.smart-shuffle.menu-text": string;
  "web-player.smart-shuffle.offline-add-recommendation-feedback": string;
  "web-player.smart-shuffle.offline-remove-recommendation-feedback": string;
  "web-player.smart-shuffle.removed-from-recommendations-button": string;
  "web-player.smart-shuffle.removed-from-recommendations-feedback": string;
  "web-player.smart-shuffle.removed-from-recommendations-feedback-undo": string;
  "web-player.smart-shuffle.removed-from-recommendations-feedback-undone": string;
  "web-player.smart-shuffle.shuffle": string;
  "web-player.smart-shuffle.smart-shuffle": string;
  "web-player.social-connect.broadcasting.bradcasting-device-subtitle": string;
  "web-player.social-connect.broadcasting.join-listening-session-modal.button-tertiary": string;
  "web-player.social-connect.broadcasting.join-listening-session-modal.subtitle": string;
  "web-player.social-connect.broadcasting.toggle-label": string;
  "web-player.social-connect.controls.participant-volume-control": string;
  "web-player.social-connect.controls.queue-only-mode": string;
  "web-player.social-connect.end-session.cancel": string;
  "web-player.social-connect.end-session.confirm": string;
  "web-player.social-connect.end-session.end-session-button": string;
  "web-player.social-connect.end-session.sub-title": string;
  "web-player.social-connect.end-session.title": string;
  "web-player.social-connect.facepile.and-others": PlatformTypesTranslationsWebplayerSocialconnectFacepileAndothers;
  "web-player.social-connect.generic-error.confirmation-button": string;
  "web-player.social-connect.generic-error.sub-title": string;
  "web-player.social-connect.generic-error.title": string;
  "web-player.social-connect.group-session-logo-alt": string;
  "web-player.social-connect.invitation-modal.button-primary": string;
  "web-player.social-connect.invitation-modal.button-tertiary": string;
  "web-player.social-connect.invitation-modal.subtitle": string;
  "web-player.social-connect.invitation-modal.success-toast-message": string;
  "web-player.social-connect.invitation-modal.title": string;
  "web-player.social-connect.invitation.qr-code.description": string;
  "web-player.social-connect.invitation.qr-code.title": string;
  "web-player.social-connect.invite-button": string;
  "web-player.social-connect.join-modal.button-primary": string;
  "web-player.social-connect.join-modal.button-tertiary": string;
  "web-player.social-connect.join-modal.continue-on-this-device": string;
  "web-player.social-connect.join-modal.continue-on-this-device-subtitle": string;
  "web-player.social-connect.join-modal.device-name.this-browser": string;
  "web-player.social-connect.join-modal.device-name.this-computer": string;
  "web-player.social-connect.join-modal.play-from-host-speaker": string;
  "web-player.social-connect.join-modal.play-from-host-speaker-subtitle": string;
  "web-player.social-connect.join-modal.privacy-notice": string;
  "web-player.social-connect.join-modal.success.subtitle": string;
  "web-player.social-connect.join-modal.success.title": string;
  "web-player.social-connect.join-modal.title": string;
  "web-player.social-connect.kick-users.remove-the-user": string;
  "web-player.social-connect.leave-session.cancel": string;
  "web-player.social-connect.leave-session.leave-session-button": string;
  "web-player.social-connect.leave-session.sub-title": string;
  "web-player.social-connect.leave-session.title": string;
  "web-player.social-connect.menu-action.title": string;
  "web-player.social-connect.participant-list.back-to-queue": string;
  "web-player.social-connect.participant-list.guest": string;
  "web-player.social-connect.participant-list.host": string;
  "web-player.social-connect.participant-list.remove-all-guests": string;
  "web-player.social-connect.participant-list.remove-guest": string;
  "web-player.social-connect.participant-list.remove-guest-accessible-label": string;
  "web-player.social-connect.participant-list.remove-guest-cancel": string;
  "web-player.social-connect.participant-list.remove-guest-dialog": string;
  "web-player.social-connect.participant-list.subtitle": string;
  "web-player.social-connect.participant-list.title": string;
  "web-player.social-connect.participant-list.visibility-info": string;
  "web-player.social-connect.premium-upsell.confirmation-button": string;
  "web-player.social-connect.promotion.how-to-start-a-jam-reminder": string;
  "web-player.social-connect.redirect-modal.cancel-button": string;
  "web-player.social-connect.redirect-modal.confirmation-button": string;
  "web-player.social-connect.redirect-modal.sub-title": string;
  "web-player.social-connect.redirect-modal.title": string;
  "web-player.social-connect.session-ended.confirmation-button": string;
  "web-player.social-connect.session-ended.sub-title": string;
  "web-player.social-connect.session-ended.title": string;
  "web-player.social-connect.session-info.title": string;
  "web-player.social-connect.share.title": string;
  "web-player.social-connect.toast.ended": string;
  "web-player.social-connect.toast.multiple-people-joined": string;
  "web-player.social-connect.toast.multiple-people-left": string;
  "web-player.social-connect.toast.one-person-joined": string;
  "web-player.social-connect.toast.one-person-left": string;
  "web-player.social-connect.toast.participant-volume-control.enabled": string;
  "web-player.social-connect.toast.participant-volume-control.guest.disabled": string;
  "web-player.social-connect.toast.participant-volume-control.host.disabled": string;
  "web-player.social-connect.toast.queue-only-mode.guest.disabled": string;
  "web-player.social-connect.toast.queue-only-mode.guest.enabled": string;
  "web-player.social-connect.toast.queue-only-mode.guest.warning": string;
  "web-player.social-connect.toast.queue-only-mode.host.disabled": string;
  "web-player.social-connect.toast.queue-only-mode.host.enabled": string;
  "web-player.social-connect.toast.two-people-joined": string;
  "web-player.social-connect.toast.two-people-left": string;
  "web-player.user-comments.collapsed-reply.count": PlatformTypesTranslationsWebplayerUsercommentsCollapsedreplyCount;
  "web-player.user-comments.comment": string;
  "web-player.user-comments.comment-input.first-comment": string;
  "web-player.user-comments.comment-input.leave-comment": string;
  "web-player.user-comments.comment-input.platform-rules": string;
  "web-player.user-comments.comment-list-header.count": string;
  "web-player.user-comments.commenting-restrictions.already-commented": string;
  "web-player.user-comments.commenting-restrictions.disabled": string;
  "web-player.user-comments.commenting-restrictions.new-user-account": string;
  "web-player.user-comments.comments": string;
  "web-player.user-comments.creator-reaction-liked-comment": string;
  "web-player.user-comments.delete-comment-dialog.subtitle": string;
  "web-player.user-comments.delete-comment-dialog.success": string;
  "web-player.user-comments.delete-comment-dialog.title": string;
  "web-player.user-comments.in-review": string;
  "web-player.user-comments.just-now": string;
  "web-player.user-comments.see-more": string;
  "web-player.user-comments.sensitive.disclaimer": string;
  "web-player.user-comments.sensitive.show-all": string;
  "web-player.user-comments.sensitive.showing-all": string;
  "web-player.user-comments.top-comment-card-header.count": string;
  "web-player.user-comments.trust-safety-modal.agree-to-continue": string;
  "web-player.user-comments.trust-safety-modal.row-1.subtitle": string;
  "web-player.user-comments.trust-safety-modal.row-1.title": string;
  "web-player.user-comments.trust-safety-modal.row-2.subtitle": string;
  "web-player.user-comments.trust-safety-modal.row-2.title": string;
  "web-player.user-comments.trust-safety-modal.row-3.subtitle": string;
  "web-player.user-comments.trust-safety-modal.row-3.title": string;
  "web-player.user-comments.trust-safety-modal.submit": string;
  "web-player.user-comments.trust-safety-modal.subtitle": string;
  "web-player.user-comments.trust-safety-modal.terms-conditions": string;
  "web-player.user-comments.trust-safety-modal.terms-conditions.platform-rules": string;
  "web-player.user-comments.trust-safety-modal.terms-conditions.terms-of-use": string;
  "web-player.user-comments.trust-safety-modal.title": string;
  "web-player.user-page.following.filter-all": string;
  "web-player.user-page.following.filter-artists": string;
  "web-player.user-page.following.filter-friends": string;
  "web-player.venues.concerts": string;
  "web-player.venues.error.generic.title": string;
  "web-player.venues.error.not_found.message": string;
  "web-player.venues.error.not_found.title": string;
  "web-player.venues.followers": PlatformTypesTranslationsWebplayerVenuesFollowers;
  "web-player.venues.venue": string;
  "web-player.watch-feed.entity-button.aria-label": string;
  "web-player.watch-feed.entity-button.label-album": string;
  "web-player.watch-feed.entity-button.label-artist": string;
  "web-player.watch-feed.entity-button.label-playlist": string;
  "web-player.watch-feed.entity-button.label-podcast": string;
  "web-player.watch-feed.view.next-button": string;
  "web-player.watch-feed.view.previous-button": string;
  "web-player.watch-feed.view.shortcuts.add-to-library": string;
  "web-player.watch-feed.view.shortcuts.add-to-queue": string;
  "web-player.watch-feed.view.shortcuts.description": string;
  "web-player.watch-feed.view.shortcuts.mute-unmute": string;
  "web-player.watch-feed.view.shortcuts.next": string;
  "web-player.watch-feed.view.shortcuts.previous": string;
  "web-player.watch-feed.view.shortcuts.title": string;
  "web-player.whats-new-feed.button-label": string;
  "web-player.whats-new-feed.earlier-section-title": string;
  "web-player.whats-new-feed.filters.episodes": string;
  "web-player.whats-new-feed.filters.music": string;
  "web-player.whats-new-feed.filters.notifications": string;
  "web-player.whats-new-feed.filters.options": string;
  "web-player.whats-new-feed.new-section-title": string;
  "web-player.whats-new-feed.panel.empty-results-all.message": string;
  "web-player.whats-new-feed.panel.empty-results-all.title": string;
  "web-player.whats-new-feed.panel.empty-results-music.message": string;
  "web-player.whats-new-feed.panel.empty-results-music.title": string;
  "web-player.whats-new-feed.panel.empty-results-podcast.message": string;
  "web-player.whats-new-feed.panel.empty-results-podcast.title": string;
  "web-player.whats-new-feed.panel.error": string;
  "web-player.whats-new-feed.panel.error.button": string;
  "web-player.whats-new-feed.panel.subtitle": string;
  "web-player.whats-new-feed.panel.title": string;
  "web-player.your-dj.jumpbutton.tooltip.desc": string;
  "web-player.your-dj.jumpbutton.tooltip.hover": string;
  "web-player.your-dj.jumpbutton.tooltip.title": string;
  "web-player.your-dj.npv.queue.description": string;
  "web-player.your-dj.npv.queue.title": string;
  "web-player.your-dj.upsell.notavailable.description": string;
  "web-player.your-dj.upsell.notavailable.gotolink": string;
  "web-player.your-dj.upsell.notavailable.notnow": string;
  "web-player.your-dj.upsell.notavailable.title": string;
  "web-player.your-dj.upsell.notavailableonweb.ack": string;
  "web-player.your-dj.upsell.notavailableonweb.description": string;
  "web-player.your-dj.upsell.notavailableonweb.title": string;
  "web-player.your-dj.upsell.premium.description": string;
  "web-player.your-dj.upsell.premium.no": string;
  "web-player.your-dj.upsell.premium.title": string;
  "web-player.your-dj.upsell.premium.yes": string;
  "web-player.your-library-x.clear_filters": string;
  "web-player.your-library-x.collapse-folder": string;
  "web-player.your-library-x.collapse-your-library": string;
  "web-player.your-library-x.create.button-label": string;
  "web-player.your-library-x.create.create-a-new-playlist": string;
  "web-player.your-library-x.create.create-a-playlist-folder": string;
  "web-player.your-library-x.default_folder_name": string;
  "web-player.your-library-x.download-progress-count-out-of-total": string;
  "web-player.your-library-x.download-progress-title": string;
  "web-player.your-library-x.dsa-message": string;
  "web-player.your-library-x.dsa-message-link": string;
  "web-player.your-library-x.empty-results-text-short": string;
  "web-player.your-library-x.empty-results-title-short": string;
  "web-player.your-library-x.empty-state-folder-subtitle": string;
  "web-player.your-library-x.empty-state-folder-title": string;
  "web-player.your-library-x.empty-state-playlists-cta": string;
  "web-player.your-library-x.empty-state-playlists-subtitle": string;
  "web-player.your-library-x.empty-state-playlists-title": string;
  "web-player.your-library-x.empty-state-podcasts-browse": string;
  "web-player.your-library-x.empty-state-podcasts-keep-you-updated": string;
  "web-player.your-library-x.empty-state-podcasts-to-follow": string;
  "web-player.your-library-x.enlarge-your-library": string;
  "web-player.your-library-x.error-body": string;
  "web-player.your-library-x.error-button": string;
  "web-player.your-library-x.error-title": string;
  "web-player.your-library-x.event-item.subtitle": string;
  "web-player.your-library-x.expand-folder": string;
  "web-player.your-library-x.expand-your-library-fullscreen": string;
  "web-player.your-library-x.expanded-list-header.date-added": string;
  "web-player.your-library-x.expanded-list-header.played-at": string;
  "web-player.your-library-x.expanded-list-header.title": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-cancel-button": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-confirm-button": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description-album": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description-artist": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description-audiobook": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description-author": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description-playlist": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-description-show": string;
  "web-player.your-library-x.feedback-remove-from-library-dialog-title": string;
  "web-player.your-library-x.filter_options": string;
  "web-player.your-library-x.minimize-your-library-fullscreen": string;
  "web-player.your-library-x.navigate-back-folder": string;
  "web-player.your-library-x.open-your-library": string;
  "web-player.your-library-x.pin-error.message": string;
  "web-player.your-library-x.pin-error.no-pin-in-folder.message": string;
  "web-player.your-library-x.pin-error.no-pin-in-folder.title": string;
  "web-player.your-library-x.pin-error.ok": string;
  "web-player.your-library-x.pin-error.title": string;
  "web-player.your-library-x.pinned": string;
  "web-player.your-library-x.playlist-unavailable": string;
  "web-player.your-library-x.reduce-your-library": string;
  "web-player.your-library-x.rename-folder": string;
  "web-player.your-library-x.rows.folder.number-of-folders": PlatformTypesTranslationsWebplayerYourlibraryxRowsFolderNumberoffolders;
  "web-player.your-library-x.rows.folder.number-of-playlists": PlatformTypesTranslationsWebplayerYourlibraryxRowsFolderNumberofplaylists;
  "web-player.your-library-x.rows.liked-songs.subtitle": PlatformTypesTranslationsWebplayerYourlibraryxRowsLikedsongsSubtitle;
  "web-player.your-library-x.rows.local-files.subtitle": PlatformTypesTranslationsWebplayerYourlibraryxRowsLocalfilesSubtitle;
  "web-player.your-library-x.show-less": string;
  "web-player.your-library-x.show-more": string;
  "web-player.your-library-x.sort-and-view-picker.button-aria-label": string;
  "web-player.your-library-x.sort-and-view-picker.compact": string;
  "web-player.your-library-x.sort-and-view-picker.compact-grid": string;
  "web-player.your-library-x.sort-and-view-picker.compact-list": string;
  "web-player.your-library-x.sort-and-view-picker.default": string;
  "web-player.your-library-x.sort-and-view-picker.default-grid": string;
  "web-player.your-library-x.sort-and-view-picker.default-list": string;
  "web-player.your-library-x.sort-and-view-picker.list": string;
  "web-player.your-library-x.sort-and-view-picker.view-as": string;
  "web-player.your-library-x.sort_by": string;
  "web-player.your-library-x.subtitle-your-episodes": string;
  "web-player.your-library-x.text-filter.additional-aria-label": string;
  "web-player.your-library-x.text-filter.albums-placeholder": string;
  "web-player.your-library-x.text-filter.artists-placeholder": string;
  "web-player.your-library-x.text-filter.audiobooks-placeholder": string;
  "web-player.your-library-x.text-filter.authors-placeholder": string;
  "web-player.your-library-x.text-filter.downloaded-placeholder": string;
  "web-player.your-library-x.text-filter.events-placeholder": string;
  "web-player.your-library-x.text-filter.generic-placeholder": string;
  "web-player.your-library-x.text-filter.playlists-placeholder": string;
  "web-player.your-library-x.text-filter.shows-placeholder": string;
  "web-player.your-library-x.type-album": string;
  "web-player.your-library-x.type-artist": string;
  "web-player.your-library-x.type-audiobook": string;
  "web-player.your-library-x.type-author": string;
  "web-player.your-library-x.type-folder": string;
  "web-player.your-library-x.type-playlist": string;
  "web-player.your-library-x.type-prerelease-album": string;
  "web-player.your-library-x.type-prerelease-audiobook": string;
  "web-player.your-library-x.type-show": string;
  "web-player.your-library-x.unpin-confirmation-dialog.cancel-button-text": string;
  "web-player.your-library-x.unpin-confirmation-dialog.confirm-button-label-folder": string;
  "web-player.your-library-x.unpin-confirmation-dialog.confirm-button-label-playlist": string;
  "web-player.your-library-x.unpin-confirmation-dialog.confirm-button-text": string;
  "web-player.your-library-x.unpin-confirmation-dialog.message-folder": string;
  "web-player.your-library-x.unpin-confirmation-dialog.message-playlist": string;
  "web-player.your-library-x.unpin-confirmation-dialog.title-folder": string;
  "web-player.your-library-x.unpin-confirmation-dialog.title-playlist": string;
  "web-player.your-library-x.your-library": string;
  "web-player.your-sound-capsule-modal.dismiss": string;
  "web-player.your-sound-capsule-modal.get-premium": string;
  "web-player.your-sound-capsule-modal.not-available-text": string;
  "web-player.your-sound-capsule-modal.not-available-title": string;
  "web-player.your-sound-capsule-modal.open-app-text": string;
  "web-player.your-sound-capsule-modal.open-app-title": string;
  "web-player.your-sound-capsule-modal.premium-text": string;
  "web-player.your-sound-capsule-modal.premium-title": string;
  "ylx.clicktoplay": string;
  album: string;
  already_have_account: string;
  artist: string;
  browse: string;
  browser_upgrade_notice: string;
  choose_photo: string;
  close: string;
  close_button_action: string;
  compilation: string;
  concert_buy_tickets: string;
  concert_event_ended: string;
  concert_find_tickets: string;
  concert_past_message: string;
  concerts: string;
  concerts_browse_more: string;
  concerts_interested_tooltip: string;
  concerts_on_tour: string;
  concerts_popular: string;
  concerts_recommended_for_you: string;
  concerts_see_all_events: string;
  cookies: string;
  edit_photo: string;
  ep: string;
  filter: string;
  follow: string;
  followers: string;
  following: string;
  login: string;
  monthly_listeners: string;
  more: string;
  music_downloads: string;
  music_videos: string;
  new_releases: string;
  only_visible_to_you: string;
  paid: string;
  pause: string;
  play: string;
  playing: string;
  playlist: string;
  preview: string;
  private_playlist: string;
  public_playlist: string;
  public_playlists: string;
  recently_played_artists: string;
  remove: string;
  remove_from_your_library: string;
  remove_from_your_liked_songs: string;
  save: string;
  save_to_your_library: string;
  save_to_your_liked_songs: string;
  saves: PlatformTypesTranslationsSaves;
  show_less: string;
  show_more: string;
  sign_up: string;
  single: string;
  song: string;
  top_artists_this_month: string;
  top_tracks_this_month: string;
  unfollow: string;
}

export interface PlatformTypesTranslationsAlbumpageMorereleases {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsArtistMonthlylistenerscount {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsArtistpageHowmanylisteners {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsArtistpageSavedtracksamount {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsChartNewentries {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsConcertsCount {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsPermissionsSongsadded {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsPremiumDialogDescription {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsQueueConfirmtitle {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsSaves {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsSharedReloadBannerTextdays {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsSharedReloadBannerTexthours {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTimeDaysShort {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTimeHoursShort {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTimeMinutesShort {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTimeSecondsShort {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTimeWeeksShort {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTracklistDragMultipleLabel {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTracklistheaderAudiobookscounter {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTracklistheaderEpisodescounter {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTracklistheaderItemscounter {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsTracklistheaderSongscounter {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsUserFollowers {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsUserFollowing {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsUserPublicplaylists {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerAlbumAnniversary {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerAudiobooksRatingRatingButtonRatings {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerAudiobooksRatingRatingButtonStars {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerAudiobooksRatingStarAriaLabel {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerPrereleaseDays {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerPrereleaseHours {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerPrereleaseMinutes {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerPrereleaseSeconds {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerShowRatingStarAriaLabel {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerSleeptimerOptionHours {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerSleeptimerOptionMinutes {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerSocialconnectFacepileAndothers {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerUsercommentsCollapsedreplyCount {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerVenuesFollowers {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerYourlibraryxRowsFolderNumberoffolders {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerYourlibraryxRowsFolderNumberofplaylists {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerYourlibraryxRowsLikedsongsSubtitle {
  one: string;
  other: string;
}

export interface PlatformTypesTranslationsWebplayerYourlibraryxRowsLocalfilesSubtitle {
  one: string;
  other: string;
}

export interface PlatformTypesUBILogger {
  _events: PlatformTypesUBILoggerEvents;
  formatUiNavigateEvent: PlatformTypesUBILoggerFormatUiNavigateEvent;
  getEvents: PlatformTypesUBILoggerGetEvents;
  getInteractionId: PlatformTypesUBILoggerGetInteractionId;
  logClientStarted: PlatformTypesUBILoggerLogClientStarted;
  logImpression: PlatformTypesUBILoggerLogImpression;
  logInteraction: PlatformTypesUBILoggerLogInteraction;
  logNavigation: PlatformTypesUBILoggerLogNavigation;
  ubiLogger: PlatformTypesUBILoggerUbiLogger;
}

export interface PlatformTypesUBILoggerEvents {
  _emitter: PlatformTypesUBILoggerEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesUBILoggerEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesUBILoggerEventsEmitterListeners;
  _metaListeners: PlatformTypesUBILoggerEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export type PlatformTypesUBILoggerEventsEmitterListeners = Record<string, unknown>;

export interface PlatformTypesUBILoggerEventsEmitterMetaListeners {
  add: PlatformTypesUBILoggerEventsEmitterMetaListenersAdd;
  remove: PlatformTypesUBILoggerEventsEmitterMetaListenersRemove;
}

export type PlatformTypesUBILoggerEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesUBILoggerEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesUBILoggerFormatUiNavigateEvent = (arg0: any) => unknown;

export type PlatformTypesUBILoggerGetEvents = () => unknown;

export type PlatformTypesUBILoggerGetInteractionId = (arg0: any) => unknown;

export type PlatformTypesUBILoggerLogClientStarted = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUBILoggerLogImpression = (arg0: any) => unknown;

export type PlatformTypesUBILoggerLogInteraction = (arg0: any) => unknown;

export type PlatformTypesUBILoggerLogNavigation = (arg0: any) => unknown;

export interface PlatformTypesUBILoggerUbiLogger {
  authenticationProvider: PlatformTypesUBILoggerUbiLoggerAuthenticationProvider;
  contextualProviders: PlatformTypesUBILoggerUbiLoggerContextualProviders;
  disableAutoBackgroundMonitoring: boolean;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  getPageInstanceId: PlatformTypesUBILoggerUbiLoggerGetPageInstanceId;
  logClientGainedFocus: PlatformTypesUBILoggerUbiLoggerLogClientGainedFocus;
  logClientLostFocus: PlatformTypesUBILoggerUbiLoggerLogClientLostFocus;
  logClientStarted: PlatformTypesUBILoggerUbiLoggerLogClientStarted;
  logImpression: PlatformTypesUBILoggerUbiLoggerLogImpression;
  logInteraction: PlatformTypesUBILoggerUbiLoggerLogInteraction;
  logNavigation: PlatformTypesUBILoggerUbiLoggerLogNavigation;
  logNavigationEnd: PlatformTypesUBILoggerUbiLoggerLogNavigationEnd;
  logNavigationStart: PlatformTypesUBILoggerUbiLoggerLogNavigationStart;
  pageInfoProvider: PlatformTypesUBILoggerUbiLoggerPageInfoProvider;
  pageViewLogger: PlatformTypesUBILoggerUbiLoggerPageViewLogger;
  registerEventListeners: PlatformTypesUBILoggerUbiLoggerRegisterEventListeners;
  storageManager: PlatformTypesUBILoggerUbiLoggerStorageManager;
  unregisterEventListeners: PlatformTypesUBILoggerUbiLoggerUnregisterEventListeners;
}

export interface PlatformTypesUBILoggerUbiLoggerAuthenticationProvider {
  isAuthenticated: PlatformTypesUBILoggerUbiLoggerAuthenticationProviderIsAuthenticated;
}

export type PlatformTypesUBILoggerUbiLoggerAuthenticationProviderIsAuthenticated = () => unknown;

export interface PlatformTypesUBILoggerUbiLoggerContextualProviders {
  playContextUriProvider: PlatformTypesUBILoggerUbiLoggerContextualProvidersPlayContextUriProvider;
  playbackIdProvider: PlatformTypesUBILoggerUbiLoggerContextualProvidersPlaybackIdProvider;
}

export interface PlatformTypesUBILoggerUbiLoggerContextualProvidersPlaybackIdProvider {
  getPlaybackId: PlatformTypesUBILoggerUbiLoggerContextualProvidersPlaybackIdProviderGetPlaybackId;
}

export type PlatformTypesUBILoggerUbiLoggerContextualProvidersPlaybackIdProviderGetPlaybackId =
  () => unknown;

export interface PlatformTypesUBILoggerUbiLoggerContextualProvidersPlayContextUriProvider {
  getPlayContextUri: PlatformTypesUBILoggerUbiLoggerContextualProvidersPlayContextUriProviderGetPlayContextUri;
}

export type PlatformTypesUBILoggerUbiLoggerContextualProvidersPlayContextUriProviderGetPlayContextUri =
  () => unknown;

export type PlatformTypesUBILoggerUbiLoggerGetPageInstanceId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogClientGainedFocus = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogClientLostFocus = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogClientStarted = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogImpression = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogInteraction = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogNavigation = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogNavigationEnd = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerLogNavigationStart = (arg0: any) => unknown;

export interface PlatformTypesUBILoggerUbiLoggerPageInfoProvider {
  getNavigationalRoot: PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetNavigationalRoot;
  getPageId: PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageId;
  getPageInfo: PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageInfo;
  getPageInstanceId: PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageInstanceId;
  getPageUri: PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageUri;
  setPageInfo: PlatformTypesUBILoggerUbiLoggerPageInfoProviderSetPageInfo;
  storageManager: PlatformTypesUBILoggerUbiLoggerStorageManager;
}

export type PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetNavigationalRoot = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageInfo = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageInstanceId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageInfoProviderGetPageUri = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageInfoProviderSetPageInfo = (arg0: any) => unknown;

export interface PlatformTypesUBILoggerUbiLoggerPageViewLogger {
  addEventListeners: PlatformTypesUBILoggerUbiLoggerPageViewLoggerAddEventListeners;
  authenticationProvider: PlatformTypesUBILoggerUbiLoggerAuthenticationProvider;
  completeNavigation: PlatformTypesUBILoggerUbiLoggerPageViewLoggerCompleteNavigation;
  currentWindowState: PlatformTypesUBILoggerUbiLoggerPageViewLoggerCurrentWindowState;
  disableAutoBackgroundMonitoring: boolean;
  eventSender: PlatformTypesRegistryMapValueInstance8;
  flowIdProvider: undefined;
  generatePageInstanceId: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGeneratePageInstanceId;
  getCurrentEntityUri: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentEntityUri;
  getCurrentNavigationalRoot: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentNavigationalRoot;
  getCurrentPageId: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentPageId;
  getCurrentPageInstanceId: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentPageInstanceId;
  getNavigationStatus: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetNavigationStatus;
  getPendingInteractionId: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetPendingInteractionId;
  getPendingNavigationReason: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetPendingNavigationReason;
  getPendingNavigationalRoot: PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetPendingNavigationalRoot;
  handleFocusChange: PlatformTypesUBILoggerUbiLoggerPageViewLoggerHandleFocusChange;
  handleFocusStateChange: PlatformTypesUBILoggerUbiLoggerPageViewLoggerHandleFocusStateChange;
  handleVisibilityChange: PlatformTypesUBILoggerUbiLoggerPageViewLoggerHandleVisibilityChange;
  isForeground: PlatformTypesUBILoggerUbiLoggerPageViewLoggerIsForeground;
  logClientGainedFocus: PlatformTypesUBILoggerUbiLoggerPageViewLoggerLogClientGainedFocus;
  logClientLostFocus: PlatformTypesUBILoggerUbiLoggerPageViewLoggerLogClientLostFocus;
  logClientStarted: PlatformTypesUBILoggerUbiLoggerPageViewLoggerLogClientStarted;
  onBlur: PlatformTypesUBILoggerUbiLoggerPageViewLoggerOnBlur;
  onFocus: PlatformTypesUBILoggerUbiLoggerPageViewLoggerOnFocus;
  onVisibilityChange: PlatformTypesUBILoggerUbiLoggerPageViewLoggerOnVisibilityChange;
  pageInfoProvider: PlatformTypesUBILoggerUbiLoggerPageInfoProvider;
  populateNavigationReason: PlatformTypesUBILoggerUbiLoggerPageViewLoggerPopulateNavigationReason;
  removeEventListeners: PlatformTypesUBILoggerUbiLoggerPageViewLoggerRemoveEventListeners;
  resetNavStartInfo: PlatformTypesUBILoggerUbiLoggerPageViewLoggerResetNavStartInfo;
  setCurrent: PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetCurrent;
  setNavigationStatus: PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetNavigationStatus;
  setPendingInteractionId: PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetPendingInteractionId;
  setPendingNavigationReason: PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetPendingNavigationReason;
  setPendingNavigationalRoot: PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetPendingNavigationalRoot;
  startNavigation: PlatformTypesUBILoggerUbiLoggerPageViewLoggerStartNavigation;
  storageManager: PlatformTypesUBILoggerUbiLoggerStorageManager;
}

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerAddEventListeners = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerCompleteNavigation = (
  arg0: any,
) => unknown;

export interface PlatformTypesUBILoggerUbiLoggerPageViewLoggerCurrentWindowState {
  focused: boolean;
  visible: boolean;
}

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGeneratePageInstanceId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentEntityUri = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentNavigationalRoot = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentPageId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetCurrentPageInstanceId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetNavigationStatus = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetPendingInteractionId = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetPendingNavigationalRoot = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerGetPendingNavigationReason = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerHandleFocusChange = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerHandleFocusStateChange = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerHandleVisibilityChange = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerIsForeground = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerLogClientGainedFocus = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerLogClientLostFocus = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerLogClientStarted = (
  arg0: any,
  arg1: any,
  arg2: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerOnBlur = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerOnFocus = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerOnVisibilityChange = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerPopulateNavigationReason = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerRemoveEventListeners = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerResetNavStartInfo = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetCurrent = (
  arg0: any,
  arg1: any,
  arg2: any,
  arg3: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetNavigationStatus = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetPendingInteractionId = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetPendingNavigationalRoot = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerSetPendingNavigationReason = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerPageViewLoggerStartNavigation = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerRegisterEventListeners = () => unknown;

export interface PlatformTypesUBILoggerUbiLoggerStorageManager {
  clear: PlatformTypesUBILoggerUbiLoggerStorageManagerClear;
  getItem: PlatformTypesUBILoggerUbiLoggerStorageManagerGetItem;
  getStorageType: PlatformTypesUBILoggerUbiLoggerStorageManagerGetStorageType;
  removeItem: PlatformTypesUBILoggerUbiLoggerStorageManagerRemoveItem;
  setItem: PlatformTypesUBILoggerUbiLoggerStorageManagerSetItem;
  storageAdapter: PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapter;
}

export type PlatformTypesUBILoggerUbiLoggerStorageManagerClear = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerGetItem = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerGetStorageType = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerRemoveItem = (arg0: any) => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerSetItem = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapter {
  clear: PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterClear;
  getItem: PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterGetItem;
  items: Map<unknown, unknown>;
  removeItem: PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterRemoveItem;
  setItem: PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterSetItem;
}

export type PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterClear = () => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterGetItem = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterRemoveItem = (
  arg0: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerStorageManagerStorageAdapterSetItem = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesUBILoggerUbiLoggerUnregisterEventListeners = () => unknown;

export interface PlatformTypesUpdateAPI {
  _updateClient: PlatformTypesUpdateAPIUpdateClient;
  _versionClient: PlatformTypesUpdateAPIVersionClient;
  applyUpdate: PlatformTypesUpdateAPIApplyUpdate;
  getVersionInfo: PlatformTypesUpdateAPIGetVersionInfo;
  prepareUpdate: PlatformTypesUpdateAPIPrepareUpdate;
  subscribe: PlatformTypesUpdateAPISubscribe;
}

export type PlatformTypesUpdateAPIApplyUpdate = () => unknown;

export type PlatformTypesUpdateAPIGetVersionInfo = () => unknown;

export type PlatformTypesUpdateAPIPrepareUpdate = () => unknown;

export type PlatformTypesUpdateAPISubscribe = (arg0: any) => unknown;

export interface PlatformTypesUpdateAPIUpdateClient {
  applyUpdate: PlatformTypesUpdateAPIUpdateClientApplyUpdate;
  options: PlatformTypesUpdateAPIUpdateClientOptions;
  subscribeStatus: PlatformTypesUpdateAPIUpdateClientSubscribeStatus;
  transport: PlatformTypesRegistryMapValueInstance2;
  triggerDownload: PlatformTypesUpdateAPIUpdateClientTriggerDownload;
}

export type PlatformTypesUpdateAPIUpdateClientApplyUpdate = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUpdateAPIUpdateClientOptions = Record<string, unknown>;

export type PlatformTypesUpdateAPIUpdateClientSubscribeStatus = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUpdateAPIUpdateClientTriggerDownload = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesUpdateAPIVersionClient {
  getVersionInfo: PlatformTypesUpdateAPIVersionClientGetVersionInfo;
  options: PlatformTypesUpdateAPIVersionClientOptions;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesUpdateAPIVersionClientGetVersionInfo = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUpdateAPIVersionClientOptions = Record<string, unknown>;

export interface PlatformTypesUrlDispenserServiceClient {
  _builder: PlatformTypesAdManagersHptoHptoApiNativeHptoApiSpotifyTransport;
  getShortUrl: PlatformTypesUrlDispenserServiceClientGetShortUrl;
}

export type PlatformTypesUrlDispenserServiceClientGetShortUrl = (arg0: any, arg1: any) => unknown;

export interface PlatformTypesUserCommentsAPI {
  _loader: PlatformTypesGraphQLLoader;
  addComment: PlatformTypesUserCommentsAPIAddComment;
  deleteComment: PlatformTypesUserCommentsAPIDeleteComment;
  getComments: PlatformTypesUserCommentsAPIGetComments;
  getTopComments: PlatformTypesUserCommentsAPIGetTopComments;
}

export type PlatformTypesUserCommentsAPIAddComment = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUserCommentsAPIDeleteComment = (arg0: any) => unknown;

export type PlatformTypesUserCommentsAPIGetComments = (arg0: any, arg1: any) => unknown;

export type PlatformTypesUserCommentsAPIGetTopComments = (arg0: any) => unknown;

export interface PlatformTypesVideoAPI {
  _cosmos: PlatformTypesRegistryMapValueInstance;
  _esperantoTransport: PlatformTypesRegistryMapValueInstance2;
  _eventSender: PlatformTypesRegistryMapValueInstance8;
  _events: PlatformTypesVideoAPIEvents;
  _factories: Array<PlatformTypesAdManagersVtoFactoriesItem>;
  _failPlaybackOnStreamingReportingError: boolean;
  _hasMinimizeBitrateSupport: boolean;
  _hasPipSupport: boolean;
  _hasSubtitleSupport: boolean;
  _offlineCoordinator: null;
  _pendingEventsService: PlatformTypesVideoAPIPendingEventsService;
  _pictureInPictureState: boolean;
  _playbackService: PlatformTypesVideoAPIPlaybackService;
  _prefsClient: PlatformTypesVideoAPIPrefsClient;
  _productStateService: PlatformTypesVideoAPIProductStateService;
  _remoteConfigDebugAPI: PlatformTypesRemoteConfigDebugAPI;
  _resolver: PlatformTypesRemoteConfigurationWithLocalOverrides;
  _scrobbleService: PlatformTypesVideoAPIScrobbleService;
  _shouldEnableStreamReportingTracker: boolean;
  _showService: PlatformTypesVideoAPIShowService;
  _subtitleLanguages: Array<unknown>;
  _tokenProvider: PlatformTypesRegistryMapValueInstance3;
  _videoCoordinator: null;
  createCoreExtensionVideoCoordinator: PlatformTypesVideoAPICreateCoreExtensionVideoCoordinator;
  createOfflineCoordinator: PlatformTypesVideoAPICreateOfflineCoordinator;
  createPlayerConfiguration: PlatformTypesVideoAPICreatePlayerConfiguration;
  createVideoCoordinator: PlatformTypesVideoAPICreateVideoCoordinator;
  getAccessToken: PlatformTypesVideoAPIGetAccessToken;
  getCapabilities: PlatformTypesVideoAPIGetCapabilities;
  getEvents: PlatformTypesVideoAPIGetEvents;
  getPictureInPictureState: PlatformTypesVideoAPIGetPictureInPictureState;
  getPreferredSubtitleLanguage: PlatformTypesVideoAPIGetPreferredSubtitleLanguage;
  getProductState: PlatformTypesVideoAPIGetProductState;
  getSubtitleLanguages: PlatformTypesVideoAPIGetSubtitleLanguages;
  initialize: PlatformTypesVideoAPIInitialize;
  onManifestLoaded: PlatformTypesVideoAPIOnManifestLoaded;
  onPictureInPictureChanged: PlatformTypesVideoAPIOnPictureInPictureChanged;
  reportVideoMode: PlatformTypesVideoAPIReportVideoMode;
  setFullscreen: PlatformTypesVideoAPISetFullscreen;
  setIsVideoVisible: PlatformTypesVideoAPISetIsVideoVisible;
  setPip: PlatformTypesVideoAPISetPip;
  setPreferredSubtitleLanguage: PlatformTypesVideoAPISetPreferredSubtitleLanguage;
  setSubtitleLanguages: PlatformTypesVideoAPISetSubtitleLanguages;
  setWindow: PlatformTypesVideoAPISetWindow;
  videoModeToSurface: PlatformTypesVideoAPIVideoModeToSurface;
}

export type PlatformTypesVideoAPICreateCoreExtensionVideoCoordinator = () => unknown;

export type PlatformTypesVideoAPICreateOfflineCoordinator = (arg0: any) => unknown;

export type PlatformTypesVideoAPICreatePlayerConfiguration = () => unknown;

export type PlatformTypesVideoAPICreateVideoCoordinator = (arg0: any) => unknown;

export interface PlatformTypesVideoAPIEvents {
  _emitter: PlatformTypesVideoAPIEventsEmitter;
  addListener: PlatformTypesRegistryMapValueInstanceEventsAddListener;
  createEvent: PlatformTypesRegistryMapValueInstanceEventsCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceEventsEmit;
  emitSync: PlatformTypesRegistryMapValueInstanceEventsEmitSync;
  onAddListener: PlatformTypesRegistryMapValueInstanceEventsOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceEventsOnRemoveListener;
  removeListener: PlatformTypesRegistryMapValueInstanceEventsRemoveListener;
}

export interface PlatformTypesVideoAPIEventsEmitter {
  _dispatchFromStore: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerDispatchFromStore;
  _listeners: PlatformTypesVideoAPIEventsEmitterListeners;
  _metaListeners: PlatformTypesVideoAPIEventsEmitterMetaListeners;
  addListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListener;
  addListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerAddListeners;
  createEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerCreateEvent;
  emit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmit;
  emitAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitAndWait;
  emitEvent: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEvent;
  emitEventAndWait: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventAndWait;
  emitEventSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitEventSync;
  emitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerEmitSync;
  on: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOn;
  onAddListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnAddListener;
  onRemoveListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnRemoveListener;
  once: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerOnce;
  proxyEmit: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmit;
  proxyEmitAll: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAll;
  proxyEmitAllSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitAllSync;
  proxyEmitSync: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerProxyEmitSync;
  removeAllListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveAllListeners;
  removeListener: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListener;
  removeListeners: PlatformTypesRegistryMapValueInstanceTransportPluginsDealerDealerRemoveListeners;
}

export interface PlatformTypesVideoAPIEventsEmitterListeners {
  picture_in_picture_changed: Array<PlatformTypesVideoAPIEventsEmitterListenersPictureInPictureChangedItem>;
  subtitle_languages_changed: Array<PlatformTypesVideoAPIEventsEmitterListenersSubtitleLanguagesChangedItem>;
  subtitle_preferred_language_changed: Array<PlatformTypesVideoAPIEventsEmitterListenersSubtitlePreferredLanguageChangedItem>;
}

export interface PlatformTypesVideoAPIEventsEmitterListenersPictureInPictureChangedItem {
  listener: PlatformTypesVideoAPIEventsEmitterListenersPictureInPictureChangedItemListener;
  options: PlatformTypesVideoAPIEventsEmitterListenersPictureInPictureChangedItemOptions;
}

export type PlatformTypesVideoAPIEventsEmitterListenersPictureInPictureChangedItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesVideoAPIEventsEmitterListenersPictureInPictureChangedItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesVideoAPIEventsEmitterListenersSubtitleLanguagesChangedItem {
  listener: PlatformTypesVideoAPIEventsEmitterListenersSubtitleLanguagesChangedItemListener;
  options: PlatformTypesVideoAPIEventsEmitterListenersSubtitleLanguagesChangedItemOptions;
}

export type PlatformTypesVideoAPIEventsEmitterListenersSubtitleLanguagesChangedItemListener = (
  arg0: any,
) => unknown;

export type PlatformTypesVideoAPIEventsEmitterListenersSubtitleLanguagesChangedItemOptions = Record<
  string,
  unknown
>;

export interface PlatformTypesVideoAPIEventsEmitterListenersSubtitlePreferredLanguageChangedItem {
  listener: PlatformTypesVideoAPIEventsEmitterListenersSubtitlePreferredLanguageChangedItemListener;
  options: PlatformTypesVideoAPIEventsEmitterListenersSubtitlePreferredLanguageChangedItemOptions;
}

export type PlatformTypesVideoAPIEventsEmitterListenersSubtitlePreferredLanguageChangedItemListener =
  (arg0: any) => unknown;

export type PlatformTypesVideoAPIEventsEmitterListenersSubtitlePreferredLanguageChangedItemOptions =
  Record<string, unknown>;

export interface PlatformTypesVideoAPIEventsEmitterMetaListeners {
  add: PlatformTypesVideoAPIEventsEmitterMetaListenersAdd;
  remove: PlatformTypesVideoAPIEventsEmitterMetaListenersRemove;
}

export type PlatformTypesVideoAPIEventsEmitterMetaListenersAdd = Record<string, unknown>;

export type PlatformTypesVideoAPIEventsEmitterMetaListenersRemove = Record<string, unknown>;

export type PlatformTypesVideoAPIGetAccessToken = () => unknown;

export type PlatformTypesVideoAPIGetCapabilities = () => unknown;

export type PlatformTypesVideoAPIGetEvents = () => unknown;

export type PlatformTypesVideoAPIGetPictureInPictureState = () => unknown;

export type PlatformTypesVideoAPIGetPreferredSubtitleLanguage = () => unknown;

export type PlatformTypesVideoAPIGetProductState = () => unknown;

export type PlatformTypesVideoAPIGetSubtitleLanguages = () => unknown;

export type PlatformTypesVideoAPIInitialize = () => unknown;

export type PlatformTypesVideoAPIOnManifestLoaded = (arg0: any) => unknown;

export type PlatformTypesVideoAPIOnPictureInPictureChanged = (arg0: any) => unknown;

export interface PlatformTypesVideoAPIPendingEventsService {
  addPendingEvent: PlatformTypesVideoAPIPendingEventsServiceAddPendingEvent;
  commitPendingEvent: PlatformTypesVideoAPIPendingEventsServiceCommitPendingEvent;
  options: PlatformTypesVideoAPIPendingEventsServiceOptions;
  replacePendingEvent: PlatformTypesVideoAPIPendingEventsServiceReplacePendingEvent;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesVideoAPIPendingEventsServiceAddPendingEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesVideoAPIPendingEventsServiceCommitPendingEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export type PlatformTypesVideoAPIPendingEventsServiceOptions = Record<string, unknown>;

export type PlatformTypesVideoAPIPendingEventsServiceReplacePendingEvent = (
  arg0: any,
  arg1: any,
) => unknown;

export interface PlatformTypesVideoAPIPlaybackService {
  duck: PlatformTypesSettingsAPIQualityPlaybackServiceDuck;
  getFiles: PlatformTypesSettingsAPIQualityPlaybackServiceGetFiles;
  getFormats: PlatformTypesSettingsAPIQualityPlaybackServiceGetFormats;
  getPlaybackInfo: PlatformTypesSettingsAPIQualityPlaybackServiceGetPlaybackInfo;
  getRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceGetRawVolume;
  getVolume: PlatformTypesSettingsAPIQualityPlaybackServiceGetVolume;
  lowerVolume: PlatformTypesSettingsAPIQualityPlaybackServiceLowerVolume;
  options: PlatformTypesVideoAPIPlaybackServiceOptions;
  raiseVolume: PlatformTypesSettingsAPIQualityPlaybackServiceRaiseVolume;
  setRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSetRawVolume;
  setVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSetVolume;
  subBufferUnderrun: PlatformTypesSettingsAPIQualityPlaybackServiceSubBufferUnderrun;
  subPlaybackInfo: PlatformTypesSettingsAPIQualityPlaybackServiceSubPlaybackInfo;
  subPosition: PlatformTypesSettingsAPIQualityPlaybackServiceSubPosition;
  subRawVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSubRawVolume;
  subVolume: PlatformTypesSettingsAPIQualityPlaybackServiceSubVolume;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesVideoAPIPlaybackServiceOptions = Record<string, unknown>;

export interface PlatformTypesVideoAPIPrefsClient {
  create: PlatformTypesEqualizerAPIPrefsCreate;
  get: PlatformTypesEqualizerAPIPrefsGet;
  getAll: PlatformTypesEqualizerAPIPrefsGetAll;
  options: PlatformTypesVideoAPIPrefsClientOptions;
  set: PlatformTypesEqualizerAPIPrefsSet;
  sub: PlatformTypesEqualizerAPIPrefsSub;
  subAll: PlatformTypesEqualizerAPIPrefsSubAll;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesVideoAPIPrefsClientOptions = Record<string, unknown>;

export interface PlatformTypesVideoAPIProductStateService {
  delOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiDelOverridesValues;
  getValues: PlatformTypesRegistryMapValueInstanceProductStateApiGetValues;
  options: PlatformTypesVideoAPIProductStateServiceOptions;
  putOverridesValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutOverridesValues;
  putValues: PlatformTypesRegistryMapValueInstanceProductStateApiPutValues;
  putValuesSync: PlatformTypesRegistryMapValueInstanceProductStateApiPutValuesSync;
  subValues: PlatformTypesRegistryMapValueInstanceProductStateApiSubValues;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesVideoAPIProductStateServiceOptions = Record<string, unknown>;

export type PlatformTypesVideoAPIReportVideoMode = (arg0: any) => unknown;

export interface PlatformTypesVideoAPIScrobbleService {
  getIncognitoMode: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleGetIncognitoMode;
  options: PlatformTypesVideoAPIScrobbleServiceOptions;
  putIncognitoMode: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobblePutIncognitoMode;
  subIncognitoMode: PlatformTypesSettingsAPISocialPrivateSessionPrivateSessionAPIScrobbleSubIncognitoMode;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesVideoAPIScrobbleServiceOptions = Record<string, unknown>;

export type PlatformTypesVideoAPISetFullscreen = (arg0: any) => unknown;

export type PlatformTypesVideoAPISetIsVideoVisible = (arg0: any) => unknown;

export type PlatformTypesVideoAPISetPip = (arg0: any) => unknown;

export type PlatformTypesVideoAPISetPreferredSubtitleLanguage = (arg0: any) => unknown;

export type PlatformTypesVideoAPISetSubtitleLanguages = (arg0: any) => unknown;

export type PlatformTypesVideoAPISetWindow = (arg0: any) => unknown;

export interface PlatformTypesVideoAPIShowService {
  getDecorate: PlatformTypesShowAPIShowServiceClientGetDecorate;
  getShow: PlatformTypesShowAPIShowServiceClientGetShow;
  getShowEpisode: PlatformTypesShowAPIShowServiceClientGetShowEpisode;
  getUnfinishedEpisodes: PlatformTypesShowAPIShowServiceClientGetUnfinishedEpisodes;
  markShowAsPlayed: PlatformTypesShowAPIShowServiceClientMarkShowAsPlayed;
  options: PlatformTypesVideoAPIShowServiceOptions;
  playShow: PlatformTypesShowAPIShowServiceClientPlayShow;
  subDecorate: PlatformTypesShowAPIShowServiceClientSubDecorate;
  subShow: PlatformTypesShowAPIShowServiceClientSubShow;
  subShowEpisode: PlatformTypesShowAPIShowServiceClientSubShowEpisode;
  subUnfinishedEpisodes: PlatformTypesShowAPIShowServiceClientSubUnfinishedEpisodes;
  transport: PlatformTypesRegistryMapValueInstance2;
}

export type PlatformTypesVideoAPIShowServiceOptions = Record<string, unknown>;

export type PlatformTypesVideoAPIVideoModeToSurface = (arg0: any) => unknown;
